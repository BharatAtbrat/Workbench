[
  {
    "label": "accessibility",
    "kind": 15,
    "deprecated": false,
    "insertText": "accessibility {\n  $0\n}",
    "insertTextFormat": 2
  },
  {
    "label": "layout",
    "kind": 15,
    "deprecated": false,
    "insertText": "layout {\n  $0\n}",
    "insertTextFormat": 2
  },
  {
    "label": "styles",
    "kind": 14,
    "deprecated": false,
    "insertText": "styles [\"$0\"]",
    "insertTextFormat": 2
  },
  {
    "label": "Gtk",
    "kind": 9,
    "deprecated": false,
    "insertText": "Gtk.",
    "insertTextFormat": 1
  },
  {
    "label": "ATContext",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ATContext : GObject.Object\n```\n\n---\n\n`GtkATContext` is an abstract class provided by GTK to communicate to\nplatform-specific assistive technologies API.\n\nEach platform supported by GTK implements a `GtkATContext` subclass, and\nis responsible for updating the accessible state in response to state\nchanges in `GtkAccessible`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ATContext.html)"
    },
    "deprecated": false,
    "insertText": "ATContext {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AboutDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AboutDialog : Gtk.Window implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\nThe `GtkAboutDialog` offers a simple way to display information about\na program.\n\nThe shown information includes the programs' logo, name, copyright,\nwebsite and license. It is also possible to give credits to the authors,\ndocumenters, translators and artists who have worked on the program.\n\nAn about dialog is typically opened when the user selects the `About`\noption from the `Help` menu. All parts of the dialog are optional.\n\n![An example GtkAboutDialog](aboutdialog.png)\n\nAbout dialogs often contain links and email addresses. `GtkAboutDialog`\ndisplays these as clickable links. By default, it calls [method@Gtk.FileLauncher.launch]\nwhen a user clicks one. The behaviour can be overridden with the\n[signal@Gtk.AboutDialog::activate-link] signal.\n\nTo specify a person with an email address, use a string like\n`Edgar Allan Poe <edgar@poe.com>`. To specify a website with a title,\nuse a string like `GTK team https://www.gtk.org`.\n\nTo make constructing a `GtkAboutDialog` as convenient as possible, you can\nuse the function [func@Gtk.show_about_dialog] which constructs and shows\na dialog and keeps it around so that it can be shown again.\n\nNote that GTK sets a default title of `_(\"About %s\")` on the dialog\nwindow (where `%s` is replaced by the name of the application, but in\norder to ensure proper translation of the title, applications should\nset the title property explicitly when constructing a `GtkAboutDialog`,\nas shown in the following example:\n\n```c\nGFile *logo_file = g_file_new_for_path (\"./logo.png\");\nGdkTexture *example_logo = gdk_texture_new_from_file (logo_file, NULL);\ng_object_unref (logo_file);\n\ngtk_show_about_dialog (NULL,\n                       \"program-name\", \"ExampleCode\",\n                       \"logo\", example_logo,\n                       \"title\", _(\"About ExampleCode\"),\n                       NULL);\n```\n\n## CSS nodes\n\n`GtkAboutDialog` has a single CSS node with the name `window` and style\nclass `.aboutdialog`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AboutDialog.html)"
    },
    "deprecated": false,
    "insertText": "AboutDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ActionBar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ActionBar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkActionBar` is designed to present contextual actions.\n\n![An example GtkActionBar](action-bar.png)\n\nIt is expected to be displayed below the content and expand\nhorizontally to fill the area.\n\nIt allows placing children at the start or the end. In addition, it\ncontains an internal centered box which is centered with respect to\nthe full width of the box, even if the children at either side take\nup different amounts of space.\n\n# GtkActionBar as GtkBuildable\n\nThe `GtkActionBar` implementation of the `GtkBuildable` interface supports\nadding children at the start or end sides by specifying “start” or “end” as\nthe “type” attribute of a `<child>` element, or setting the center widget\nby specifying “center” value.\n\n# CSS nodes\n\n```\nactionbar\n╰── revealer\n    ╰── box\n        ├── box.start\n        │   ╰── [start children]\n        ├── [center widget]\n        ╰── box.end\n            ╰── [end children]\n```\n\nA `GtkActionBar`'s CSS node is called `actionbar`. It contains a `revealer`\nsubnode, which contains a `box` subnode, which contains two `box` subnodes at\nthe start and end of the action bar, with `start` and `end style classes\nrespectively, as well as a center node that represents the center child.\n\nEach of the boxes contains children packed for that side.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ActionBar.html)"
    },
    "deprecated": false,
    "insertText": "ActionBar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ActivateAction",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ActivateAction : Gtk.ShortcutAction\n```\n\n---\n\nA `GtkShortcutAction` that calls gtk_widget_activate().\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ActivateAction.html)"
    },
    "deprecated": false,
    "insertText": "ActivateAction {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Adjustment",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Adjustment : GObject.InitiallyUnowned\n```\n\n---\n\n`GtkAdjustment` is a model for a numeric value.\n\nThe `GtkAdjustment` has an associated lower and upper bound.\nIt also contains step and page increments, and a page size.\n\nAdjustments are used within several GTK widgets, including\n[class@Gtk.SpinButton], [class@Gtk.Viewport], [class@Gtk.Scrollbar]\nand [class@Gtk.Scale].\n\nThe `GtkAdjustment` object does not update the value itself. Instead\nit is left up to the owner of the `GtkAdjustment` to control the value.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Adjustment.html)"
    },
    "deprecated": false,
    "insertText": "Adjustment {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AlertDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AlertDialog : GObject.Object\n```\n\n---\n\nA `GtkAlertDialog` object collects the arguments that\nare needed to present a message to the user.\n\nThe message is shown with the [method@Gtk.AlertDialog.choose]\nfunction.\n\nIf you don't need to wait for a button to be clicked, you can use\n[method@Gtk.AlertDialog.show].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AlertDialog.html)"
    },
    "deprecated": false,
    "insertText": "AlertDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AlternativeTrigger",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AlternativeTrigger : Gtk.ShortcutTrigger\n```\n\n---\n\nA `GtkShortcutTrigger` that combines two triggers.\n\nThe `GtkAlternativeTrigger` triggers when either of two trigger.\n\nThis can be cascaded to combine more than two triggers.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AlternativeTrigger.html)"
    },
    "deprecated": false,
    "insertText": "AlternativeTrigger {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AnyFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AnyFilter : Gtk.MultiFilter implements Gio.ListModel, Gtk.Buildable\n```\n\n---\n\n`GtkAnyFilter` matches an item when at least one of its filters matches.\n\nTo add filters to a `GtkAnyFilter`, use [method@Gtk.MultiFilter.append].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AnyFilter.html)"
    },
    "deprecated": false,
    "insertText": "AnyFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AppChooserButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AppChooserButton : Gtk.Widget implements Gtk.Accessible, Gtk.AppChooser, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkAppChooserButton` lets the user select an application.\n\n![An example GtkAppChooserButton](appchooserbutton.png)\n\nInitially, a `GtkAppChooserButton` selects the first application\nin its list, which will either be the most-recently used application\nor, if [property@Gtk.AppChooserButton:show-default-item] is %TRUE, the\ndefault application.\n\nThe list of applications shown in a `GtkAppChooserButton` includes\nthe recommended applications for the given content type. When\n[property@Gtk.AppChooserButton:show-default-item] is set, the default\napplication is also included. To let the user chooser other applications,\nyou can set the [property@Gtk.AppChooserButton:show-dialog-item] property,\nwhich allows to open a full [class@Gtk.AppChooserDialog].\n\nIt is possible to add custom items to the list, using\n[method@Gtk.AppChooserButton.append_custom_item]. These items cause\nthe [signal@Gtk.AppChooserButton::custom-item-activated] signal to be\nemitted when they are selected.\n\nTo track changes in the selected application, use the\n[signal@Gtk.AppChooserButton::changed] signal.\n\n## CSS nodes\n\n`GtkAppChooserButton` has a single CSS node with the name “appchooserbutton”.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AppChooserButton.html)"
    },
    "deprecated": false,
    "insertText": "AppChooserButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AppChooserDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AppChooserDialog : Gtk.Dialog implements Gtk.Accessible, Gtk.AppChooser, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\n`GtkAppChooserDialog` shows a `GtkAppChooserWidget` inside a `GtkDialog`.\n\n![An example GtkAppChooserDialog](appchooserdialog.png)\n\nNote that `GtkAppChooserDialog` does not have any interesting methods\nof its own. Instead, you should get the embedded `GtkAppChooserWidget`\nusing [method@Gtk.AppChooserDialog.get_widget] and call its methods if\nthe generic [iface@Gtk.AppChooser] interface is not sufficient for\nyour needs.\n\nTo set the heading that is shown above the `GtkAppChooserWidget`,\nuse [method@Gtk.AppChooserDialog.set_heading].\n\n## CSS nodes\n\n`GtkAppChooserDialog` has a single CSS node with the name `window` and style\nclass `.appchooser`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AppChooserDialog.html)"
    },
    "deprecated": false,
    "insertText": "AppChooserDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AppChooserWidget",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AppChooserWidget : Gtk.Widget implements Gtk.Accessible, Gtk.AppChooser, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkAppChooserWidget` is a widget for selecting applications.\n\nIt is the main building block for [class@Gtk.AppChooserDialog].\nMost applications only need to use the latter; but you can use\nthis widget as part of a larger widget if you have special needs.\n\n`GtkAppChooserWidget` offers detailed control over what applications\nare shown, using the\n[property@Gtk.AppChooserWidget:show-default],\n[property@Gtk.AppChooserWidget:show-recommended],\n[property@Gtk.AppChooserWidget:show-fallback],\n[property@Gtk.AppChooserWidget:show-other] and\n[property@Gtk.AppChooserWidget:show-all] properties. See the\n[iface@Gtk.AppChooser] documentation for more information about these\ngroups of applications.\n\nTo keep track of the selected application, use the\n[signal@Gtk.AppChooserWidget::application-selected] and\n[signal@Gtk.AppChooserWidget::application-activated] signals.\n\n## CSS nodes\n\n`GtkAppChooserWidget` has a single CSS node with name appchooser.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AppChooserWidget.html)"
    },
    "deprecated": false,
    "insertText": "AppChooserWidget {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Application",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Application : Gio.Application implements Gio.ActionGroup, Gio.ActionMap\n```\n\n---\n\n`GtkApplication` is a high-level API for writing applications.\n\nIt supports many aspects of writing a GTK application in a convenient\nfashion, without enforcing a one-size-fits-all model.\n\nCurrently, `GtkApplication` handles GTK initialization, application\nuniqueness, session management, provides some basic scriptability and\ndesktop shell integration by exporting actions and menus and manages a\nlist of toplevel windows whose life-cycle is automatically tied to the\nlife-cycle of your application.\n\nWhile `GtkApplication` works fine with plain [class@Gtk.Window]s, it is\nrecommended to use it together with [class@Gtk.ApplicationWindow].\n\n## Automatic resources\n\n`GtkApplication` will automatically load menus from the `GtkBuilder`\nresource located at \"gtk/menus.ui\", relative to the application's\nresource base path (see [method@Gio.Application.set_resource_base_path]).\nThe menu with the ID \"menubar\" is taken as the application's\nmenubar. Additional menus (most interesting submenus) can be named\nand accessed via [method@Gtk.Application.get_menu_by_id] which allows for\ndynamic population of a part of the menu structure.\n\nNote that automatic resource loading uses the resource base path\nthat is set at construction time and will not work if the resource\nbase path is changed at a later time.\n\nIt is also possible to provide the menubar manually using\n[method@Gtk.Application.set_menubar].\n\n`GtkApplication` will also automatically setup an icon search path for\nthe default icon theme by appending \"icons\" to the resource base\npath. This allows your application to easily store its icons as\nresources. See [method@Gtk.IconTheme.add_resource_path] for more\ninformation.\n\nIf there is a resource located at `gtk/help-overlay.ui` which\ndefines a [class@Gtk.ShortcutsWindow] with ID `help_overlay` then\n`GtkApplication` associates an instance of this shortcuts window with\neach [class@Gtk.ApplicationWindow] and sets up the keyboard accelerator\n<kbd>Control</kbd>+<kbd>?</kbd> to open it. To create a menu item that\ndisplays the shortcuts window, associate the item with the action\n`win.show-help-overlay`.\n\n## A simple application\n\n[A simple example](https://gitlab.gnome.org/GNOME/gtk/tree/main/examples/bp/bloatpad.c)\nis available in the GTK source code repository\n\n`GtkApplication` optionally registers with a session manager of the\nusers session (if you set the [property@Gtk.Application:register-session]\nproperty) and offers various functionality related to the session\nlife-cycle.\n\nAn application can block various ways to end the session with\nthe [method@Gtk.Application.inhibit] function. Typical use cases for\nthis kind of inhibiting are long-running, uninterruptible operations,\nsuch as burning a CD or performing a disk backup. The session\nmanager may not honor the inhibitor, but it can be expected to\ninform the user about the negative consequences of ending the\nsession while inhibitors are present.\n\n## See Also\n\n[HowDoI: Using GtkApplication](https://wiki.gnome.org/HowDoI/GtkApplication),\n[Getting Started with GTK: Basics](getting_started.html#basics)\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Application.html)"
    },
    "deprecated": false,
    "insertText": "Application {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ApplicationWindow",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ApplicationWindow : Gtk.Window implements Gio.ActionGroup, Gio.ActionMap, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\n`GtkApplicationWindow` is a `GtkWindow` subclass that integrates with\n`GtkApplication`.\n\nNotably, `GtkApplicationWindow` can handle an application menubar.\n\nThis class implements the `GActionGroup` and `GActionMap` interfaces,\nto let you add window-specific actions that will be exported by the\nassociated [class@Gtk.Application], together with its application-wide\nactions. Window-specific actions are prefixed with the “win.”\nprefix and application-wide actions are prefixed with the “app.”\nprefix. Actions must be addressed with the prefixed name when\nreferring to them from a `GMenuModel`.\n\nNote that widgets that are placed inside a `GtkApplicationWindow`\ncan also activate these actions, if they implement the\n[iface@Gtk.Actionable] interface.\n\nThe settings [property@Gtk.Settings:gtk-shell-shows-app-menu] and\n[property@Gtk.Settings:gtk-shell-shows-menubar] tell GTK whether the\ndesktop environment is showing the application menu and menubar\nmodels outside the application as part of the desktop shell.\nFor instance, on OS X, both menus will be displayed remotely;\non Windows neither will be.\n\nIf the desktop environment does not display the menubar, then\n`GtkApplicationWindow` will automatically show a menubar for it.\nThis behaviour can be overridden with the\n[property@Gtk.ApplicationWindow:show-menubar] property. If the\ndesktop environment does not display the application menu, then\nit will automatically be included in the menubar or in the windows\nclient-side decorations.\n\nSee [class@Gtk.PopoverMenu] for information about the XML language\nused by `GtkBuilder` for menu models.\n\nSee also: [method@Gtk.Application.set_menubar].\n\n## A GtkApplicationWindow with a menubar\n\nThe code sample below shows how to set up a `GtkApplicationWindow`\nwith a menu bar defined on the [class@Gtk.Application]:\n\n```c\nGtkApplication *app = gtk_application_new (\"org.gtk.test\", 0);\n\nGtkBuilder *builder = gtk_builder_new_from_string (\n    \"<interface>\"\n    \"  <menu id='menubar'>\"\n    \"    <submenu>\"\n    \"      <attribute name='label' translatable='yes'>_Edit</attribute>\"\n    \"      <item>\"\n    \"        <attribute name='label' translatable='yes'>_Copy</attribute>\"\n    \"        <attribute name='action'>win.copy</attribute>\"\n    \"      </item>\"\n    \"      <item>\"\n    \"        <attribute name='label' translatable='yes'>_Paste</attribute>\"\n    \"        <attribute name='action'>win.paste</attribute>\"\n    \"      </item>\"\n    \"    </submenu>\"\n    \"  </menu>\"\n    \"</interface>\",\n    -1);\n\nGMenuModel *menubar = G_MENU_MODEL (gtk_builder_get_object (builder, \"menubar\"));\ngtk_application_set_menubar (GTK_APPLICATION (app), menubar);\ng_object_unref (builder);\n\n// ...\n\nGtkWidget *window = gtk_application_window_new (app);\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ApplicationWindow.html)"
    },
    "deprecated": false,
    "insertText": "ApplicationWindow {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AspectFrame",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AspectFrame : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkAspectFrame` preserves the aspect ratio of its child.\n\nThe frame can respect the aspect ratio of the child widget,\nor use its own aspect ratio.\n\n# CSS nodes\n\n`GtkAspectFrame` uses a CSS node with name `frame`.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkAspectFrame` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nStarting from GTK 4.12, `GtkAspectFrame` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AspectFrame.html)"
    },
    "deprecated": false,
    "insertText": "AspectFrame {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Assistant",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Assistant : Gtk.Window implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\n`GtkAssistant` is used to represent a complex as a series of steps.\n\n![An example GtkAssistant](assistant.png)\n\nEach step consists of one or more pages. `GtkAssistant` guides the user\nthrough the pages, and controls the page flow to collect the data needed\nfor the operation.\n\n`GtkAssistant` handles which buttons to show and to make sensitive based\non page sequence knowledge and the [enum@Gtk.AssistantPageType] of each\npage in addition to state information like the *completed* and *committed*\npage statuses.\n\nIf you have a case that doesn’t quite fit in `GtkAssistant`s way of\nhandling buttons, you can use the %GTK_ASSISTANT_PAGE_CUSTOM page\ntype and handle buttons yourself.\n\n`GtkAssistant` maintains a `GtkAssistantPage` object for each added\nchild, which holds additional per-child properties. You\nobtain the `GtkAssistantPage` for a child with [method@Gtk.Assistant.get_page].\n\n# GtkAssistant as GtkBuildable\n\nThe `GtkAssistant` implementation of the `GtkBuildable` interface\nexposes the @action_area as internal children with the name\n“action_area”.\n\nTo add pages to an assistant in `GtkBuilder`, simply add it as a\nchild to the `GtkAssistant` object. If you need to set per-object\nproperties, create a `GtkAssistantPage` object explicitly, and\nset the child widget as a property on it.\n\n# CSS nodes\n\n`GtkAssistant` has a single CSS node with the name window and style\nclass .assistant.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Assistant.html)"
    },
    "deprecated": false,
    "insertText": "Assistant {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "AssistantPage",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.AssistantPage : GObject.Object\n```\n\n---\n\n`GtkAssistantPage` is an auxiliary object used by `GtkAssistant.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.AssistantPage.html)"
    },
    "deprecated": false,
    "insertText": "AssistantPage {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "BinLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.BinLayout : Gtk.LayoutManager\n```\n\n---\n\n`GtkBinLayout` is a `GtkLayoutManager` subclass useful for create \"bins\" of\nwidgets.\n\n`GtkBinLayout` will stack each child of a widget on top of each other,\nusing the [property@Gtk.Widget:hexpand], [property@Gtk.Widget:vexpand],\n[property@Gtk.Widget:halign], and [property@Gtk.Widget:valign] properties\nof each child to determine where they should be positioned.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.BinLayout.html)"
    },
    "deprecated": false,
    "insertText": "BinLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "BookmarkList",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.BookmarkList : GObject.Object implements Gio.ListModel\n```\n\n---\n\n`GtkBookmarkList` is a list model that wraps `GBookmarkFile`.\n\nIt presents a `GListModel` and fills it asynchronously with the\n`GFileInfo`s returned from that function.\n\nThe `GFileInfo`s in the list have some attributes in the recent\nnamespace added: `recent::private` (boolean) and `recent:applications`\n(stringv).\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.BookmarkList.html)"
    },
    "deprecated": false,
    "insertText": "BookmarkList {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "BoolFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.BoolFilter : Gtk.Filter\n```\n\n---\n\n`GtkBoolFilter` evaluates a boolean `GtkExpression`\nto determine whether to include items.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.BoolFilter.html)"
    },
    "deprecated": false,
    "insertText": "BoolFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Box",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Box : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nThe `GtkBox` widget arranges child widgets into a single row or column.\n\n![An example GtkBox](box.png)\n\nWhether it is a row or column depends on the value of its\n[property@Gtk.Orientable:orientation] property. Within the other\ndimension, all children are allocated the same size. Of course, the\n[property@Gtk.Widget:halign] and [property@Gtk.Widget:valign] properties\ncan be used on the children to influence their allocation.\n\nUse repeated calls to [method@Gtk.Box.append] to pack widgets into a\n`GtkBox` from start to end. Use [method@Gtk.Box.remove] to remove widgets\nfrom the `GtkBox`. [method@Gtk.Box.insert_child_after] can be used to add\na child at a particular position.\n\nUse [method@Gtk.Box.set_homogeneous] to specify whether or not all children\nof the `GtkBox` are forced to get the same amount of space.\n\nUse [method@Gtk.Box.set_spacing] to determine how much space will be minimally\nplaced between all children in the `GtkBox`. Note that spacing is added\n*between* the children.\n\nUse [method@Gtk.Box.reorder_child_after] to move a child to a different\nplace in the box.\n\n# CSS nodes\n\n`GtkBox` uses a single CSS node with name box.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkBox` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nStarting from GTK 4.12, `GtkBox` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Box.html)"
    },
    "deprecated": false,
    "insertText": "Box {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "BoxLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.BoxLayout : Gtk.LayoutManager implements Gtk.Orientable\n```\n\n---\n\n`GtkBoxLayout` is a layout manager that arranges children in a single\nrow or column.\n\nWhether it is a row or column depends on the value of its\n[property@Gtk.Orientable:orientation] property. Within the other dimension\nall children all allocated the same size. The `GtkBoxLayout` will respect\nthe [property@Gtk.Widget:halign] and [property@Gtk.Widget:valign]\nproperties of each child widget.\n\nIf you want all children to be assigned the same size, you can use\nthe [property@Gtk.BoxLayout:homogeneous] property.\n\nIf you want to specify the amount of space placed between each child,\nyou can use the [property@Gtk.BoxLayout:spacing] property.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.BoxLayout.html)"
    },
    "deprecated": false,
    "insertText": "BoxLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Builder",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Builder : GObject.Object\n```\n\n---\n\nA `GtkBuilder` reads XML descriptions of a user interface and\ninstantiates the described objects.\n\nTo create a `GtkBuilder` from a user interface description, call\n[ctor@Gtk.Builder.new_from_file], [ctor@Gtk.Builder.new_from_resource]\nor [ctor@Gtk.Builder.new_from_string].\n\nIn the (unusual) case that you want to add user interface\ndescriptions from multiple sources to the same `GtkBuilder` you can\ncall [ctor@Gtk.Builder.new] to get an empty builder and populate it by\n(multiple) calls to [method@Gtk.Builder.add_from_file],\n[method@Gtk.Builder.add_from_resource] or\n[method@Gtk.Builder.add_from_string].\n\nA `GtkBuilder` holds a reference to all objects that it has constructed\nand drops these references when it is finalized. This finalization can\ncause the destruction of non-widget objects or widgets which are not\ncontained in a toplevel window. For toplevel windows constructed by a\nbuilder, it is the responsibility of the user to call\n[method@Gtk.Window.destroy] to get rid of them and all the widgets\nthey contain.\n\nThe functions [method@Gtk.Builder.get_object] and\n[method@Gtk.Builder.get_objects] can be used to access the widgets in\nthe interface by the names assigned to them inside the UI description.\nToplevel windows returned by these functions will stay around until the\nuser explicitly destroys them with [method@Gtk.Window.destroy]. Other\nwidgets will either be part of a larger hierarchy constructed by the\nbuilder (in which case you should not have to worry about their lifecycle),\nor without a parent, in which case they have to be added to some container\nto make use of them. Non-widget objects need to be reffed with\ng_object_ref() to keep them beyond the lifespan of the builder.\n\n## GtkBuilder UI Definitions\n\n`GtkBuilder` parses textual descriptions of user interfaces which are\nspecified in XML format. We refer to these descriptions as “GtkBuilder\nUI definitions” or just “UI definitions” if the context is clear.\n\n### Structure of UI definitions\n\nUI definition files are always encoded in UTF-8.\n\nThe toplevel element is `<interface>`. It optionally takes a “domain”\nattribute, which will make the builder look for translated strings\nusing `dgettext()` in the domain specified. This can also be done by\ncalling [method@Gtk.Builder.set_translation_domain] on the builder.\nFor example:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<interface domain=\"your-app\">\n  ...\n</interface>\n```\n\n### Requirements\n\nThe target toolkit version(s) are described by `<requires>` elements,\nthe “lib” attribute specifies the widget library in question (currently\nthe only supported value is “gtk”) and the “version” attribute specifies\nthe target version in the form “`<major>`.`<minor>`”. `GtkBuilder` will\nerror out if the version requirements are not met. For example:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<interface domain=\"your-app\">\n  <requires lib=\"gtk\" version=\"4.0\" />\n</interface>\n```\n\n### Objects\n\nObjects are defined as children of the `<interface>` element.\n\nObjects are described by `<object>` elements, which can contain\n`<property>` elements to set properties, `<signal>` elements which\nconnect signals to handlers, and `<child>` elements, which describe\nchild objects.\n\nTypically, the specific kind of object represented by an `<object>`\nelement is specified by the “class” attribute. If the type has not\nbeen loaded yet, GTK tries to find the `get_type()` function from the\nclass name by applying heuristics. This works in most cases, but if\nnecessary, it is possible to specify the name of the `get_type()`\nfunction explicitly with the \"type-func\" attribute. If your UI definition\nis referencing internal types, you should make sure to call\n`g_type_ensure()` for each object type before parsing the UI definition.\n\nObjects may be given a name with the “id” attribute, which allows the\napplication to retrieve them from the builder with\n[method@Gtk.Builder.get_object]. An id is also necessary to use the\nobject as property value in other parts of the UI definition. GTK\nreserves ids starting and ending with `___` (three consecutive\nunderscores) for its own purposes.\n\n### Properties\n\nSetting properties of objects is pretty straightforward with the\n`<property>` element: the “name” attribute specifies the name of the\nproperty, and the content of the element specifies the value:\n\n```xml\n<object class=\"GtkButton\">\n  <property name=\"label\">Hello, world</property>\n</object>\n```\n\nIf the “translatable” attribute is set to a true value, GTK uses\n`gettext()` (or `dgettext()` if the builder has a translation domain set)\nto find a translation for the value. This happens before the value\nis parsed, so it can be used for properties of any type, but it is\nprobably most useful for string properties. It is also possible to\nspecify a context to disambiguate short strings, and comments which\nmay help the translators:\n\n```xml\n<object class=\"GtkButton\">\n  <property name=\"label\" translatable=\"yes\" context=\"button\">Hello, world</property>\n</object>\n```\n\n`GtkBuilder` can parse textual representations for the most common\nproperty types:\n\n- characters\n- strings\n- integers\n- floating-point numbers\n- booleans (strings like “TRUE”, “t”, “yes”, “y”, “1” are interpreted\n  as true values, strings like “FALSE”, “f”, “no”, “n”, “0” are interpreted\n  as false values)\n- enumeration types (can be specified by their full C identifier their short\n  name used when registering the enumeration type, or their integer value)\n- flag types (can be specified by their C identifier, short name, integer\n  value, and optionally combined with “|” for bitwise OR, e.g.\n  “GTK_INPUT_HINT_EMOJI|GTK_INPUT_HINT_LOWERCASE”, or “emoji|lowercase”)\n- colors (in a format understood by [method@Gdk.RGBA.parse])\n- `GVariant` (can be specified in the format understood by\n   [func@GLib.Variant.parse])\n- pixbufs (can be specified as a filename of an image file to load)\n\nObjects can be referred to by their name and by default refer to\nobjects declared in the local XML fragment and objects exposed via\n[method@Gtk.Builder.expose_object]. In general, `GtkBuilder` allows\nforward references to objects declared in the local XML; an object\ndoesn’t have to be constructed before it can be referred to. The\nexception to this rule is that an object has to be constructed before\nit can be used as the value of a construct-only property.\n\n### Child objects\n\nMany widgets have properties for child widgets, such as\n[property@Gtk.Expander:child]. In this case, the preferred way to\nspecify the child widget in a ui file is to simply set the property:\n\n```xml\n<object class=\"GtkExpander\">\n  <property name=\"child\">\n    <object class=\"GtkLabel\">\n    ...\n    </object>\n  </property>\n</object>\n```\n\nGeneric containers that can contain an arbitrary number of children,\nsuch as [class@Gtk.Box] instead use the `<child>` element. A `<child>`\nelement contains an `<object>` element which describes the child object.\nMost often, child objects are widgets inside a container, but they can\nalso be, e.g., actions in an action group, or columns in a tree model.\n\nAny object type that implements the [iface@Gtk.Buildable] interface can\nspecify how children may be added to it. Since many objects and widgets that\nare included with GTK already implement the `GtkBuildable` interface,\ntypically child objects can be added using the `<child>` element without\nhaving to be concerned about the underlying implementation.\n\nSee the [`GtkWidget` documentation](class.Widget.html#gtkwidget-as-gtkbuildable)\nfor many examples of using `GtkBuilder` with widgets, including setting\nchild objects using the `<child>` element.\n\nA noteworthy special case to the general rule that only objects implementing\n`GtkBuildable` may specify how to handle the `<child>` element is that\n`GtkBuilder` provides special support for adding objects to a\n[class@Gio.ListStore] by using the `<child>` element. For instance:\n\n```xml\n<object class=\"GListStore\">\n  <property name=\"item-type\">MyObject</property>\n  <child>\n    <object class=\"MyObject\" />\n  </child>\n  ...\n</object>\n```\n\n### Property bindings\n\nIt is also possible to bind a property value to another object's\nproperty value using the attributes \"bind-source\" to specify the\nsource object of the binding, and optionally, \"bind-property\" and\n\"bind-flags\" to specify the source property and source binding flags\nrespectively. Internally, `GtkBuilder` implements this using\n[class@GObject.Binding] objects.\n\nFor instance, in the example below the “label” property of the\n`bottom_label` widget is bound to the “label” property of the\n`top_button` widget:\n\n```xml\n<object class=\"GtkBox\">\n  <property name=\"orientation\">vertical</property>\n  <child>\n    <object class=\"GtkButton\" id=\"top_button\">\n      <property name=\"label\">Hello, world</property>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkLabel\" id=\"bottom_label\">\n      <property name=\"label\"\n                bind-source=\"top_button\"\n                bind-property=\"label\"\n                bind-flags=\"sync-create\" />\n    </object>\n  </child>\n</object>\n```\n\nFor more information, see the documentation of the\n[method@GObject.Object.bind_property] method.\n\nPlease note that another way to set up bindings between objects in .ui files\nis to use the `GtkExpression` methodology. See the\n[`GtkExpression` documentation](class.Expression.html#gtkexpression-in-ui-files)\nfor more information.\n\n### Internal children\n\nSometimes it is necessary to refer to widgets which have implicitly\nbeen constructed by GTK as part of a composite widget, to set\nproperties on them or to add further children (e.g. the content area\nof a `GtkDialog`). This can be achieved by setting the “internal-child”\nproperty of the `<child>` element to a true value. Note that `GtkBuilder`\nstill requires an `<object>` element for the internal child, even if it\nhas already been constructed.\n\n### Specialized children\n\nA number of widgets have different places where a child can be added\n(e.g. tabs vs. page content in notebooks). This can be reflected in\na UI definition by specifying the “type” attribute on a `<child>`\nThe possible values for the “type” attribute are described in the\nsections describing the widget-specific portions of UI definitions.\n\n### Signal handlers and function pointers\n\nSignal handlers are set up with the `<signal>` element. The “name”\nattribute specifies the name of the signal, and the “handler” attribute\nspecifies the function to connect to the signal.\n\n```xml\n<object class=\"GtkButton\" id=\"hello_button\">\n  <signal name=\"clicked\" handler=\"hello_button__clicked\" />\n</object>\n```\n\nThe remaining attributes, “after”, “swapped” and “object”, have the\nsame meaning as the corresponding parameters of the\n[func@GObject.signal_connect_object] or [func@GObject.signal_connect_data]\nfunctions:\n\n- “after” matches the `G_CONNECT_AFTER` flag, and will ensure that the\n  handler is called after the default class closure for the signal\n- “swapped” matches the `G_CONNECT_SWAPPED` flag, and will swap the\n  instance and closure arguments when invoking the signal handler\n- “object” will bind the signal handler to the lifetime of the object\n  referenced by the attribute\n\nBy default \"swapped\" will be set to \"yes\" if not specified otherwise, in\nthe case where \"object\" is set, for convenience. A “last_modification_time”\nattribute is also allowed, but it does not have a meaning to the builder.\n\nWhen compiling applications for Windows, you must declare signal callbacks\nwith the `G_MODULE_EXPORT` decorator, or they will not be put in the symbol\ntable:\n\n```c\nG_MODULE_EXPORT void\nhello_button__clicked (GtkButton *button,\n                       gpointer data)\n{\n  // ...\n}\n```\n\nOn Linux and Unix, this is not necessary; applications should instead\nbe compiled with the `-Wl,--export-dynamic` argument inside their compiler\nflags, and linked against `gmodule-export-2.0`.\n\n## Example UI Definition\n\n```xml\n<interface>\n  <object class=\"GtkDialog\" id=\"dialog1\">\n    <child internal-child=\"content_area\">\n      <object class=\"GtkBox\">\n        <child internal-child=\"action_area\">\n          <object class=\"GtkBox\">\n            <child>\n              <object class=\"GtkButton\" id=\"ok_button\">\n                <property name=\"label\" translatable=\"yes\">_Ok</property>\n                <property name=\"use-underline\">True</property>\n                <signal name=\"clicked\" handler=\"ok_button_clicked\"/>\n              </object>\n            </child>\n          </object>\n        </child>\n      </object>\n    </child>\n  </object>\n</interface>\n```\n\n## Using GtkBuildable for extending UI definitions\n\nObjects can implement the [iface@Gtk.Buildable] interface to add custom\nelements and attributes to the XML. Typically, any extension will be\ndocumented in each type that implements the interface.\n\n## Templates\n\nWhen describing a [class@Gtk.Widget], you can use the `<template>` tag to\ndescribe a UI bound to a specific widget type. GTK will automatically load\nthe UI definition when instantiating the type, and bind children and\nsignal handlers to instance fields and function symbols.\n\nFor more information, see the [`GtkWidget` documentation](class.Widget.html#building-composite-widgets-from-template-xml)\nfor details.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Builder.html)"
    },
    "deprecated": false,
    "insertText": "Builder {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "BuilderCScope",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.BuilderCScope : GObject.Object implements Gtk.BuilderScope\n```\n\n---\n\nA `GtkBuilderScope` implementation for the C language.\n\n`GtkBuilderCScope` instances use symbols explicitly added to @builder\nwith prior calls to [method@Gtk.BuilderCScope.add_callback_symbol].\nIf developers want to do that, they are encouraged to create their\nown scopes for that purpose.\n\nIn the case that symbols are not explicitly added; GTK will uses\n`GModule`’s introspective features (by opening the module %NULL) to\nlook at the application’s symbol table. From here it tries to match\nthe signal function names given in the interface description with\nsymbols in the application.\n\nNote that unless [method@Gtk.BuilderCScope.add_callback_symbol] is\ncalled for all signal callbacks which are referenced by the loaded XML,\nthis functionality will require that `GModule` be supported on the platform.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.BuilderCScope.html)"
    },
    "deprecated": false,
    "insertText": "BuilderCScope {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "BuilderListItemFactory",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.BuilderListItemFactory : Gtk.ListItemFactory\n```\n\n---\n\n`GtkBuilderListItemFactory` is a `GtkListItemFactory` that creates\nwidgets by instantiating `GtkBuilder` UI templates.\n\nThe templates must extend the class that the parent widget expects.\nFor example, a factory provided to [property@Gtk.ListView:factory] must have\na template that extends [class@Gtk.ListItem].\n\nTemplates typically use `GtkExpression`s to obtain data from the items\nin the model.\n\nExample:\n```xml\n  <interface>\n    <template class=\"GtkListItem\">\n      <property name=\"child\">\n        <object class=\"GtkLabel\">\n          <property name=\"xalign\">0</property>\n          <binding name=\"label\">\n            <lookup name=\"name\" type=\"SettingsKey\">\n              <lookup name=\"item\">GtkListItem</lookup>\n            </lookup>\n          </binding>\n        </object>\n      </property>\n    </template>\n  </interface>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.BuilderListItemFactory.html)"
    },
    "deprecated": false,
    "insertText": "BuilderListItemFactory {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Button",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Button : Gtk.Widget implements Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkButton` widget is generally used to trigger a callback function that is\ncalled when the button is pressed.\n\n![An example GtkButton](button.png)\n\nThe `GtkButton` widget can hold any valid child widget. That is, it can hold\nalmost any other standard `GtkWidget`. The most commonly used child is the\n`GtkLabel`.\n\n# CSS nodes\n\n`GtkButton` has a single CSS node with name button. The node will get the\nstyle classes .image-button or .text-button, if the content is just an\nimage or label, respectively. It may also receive the .flat style class.\nWhen activating a button via the keyboard, the button will temporarily\ngain the .keyboard-activating style class.\n\nOther style classes that are commonly used with `GtkButton` include\n.suggested-action and .destructive-action. In special cases, buttons\ncan be made round by adding the .circular style class.\n\nButton-like widgets like [class@Gtk.ToggleButton], [class@Gtk.MenuButton],\n[class@Gtk.VolumeButton], [class@Gtk.LockButton], [class@Gtk.ColorButton]\nor [class@Gtk.FontButton] use style classes such as .toggle, .popup, .scale,\n.lock, .color on the button node to differentiate themselves from a plain\n`GtkButton`.\n\n# Accessibility\n\n`GtkButton` uses the %GTK_ACCESSIBLE_ROLE_BUTTON role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Button.html)"
    },
    "deprecated": false,
    "insertText": "Button {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CClosureExpression",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CClosureExpression : Gtk.Expression\n```\n\n---\n\nA variant of `GtkClosureExpression` using a C closure.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CClosureExpression.html)"
    },
    "deprecated": false,
    "insertText": "CClosureExpression {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Calendar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Calendar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkCalendar` is a widget that displays a Gregorian calendar, one month\nat a time.\n\n![An example GtkCalendar](calendar.png)\n\nA `GtkCalendar` can be created with [ctor@Gtk.Calendar.new].\n\nThe date that is currently displayed can be altered with\n[method@Gtk.Calendar.select_day].\n\nTo place a visual marker on a particular day, use\n[method@Gtk.Calendar.mark_day] and to remove the marker,\n[method@Gtk.Calendar.unmark_day]. Alternative, all\nmarks can be cleared with [method@Gtk.Calendar.clear_marks].\n\nThe selected date can be retrieved from a `GtkCalendar` using\n[method@Gtk.Calendar.get_date].\n\nUsers should be aware that, although the Gregorian calendar is the\nlegal calendar in most countries, it was adopted progressively\nbetween 1582 and 1929. Display before these dates is likely to be\nhistorically incorrect.\n\n# CSS nodes\n\n```\ncalendar.view\n├── header\n│   ├── button\n│   ├── stack.month\n│   ├── button\n│   ├── button\n│   ├── label.year\n│   ╰── button\n╰── grid\n    ╰── label[.day-name][.week-number][.day-number][.other-month][.today]\n```\n\n`GtkCalendar` has a main node with name calendar. It contains a subnode\ncalled header containing the widgets for switching between years and months.\n\nThe grid subnode contains all day labels, including week numbers on the left\n(marked with the .week-number css class) and day names on top (marked with the\n.day-name css class).\n\nDay labels that belong to the previous or next month get the .other-month\nstyle class. The label of the current day get the .today style class.\n\nMarked day labels get the :selected state assigned.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Calendar.html)"
    },
    "deprecated": false,
    "insertText": "Calendar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CallbackAction",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CallbackAction : Gtk.ShortcutAction\n```\n\n---\n\nA `GtkShortcutAction` that invokes a callback.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CallbackAction.html)"
    },
    "deprecated": false,
    "insertText": "CallbackAction {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellArea",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellArea : GObject.InitiallyUnowned implements Gtk.Buildable, Gtk.CellLayout\n```\n\n---\n\nAn abstract class for laying out `GtkCellRenderer`s\n\nThe `GtkCellArea` is an abstract class for [iface@Gtk.CellLayout]\nwidgets (also referred to as \"layouting widgets\") to interface with\nan arbitrary number of [class@Gtk.CellRenderer]s and interact with the user\nfor a given [iface@Gtk.TreeModel] row.\n\nThe cell area handles events, focus navigation, drawing and\nsize requests and allocations for a given row of data.\n\nUsually users dont have to interact with the `GtkCellArea` directly\nunless they are implementing a cell-layouting widget themselves.\n\n## Requesting area sizes\n\nAs outlined in\n[GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management),\nGTK uses a height-for-width\ngeometry management system to compute the sizes of widgets and user\ninterfaces. `GtkCellArea` uses the same semantics to calculate the\nsize of an area for an arbitrary number of `GtkTreeModel` rows.\n\nWhen requesting the size of a cell area one needs to calculate\nthe size for a handful of rows, and this will be done differently by\ndifferent layouting widgets. For instance a [class@Gtk.TreeViewColumn]\nalways lines up the areas from top to bottom while a [class@Gtk.IconView]\non the other hand might enforce that all areas received the same\nwidth and wrap the areas around, requesting height for more cell\nareas when allocated less width.\n\nIt’s also important for areas to maintain some cell\nalignments with areas rendered for adjacent rows (cells can\nappear “columnized” inside an area even when the size of\ncells are different in each row). For this reason the `GtkCellArea`\nuses a [class@Gtk.CellAreaContext] object to store the alignments\nand sizes along the way (as well as the overall largest minimum\nand natural size for all the rows which have been calculated\nwith the said context).\n\nThe [class@Gtk.CellAreaContext] is an opaque object specific to the\n`GtkCellArea` which created it (see [method@Gtk.CellArea.create_context]).\n\nThe owning cell-layouting widget can create as many contexts as\nit wishes to calculate sizes of rows which should receive the\nsame size in at least one orientation (horizontally or vertically),\nHowever, it’s important that the same [class@Gtk.CellAreaContext] which\nwas used to request the sizes for a given `GtkTreeModel` row be\nused when rendering or processing events for that row.\n\nIn order to request the width of all the rows at the root level\nof a `GtkTreeModel` one would do the following:\n\n```c\nGtkTreeIter iter;\nint minimum_width;\nint natural_width;\n\nvalid = gtk_tree_model_get_iter_first (model, &iter);\nwhile (valid)\n  {\n    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);\n    gtk_cell_area_get_preferred_width (area, context, widget, NULL, NULL);\n\n    valid = gtk_tree_model_iter_next (model, &iter);\n  }\n\ngtk_cell_area_context_get_preferred_width (context, &minimum_width, &natural_width);\n```\n\nNote that in this example it’s not important to observe the\nreturned minimum and natural width of the area for each row\nunless the cell-layouting object is actually interested in the\nwidths of individual rows. The overall width is however stored\nin the accompanying `GtkCellAreaContext` object and can be consulted\nat any time.\n\nThis can be useful since `GtkCellLayout` widgets usually have to\nsupport requesting and rendering rows in treemodels with an\nexceedingly large amount of rows. The `GtkCellLayout` widget in\nthat case would calculate the required width of the rows in an\nidle or timeout source (see [func@GLib.timeout_add]) and when the widget\nis requested its actual width in [vfunc@Gtk.Widget.measure]\nit can simply consult the width accumulated so far in the\n`GtkCellAreaContext` object.\n\nA simple example where rows are rendered from top to bottom and\ntake up the full width of the layouting widget would look like:\n\n```c\nstatic void\nfoo_get_preferred_width (GtkWidget *widget,\n                         int       *minimum_size,\n                         int       *natural_size)\n{\n  Foo *self = FOO (widget);\n  FooPrivate *priv = foo_get_instance_private (self);\n\n  foo_ensure_at_least_one_handfull_of_rows_have_been_requested (self);\n\n  gtk_cell_area_context_get_preferred_width (priv->context, minimum_size, natural_size);\n}\n```\n\nIn the above example the `Foo` widget has to make sure that some\nrow sizes have been calculated (the amount of rows that `Foo` judged\nwas appropriate to request space for in a single timeout iteration)\nbefore simply returning the amount of space required by the area via\nthe `GtkCellAreaContext`.\n\nRequesting the height for width (or width for height) of an area is\na similar task except in this case the `GtkCellAreaContext` does not\nstore the data (actually, it does not know how much space the layouting\nwidget plans to allocate it for every row. It’s up to the layouting\nwidget to render each row of data with the appropriate height and\nwidth which was requested by the `GtkCellArea`).\n\nIn order to request the height for width of all the rows at the\nroot level of a `GtkTreeModel` one would do the following:\n\n```c\nGtkTreeIter iter;\nint minimum_height;\nint natural_height;\nint full_minimum_height = 0;\nint full_natural_height = 0;\n\nvalid = gtk_tree_model_get_iter_first (model, &iter);\nwhile (valid)\n  {\n    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);\n    gtk_cell_area_get_preferred_height_for_width (area, context, widget,\n                                                  width, &minimum_height, &natural_height);\n\n    if (width_is_for_allocation)\n       cache_row_height (&iter, minimum_height, natural_height);\n\n    full_minimum_height += minimum_height;\n    full_natural_height += natural_height;\n\n    valid = gtk_tree_model_iter_next (model, &iter);\n  }\n```\n\nNote that in the above example we would need to cache the heights\nreturned for each row so that we would know what sizes to render the\nareas for each row. However we would only want to really cache the\nheights if the request is intended for the layouting widgets real\nallocation.\n\nIn some cases the layouting widget is requested the height for an\narbitrary for_width, this is a special case for layouting widgets\nwho need to request size for tens of thousands  of rows. For this\ncase it’s only important that the layouting widget calculate\none reasonably sized chunk of rows and return that height\nsynchronously. The reasoning here is that any layouting widget is\nat least capable of synchronously calculating enough height to fill\nthe screen height (or scrolled window height) in response to a single\ncall to [vfunc@Gtk.Widget.measure]. Returning\na perfect height for width that is larger than the screen area is\ninconsequential since after the layouting receives an allocation\nfrom a scrolled window it simply continues to drive the scrollbar\nvalues while more and more height is required for the row heights\nthat are calculated in the background.\n\n## Rendering Areas\n\nOnce area sizes have been acquired at least for the rows in the\nvisible area of the layouting widget they can be rendered at\n[vfunc@Gtk.Widget.snapshot] time.\n\nA crude example of how to render all the rows at the root level\nruns as follows:\n\n```c\nGtkAllocation allocation;\nGdkRectangle cell_area = { 0, };\nGtkTreeIter iter;\nint minimum_width;\nint natural_width;\n\ngtk_widget_get_allocation (widget, &allocation);\ncell_area.width = allocation.width;\n\nvalid = gtk_tree_model_get_iter_first (model, &iter);\nwhile (valid)\n  {\n    cell_area.height = get_cached_height_for_row (&iter);\n\n    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);\n    gtk_cell_area_render (area, context, widget, cr,\n                          &cell_area, &cell_area, state_flags, FALSE);\n\n    cell_area.y += cell_area.height;\n\n    valid = gtk_tree_model_iter_next (model, &iter);\n  }\n```\n\nNote that the cached height in this example really depends on how\nthe layouting widget works. The layouting widget might decide to\ngive every row its minimum or natural height or, if the model content\nis expected to fit inside the layouting widget without scrolling, it\nwould make sense to calculate the allocation for each row at\nthe time the widget is allocated using [func@Gtk.distribute_natural_allocation].\n\n## Handling Events and Driving Keyboard Focus\n\nPassing events to the area is as simple as handling events on any\nnormal widget and then passing them to the [method@Gtk.CellArea.event]\nAPI as they come in. Usually `GtkCellArea` is only interested in\nbutton events, however some customized derived areas can be implemented\nwho are interested in handling other events. Handling an event can\ntrigger the [signal@Gtk.CellArea::focus-changed] signal to fire; as well\nas [signal@Gtk.CellArea::add-editable] in the case that an editable cell\nwas clicked and needs to start editing. You can call\n[method@Gtk.CellArea.stop_editing] at any time to cancel any cell editing\nthat is currently in progress.\n\nThe `GtkCellArea` drives keyboard focus from cell to cell in a way\nsimilar to `GtkWidget`. For layouting widgets that support giving\nfocus to cells it’s important to remember to pass `GTK_CELL_RENDERER_FOCUSED`\nto the area functions for the row that has focus and to tell the\narea to paint the focus at render time.\n\nLayouting widgets that accept focus on cells should implement the\n[vfunc@Gtk.Widget.focus] virtual method. The layouting widget is always\nresponsible for knowing where `GtkTreeModel` rows are rendered inside\nthe widget, so at [vfunc@Gtk.Widget.focus] time the layouting widget\nshould use the `GtkCellArea` methods to navigate focus inside the area\nand then observe the [enum@Gtk.DirectionType] to pass the focus to adjacent\nrows and areas.\n\nA basic example of how the [vfunc@Gtk.Widget.focus] virtual method\nshould be implemented:\n\n```\nstatic gboolean\nfoo_focus (GtkWidget       *widget,\n           GtkDirectionType direction)\n{\n  Foo *self = FOO (widget);\n  FooPrivate *priv = foo_get_instance_private (self);\n  int focus_row = priv->focus_row;\n  gboolean have_focus = FALSE;\n\n  if (!gtk_widget_has_focus (widget))\n    gtk_widget_grab_focus (widget);\n\n  valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, priv->focus_row);\n  while (valid)\n    {\n      gtk_cell_area_apply_attributes (priv->area, priv->model, &iter, FALSE, FALSE);\n\n      if (gtk_cell_area_focus (priv->area, direction))\n        {\n           priv->focus_row = focus_row;\n           have_focus = TRUE;\n           break;\n        }\n      else\n        {\n          if (direction == GTK_DIR_RIGHT ||\n              direction == GTK_DIR_LEFT)\n            break;\n          else if (direction == GTK_DIR_UP ||\n                   direction == GTK_DIR_TAB_BACKWARD)\n           {\n              if (focus_row == 0)\n                break;\n              else\n               {\n                  focus_row--;\n                  valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, focus_row);\n               }\n            }\n          else\n            {\n              if (focus_row == last_row)\n                break;\n              else\n                {\n                  focus_row++;\n                  valid = gtk_tree_model_iter_next (priv->model, &iter);\n                }\n            }\n        }\n    }\n    return have_focus;\n}\n```\n\nNote that the layouting widget is responsible for matching the\n`GtkDirectionType` values to the way it lays out its cells.\n\n## Cell Properties\n\nThe `GtkCellArea` introduces cell properties for `GtkCellRenderer`s.\nThis provides some general interfaces for defining the relationship\ncell areas have with their cells. For instance in a [class@Gtk.CellAreaBox]\na cell might “expand” and receive extra space when the area is allocated\nmore than its full natural request, or a cell might be configured to “align”\nwith adjacent rows which were requested and rendered with the same\n`GtkCellAreaContext`.\n\nUse [method@Gtk.CellAreaClass.install_cell_property] to install cell\nproperties for a cell area class and [method@Gtk.CellAreaClass.find_cell_property]\nor [method@Gtk.CellAreaClass.list_cell_properties] to get information about\nexisting cell properties.\n\nTo set the value of a cell property, use [method@Gtk.CellArea.cell_set_property],\n[method@Gtk.CellArea.cell_set] or [method@Gtk.CellArea.cell_set_valist]. To obtain\nthe value of a cell property, use [method@Gtk.CellArea.cell_get_property]\n[method@Gtk.CellArea.cell_get] or [method@Gtk.CellArea.cell_get_valist].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellArea.html)"
    },
    "deprecated": false,
    "insertText": "CellArea {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellAreaBox",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellAreaBox : Gtk.CellArea implements Gtk.Buildable, Gtk.CellLayout, Gtk.Orientable\n```\n\n---\n\nA cell area that renders GtkCellRenderers into a row or a column\n\nThe `GtkCellAreaBox` renders cell renderers into a row or a column\ndepending on its `GtkOrientation`.\n\nGtkCellAreaBox uses a notion of packing. Packing\nrefers to adding cell renderers with reference to a particular position\nin a `GtkCellAreaBox`. There are two reference positions: the\nstart and the end of the box.\nWhen the `GtkCellAreaBox` is oriented in the %GTK_ORIENTATION_VERTICAL\norientation, the start is defined as the top of the box and the end is\ndefined as the bottom. In the %GTK_ORIENTATION_HORIZONTAL orientation\nstart is defined as the left side and the end is defined as the right\nside.\n\nAlignments of `GtkCellRenderer`s rendered in adjacent rows can be\nconfigured by configuring the `GtkCellAreaBox` align child cell property\nwith gtk_cell_area_cell_set_property() or by specifying the \"align\"\nargument to gtk_cell_area_box_pack_start() and gtk_cell_area_box_pack_end().\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellAreaBox.html)"
    },
    "deprecated": false,
    "insertText": "CellAreaBox {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellAreaContext",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellAreaContext : GObject.Object\n```\n\n---\n\nStores geometrical information for a series of rows in a GtkCellArea\n\nThe `GtkCellAreaContext` object is created by a given `GtkCellArea`\nimplementation via its `GtkCellAreaClass.create_context()` virtual\nmethod and is used to store cell sizes and alignments for a series of\n`GtkTreeModel` rows that are requested and rendered in the same context.\n\n`GtkCellLayout` widgets can create any number of contexts in which to\nrequest and render groups of data rows. However, it’s important that the\nsame context which was used to request sizes for a given `GtkTreeModel`\nrow also be used for the same row when calling other `GtkCellArea` APIs\nsuch as gtk_cell_area_render() and gtk_cell_area_event().\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellAreaContext.html)"
    },
    "deprecated": false,
    "insertText": "CellAreaContext {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRenderer",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRenderer : GObject.InitiallyUnowned\n```\n\n---\n\nAn object for rendering a single cell\n\nThe `GtkCellRenderer` is a base class of a set of objects used for\nrendering a cell to a `cairo_t`.  These objects are used primarily by\nthe `GtkTreeView` widget, though they aren’t tied to them in any\nspecific way.  It is worth noting that `GtkCellRenderer` is not a\n`GtkWidget` and cannot be treated as such.\n\nThe primary use of a `GtkCellRenderer` is for drawing a certain graphical\nelements on a `cairo_t`. Typically, one cell renderer is used to\ndraw many cells on the screen.  To this extent, it isn’t expected that a\nCellRenderer keep any permanent state around.  Instead, any state is set\njust prior to use using `GObject`s property system.  Then, the\ncell is measured using gtk_cell_renderer_get_preferred_size(). Finally, the cell\nis rendered in the correct location using gtk_cell_renderer_snapshot().\n\nThere are a number of rules that must be followed when writing a new\n`GtkCellRenderer`.  First and foremost, it’s important that a certain set\nof properties will always yield a cell renderer of the same size,\nbarring a style change. The `GtkCellRenderer` also has a number of\ngeneric properties that are expected to be honored by all children.\n\nBeyond merely rendering a cell, cell renderers can optionally\nprovide active user interface elements. A cell renderer can be\n“activatable” like `GtkCellRenderer`Toggle,\nwhich toggles when it gets activated by a mouse click, or it can be\n“editable” like `GtkCellRenderer`Text, which\nallows the user to edit the text using a widget implementing the\n`GtkCellEditable` interface, e.g. `GtkEntry`.\nTo make a cell renderer activatable or editable, you have to\nimplement the `GtkCellRenderer`Class.activate or\n`GtkCellRenderer`Class.start_editing virtual functions, respectively.\n\nMany properties of `GtkCellRenderer` and its subclasses have a\ncorresponding “set” property, e.g. “cell-background-set” corresponds\nto “cell-background”. These “set” properties reflect whether a property\nhas been set or not. You should not set them independently.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRenderer.html)"
    },
    "deprecated": false,
    "insertText": "CellRenderer {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererAccel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererAccel : Gtk.CellRendererText\n```\n\n---\n\nRenders a keyboard accelerator in a cell\n\n`GtkCellRendererAccel` displays a keyboard accelerator (i.e. a key\ncombination like `Control + a`). If the cell renderer is editable,\nthe accelerator can be changed by simply typing the new combination.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererAccel.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererAccel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererCombo",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererCombo : Gtk.CellRendererText\n```\n\n---\n\nRenders a combobox in a cell\n\n`GtkCellRendererCombo` renders text in a cell like `GtkCellRendererText` from\nwhich it is derived. But while `GtkCellRendererText` offers a simple entry to\nedit the text, `GtkCellRendererCombo` offers a `GtkComboBox`\nwidget to edit the text. The values to display in the combo box are taken from\nthe tree model specified in the `GtkCellRendererCombo`:model property.\n\nThe combo cell renderer takes care of adding a text cell renderer to the combo\nbox and sets it to display the column specified by its\n`GtkCellRendererCombo`:text-column property. Further properties of the combo box\ncan be set in a handler for the `GtkCellRenderer::editing-started` signal.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererCombo.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererCombo {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererPixbuf",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererPixbuf : Gtk.CellRenderer\n```\n\n---\n\nRenders a pixbuf in a cell\n\nA `GtkCellRendererPixbuf` can be used to render an image in a cell. It allows\nto render either a given `GdkPixbuf` (set via the\n`GtkCellRendererPixbuf:pixbuf` property) or a named icon (set via the\n`GtkCellRendererPixbuf:icon-name` property).\n\nTo support the tree view, `GtkCellRendererPixbuf` also supports rendering two\nalternative pixbufs, when the `GtkCellRenderer:is-expander` property is %TRUE.\nIf the `GtkCellRenderer:is-expanded property` is %TRUE and the\n`GtkCellRendererPixbuf:pixbuf-expander-open` property is set to a pixbuf, it\nrenders that pixbuf, if the `GtkCellRenderer:is-expanded` property is %FALSE\nand the `GtkCellRendererPixbuf:pixbuf-expander-closed` property is set to a\npixbuf, it renders that one.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererPixbuf.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererPixbuf {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererProgress",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererProgress : Gtk.CellRenderer implements Gtk.Orientable\n```\n\n---\n\nRenders numbers as progress bars\n\n`GtkCellRendererProgress` renders a numeric value as a progress par in a cell.\nAdditionally, it can display a text on top of the progress bar.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererProgress.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererProgress {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererSpin",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererSpin : Gtk.CellRendererText\n```\n\n---\n\nRenders a spin button in a cell\n\n`GtkCellRendererSpin` renders text in a cell like `GtkCellRendererText` from\nwhich it is derived. But while `GtkCellRendererText` offers a simple entry to\nedit the text, `GtkCellRendererSpin` offers a `GtkSpinButton` widget. Of course,\nthat means that the text has to be parseable as a floating point number.\n\nThe range of the spinbutton is taken from the adjustment property of the\ncell renderer, which can be set explicitly or mapped to a column in the\ntree model, like all properties of cell renders. `GtkCellRendererSpin`\nalso has properties for the `GtkCellRendererSpin:climb-rate` and the number\nof `GtkCellRendererSpin:digits` to display. Other `GtkSpinButton` properties\ncan be set in a handler for the `GtkCellRenderer::editing-started` signal.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererSpin.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererSpin {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererSpinner",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererSpinner : Gtk.CellRenderer\n```\n\n---\n\nRenders a spinning animation in a cell\n\n`GtkCellRendererSpinner` renders a spinning animation in a cell, very\nsimilar to `GtkSpinner`. It can often be used as an alternative\nto a `GtkCellRendererProgress` for displaying indefinite activity,\ninstead of actual progress.\n\nTo start the animation in a cell, set the `GtkCellRendererSpinner:active`\nproperty to %TRUE and increment the `GtkCellRendererSpinner:pulse` property\nat regular intervals. The usual way to set the cell renderer properties\nfor each cell is to bind them to columns in your tree model using e.g.\ngtk_tree_view_column_add_attribute().\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererSpinner.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererSpinner {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererText",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererText : Gtk.CellRenderer\n```\n\n---\n\nRenders text in a cell\n\nA `GtkCellRendererText` renders a given text in its cell, using the font, color and\nstyle information provided by its properties. The text will be ellipsized if it is\ntoo long and the `GtkCellRendererText:ellipsize` property allows it.\n\nIf the `GtkCellRenderer:mode` is %GTK_CELL_RENDERER_MODE_EDITABLE,\nthe `GtkCellRendererText` allows to edit its text using an entry.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererText.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererText {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellRendererToggle",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellRendererToggle : Gtk.CellRenderer\n```\n\n---\n\nRenders a toggle button in a cell\n\n`GtkCellRendererToggle` renders a toggle button in a cell. The\nbutton is drawn as a radio or a checkbutton, depending on the\n`GtkCellRendererToggle:radio` property.\nWhen activated, it emits the `GtkCellRendererToggle::toggled` signal.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellRendererToggle.html)"
    },
    "deprecated": false,
    "insertText": "CellRendererToggle {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CellView",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CellView : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.CellLayout, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nA widget displaying a single row of a GtkTreeModel\n\nA `GtkCellView` displays a single row of a `GtkTreeModel` using a `GtkCellArea`\nand `GtkCellAreaContext`. A `GtkCellAreaContext` can be provided to the\n`GtkCellView` at construction time in order to keep the cellview in context\nof a group of cell views, this ensures that the renderers displayed will\nbe properly aligned with each other (like the aligned cells in the menus\nof `GtkComboBox`).\n\n`GtkCellView` is `GtkOrientable` in order to decide in which orientation\nthe underlying `GtkCellAreaContext` should be allocated. Taking the `GtkComboBox`\nmenu as an example, cellviews should be oriented horizontally if the menus are\nlisted top-to-bottom and thus all share the same width but may have separate\nindividual heights (left-to-right menus should be allocated vertically since\nthey all share the same height but may have variable widths).\n\n## CSS nodes\n\nGtkCellView has a single CSS node with name cellview.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CellView.html)"
    },
    "deprecated": false,
    "insertText": "CellView {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CenterBox",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CenterBox : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkCenterBox` arranges three children in a row, keeping the middle child\ncentered as well as possible.\n\n![An example GtkCenterBox](centerbox.png)\n\nTo add children to `GtkCenterBox`, use [method@Gtk.CenterBox.set_start_widget],\n[method@Gtk.CenterBox.set_center_widget] and\n[method@Gtk.CenterBox.set_end_widget].\n\nThe sizing and positioning of children can be influenced with the\nalign and expand properties of the children.\n\n# GtkCenterBox as GtkBuildable\n\nThe `GtkCenterBox` implementation of the `GtkBuildable` interface\nsupports placing children in the 3 positions by specifying “start”, “center”\nor “end” as the “type” attribute of a `<child>` element.\n\n# CSS nodes\n\n`GtkCenterBox` uses a single CSS node with the name “box”,\n\nThe first child of the `GtkCenterBox` will be allocated depending on the\ntext direction, i.e. in left-to-right layouts it will be allocated on the\nleft and in right-to-left layouts on the right.\n\nIn vertical orientation, the nodes of the children are arranged from top to\nbottom.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkCenterBox` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nStarting from GTK 4.12, `GtkCenterBox` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CenterBox.html)"
    },
    "deprecated": false,
    "insertText": "CenterBox {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CenterLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CenterLayout : Gtk.LayoutManager\n```\n\n---\n\n`GtkCenterLayout` is a layout manager that manages up to three children.\n\nThe start widget is allocated at the start of the layout (left in\nleft-to-right locales and right in right-to-left ones), and the end\nwidget at the end.\n\nThe center widget is centered regarding the full width of the layout's.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CenterLayout.html)"
    },
    "deprecated": false,
    "insertText": "CenterLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CheckButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CheckButton : Gtk.Widget implements Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkCheckButton` places a label next to an indicator.\n\n![Example GtkCheckButtons](check-button.png)\n\nA `GtkCheckButton` is created by calling either [ctor@Gtk.CheckButton.new]\nor [ctor@Gtk.CheckButton.new_with_label].\n\nThe state of a `GtkCheckButton` can be set specifically using\n[method@Gtk.CheckButton.set_active], and retrieved using\n[method@Gtk.CheckButton.get_active].\n\n# Inconsistent state\n\nIn addition to \"on\" and \"off\", check buttons can be an\n\"in between\" state that is neither on nor off. This can be used\ne.g. when the user has selected a range of elements (such as some\ntext or spreadsheet cells) that are affected by a check button,\nand the current values in that range are inconsistent.\n\nTo set a `GtkCheckButton` to inconsistent state, use\n[method@Gtk.CheckButton.set_inconsistent].\n\n# Grouping\n\nCheck buttons can be grouped together, to form mutually exclusive\ngroups - only one of the buttons can be toggled at a time, and toggling\nanother one will switch the currently toggled one off.\n\nGrouped check buttons use a different indicator, and are commonly referred\nto as *radio buttons*.\n\n![Example GtkCheckButtons](radio-button.png)\n\nTo add a `GtkCheckButton` to a group, use [method@Gtk.CheckButton.set_group].\n\nWhen the code must keep track of the state of a group of radio buttons, it\nis recommended to keep track of such state through a stateful\n`GAction` with a target for each button. Using the `toggled` signals to keep\ntrack of the group changes and state is discouraged.\n\n# CSS nodes\n\n```\ncheckbutton[.text-button]\n├── check\n╰── [label]\n```\n\nA `GtkCheckButton` has a main node with name checkbutton. If the\n[property@Gtk.CheckButton:label] or [property@Gtk.CheckButton:child]\nproperties are set, it contains a child widget. The indicator node\nis named check when no group is set, and radio if the checkbutton\nis grouped together with other checkbuttons.\n\n# Accessibility\n\n`GtkCheckButton` uses the %GTK_ACCESSIBLE_ROLE_CHECKBOX role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CheckButton.html)"
    },
    "deprecated": false,
    "insertText": "CheckButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ClosureExpression",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ClosureExpression : Gtk.Expression\n```\n\n---\n\nAn expression using a custom `GClosure` to compute the value from\nits parameters.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ClosureExpression.html)"
    },
    "deprecated": false,
    "insertText": "ClosureExpression {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColorButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColorButton : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ColorChooser, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkColorButton` allows to open a color chooser dialog to change\nthe color.\n\n![An example GtkColorButton](color-button.png)\n\nIt is suitable widget for selecting a color in a preference dialog.\n\n# CSS nodes\n\n```\ncolorbutton\n╰── button.color\n    ╰── [content]\n```\n\n`GtkColorButton` has a single CSS node with name colorbutton which\ncontains a button node. To differentiate it from a plain `GtkButton`,\nit gets the .color style class.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColorButton.html)"
    },
    "deprecated": false,
    "insertText": "ColorButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColorChooserDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColorChooserDialog : Gtk.Dialog implements Gtk.Accessible, Gtk.Buildable, Gtk.ColorChooser, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\nA dialog for choosing a color.\n\n![An example GtkColorChooserDialog](colorchooser.png)\n\n`GtkColorChooserDialog` implements the [iface@Gtk.ColorChooser] interface\nand does not provide much API of its own.\n\nTo create a `GtkColorChooserDialog`, use [ctor@Gtk.ColorChooserDialog.new].\n\nTo change the initially selected color, use\n[method@Gtk.ColorChooser.set_rgba]. To get the selected color use\n[method@Gtk.ColorChooser.get_rgba].\n\n`GtkColorChooserDialog` has been deprecated in favor of [class@Gtk.ColorDialog].\n\n## CSS nodes\n\n`GtkColorChooserDialog` has a single CSS node with the name `window` and style\nclass `.colorchooser`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColorChooserDialog.html)"
    },
    "deprecated": false,
    "insertText": "ColorChooserDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColorChooserWidget",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColorChooserWidget : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ColorChooser, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkColorChooserWidget` widget lets the user select a color.\n\nBy default, the chooser presents a predefined palette of colors,\nplus a small number of settable custom colors. It is also possible\nto select a different color with the single-color editor.\n\nTo enter the single-color editing mode, use the context menu of any\ncolor of the palette, or use the '+' button to add a new custom color.\n\nThe chooser automatically remembers the last selection, as well\nas custom colors.\n\nTo create a `GtkColorChooserWidget`, use [ctor@Gtk.ColorChooserWidget.new].\n\nTo change the initially selected color, use\n[method@Gtk.ColorChooser.set_rgba]. To get the selected color use\n[method@Gtk.ColorChooser.get_rgba].\n\nThe `GtkColorChooserWidget` is used in the [class@Gtk.ColorChooserDialog]\nto provide a dialog for selecting colors.\n\n# CSS names\n\n`GtkColorChooserWidget` has a single CSS node with name colorchooser.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColorChooserWidget.html)"
    },
    "deprecated": false,
    "insertText": "ColorChooserWidget {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColorDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColorDialog : GObject.Object\n```\n\n---\n\nA `GtkColorDialog` object collects the arguments that\nare needed to present a color chooser dialog to the\nuser, such as a title for the dialog and whether it\nshould be modal.\n\nThe dialog is shown with the [method@Gtk.ColorDialog.choose_rgba]\nfunction.\n\nSee [class@Gtk.ColorDialogButton] for a convenient control\nthat uses `GtkColorDialog` and presents the results.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColorDialog.html)"
    },
    "deprecated": false,
    "insertText": "ColorDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColorDialogButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColorDialogButton : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkColorDialogButton` is a wrapped around a [class@Gtk.ColorDialog]\nand allows to open a color chooser dialog to change the color.\n\n![An example GtkColorDialogButton](color-button.png)\n\nIt is suitable widget for selecting a color in a preference dialog.\n\n# CSS nodes\n\n```\ncolorbutton\n╰── button.color\n    ╰── [content]\n```\n\n`GtkColorDialogButton` has a single CSS node with name colorbutton which\ncontains a button node. To differentiate it from a plain `GtkButton`,\nit gets the .color style class.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColorDialogButton.html)"
    },
    "deprecated": false,
    "insertText": "ColorDialogButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColumnView",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColumnView : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable\n```\n\n---\n\n`GtkColumnView` presents a large dynamic list of items using multiple columns\nwith headers.\n\n`GtkColumnView` uses the factories of its columns to generate a cell widget for\neach column, for each visible item and displays them together as the row for\nthis item.\n\nThe [property@Gtk.ColumnView:show-row-separators] and\n[property@Gtk.ColumnView:show-column-separators] properties offer a simple way\nto display separators between the rows or columns.\n\n`GtkColumnView` allows the user to select items according to the selection\ncharacteristics of the model. For models that allow multiple selected items,\nit is possible to turn on *rubberband selection*, using\n[property@Gtk.ColumnView:enable-rubberband].\n\nThe column view supports sorting that can be customized by the user by\nclicking on column headers. To set this up, the `GtkSorter` returned by\n[method@Gtk.ColumnView.get_sorter] must be attached to a sort model for the\ndata that the view is showing, and the columns must have sorters attached to\nthem by calling [method@Gtk.ColumnViewColumn.set_sorter]. The initial sort\norder can be set with [method@Gtk.ColumnView.sort_by_column].\n\nThe column view also supports interactive resizing and reordering of\ncolumns, via Drag-and-Drop of the column headers. This can be enabled or\ndisabled with the [property@Gtk.ColumnView:reorderable] and\n[property@Gtk.ColumnViewColumn:resizable] properties.\n\nTo learn more about the list widget framework, see the\n[overview](section-list-widget.html).\n\n# CSS nodes\n\n```\ncolumnview[.column-separators][.rich-list][.navigation-sidebar][.data-table]\n├── header\n│   ├── <column header>\n┊   ┊\n│   ╰── <column header>\n│\n├── listview\n│\n┊\n╰── [rubberband]\n```\n\n`GtkColumnView` uses a single CSS node named columnview. It may carry the\n.column-separators style class, when [property@Gtk.ColumnView:show-column-separators]\nproperty is set. Header widgets appear below a node with name header.\nThe rows are contained in a `GtkListView` widget, so there is a listview\nnode with the same structure as for a standalone `GtkListView` widget.\nIf [property@Gtk.ColumnView:show-row-separators] is set, it will be passed\non to the list view, causing its CSS node to carry the .separators style class.\nFor rubberband selection, a node with name rubberband is used.\n\nThe main columnview node may also carry style classes to select\nthe style of [list presentation](section-list-widget.html#list-styles):\n.rich-list, .navigation-sidebar or .data-table.\n\n# Accessibility\n\n`GtkColumnView` uses the %GTK_ACCESSIBLE_ROLE_TREE_GRID role, header title\nwidgets are using the %GTK_ACCESSIBLE_ROLE_COLUMN_HEADER role. The row widgets\nare using the %GTK_ACCESSIBLE_ROLE_ROW role, and individual cells are using\nthe %GTK_ACCESSIBLE_ROLE_GRID_CELL role\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColumnView.html)"
    },
    "deprecated": false,
    "insertText": "ColumnView {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColumnViewCell",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColumnViewCell : Gtk.ListItem\n```\n\n---\n\n`GtkColumnViewCell` is used by [class@Gtk.ColumnViewColumn] to represent items\nin a cell in [class@Gtk.ColumnView].\n\nThe `GtkColumnViewCell`s are managed by the columnview widget (with its factory)\nand cannot be created by applications, but they need to be populated\nby application code. This is done by calling [method@Gtk.ColumnViewCell.set_child].\n\n`GtkColumnViewCell`s exist in 2 stages:\n\n1. The unbound stage where the listitem is not currently connected to\n   an item in the list. In that case, the [property@Gtk.ColumnViewCell:item]\n   property is set to %NULL.\n\n2. The bound stage where the listitem references an item from the list.\n   The [property@Gtk.ColumnViewCell:item] property is not %NULL.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColumnViewCell.html)"
    },
    "deprecated": false,
    "insertText": "ColumnViewCell {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColumnViewColumn",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColumnViewColumn : GObject.Object\n```\n\n---\n\n`GtkColumnViewColumn` represents the columns being added to a `GtkColumnView`.\n\nThe main ingredient for a `GtkColumnViewColumn` is the `GtkListItemFactory`\nthat tells the columnview how to create cells for this column from items in\nthe model.\n\nColumns have a title, and can optionally have a header menu set\nwith [method@Gtk.ColumnViewColumn.set_header_menu].\n\nA sorter can be associated with a column using\n[method@Gtk.ColumnViewColumn.set_sorter], to let users influence sorting\nby clicking on the column header.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColumnViewColumn.html)"
    },
    "deprecated": false,
    "insertText": "ColumnViewColumn {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColumnViewRow",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColumnViewRow : GObject.Object\n```\n\n---\n\n`GtkColumnViewRow` is used by [class@Gtk.ColumnView] to allow configuring\nhow rows are displayed.\n\nIt is not used to set the widgets displayed in the individual cells. For that\nsee [method@GtkColumnViewColumn.set_factory] and [class@GtkColumnViewCell].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColumnViewRow.html)"
    },
    "deprecated": false,
    "insertText": "ColumnViewRow {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ColumnViewSorter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ColumnViewSorter : Gtk.Sorter\n```\n\n---\n\n`GtkColumnViewSorter` is a sorter implementation that\nis geared towards the needs of `GtkColumnView`.\n\nThe sorter returned by [method@Gtk.ColumnView.get_sorter] is\na `GtkColumnViewSorter`.\n\nIn column views, sorting can be configured by associating\nsorters with columns, and users can invert sort order by clicking\non column headers. The API of `GtkColumnViewSorter` is designed\nto allow saving and restoring this configuration.\n\nIf you are only interested in the primary sort column (i.e. the\ncolumn where a sort indicator is shown in the header), then\nyou can just look at [property@Gtk.ColumnViewSorter:primary-sort-column]\nand [property@Gtk.ColumnViewSorter:primary-sort-order].\n\nIf you want to store the full sort configuration, including\nsecondary sort columns that are used for tie breaking, then\nyou can use [method@Gtk.ColumnViewSorter.get_nth_sort_column].\nTo get notified about changes, use [signal@Gtk.Sorter::changed].\n\nTo restore a saved sort configuration on a `GtkColumnView`,\nuse code like:\n\n```\nsorter = gtk_column_view_get_sorter (view);\nfor (i = gtk_column_view_sorter_get_n_sort_columns (sorter) - 1; i >= 0; i--)\n  {\n    column = gtk_column_view_sorter_get_nth_sort_column (sorter, i, &order);\n    gtk_column_view_sort_by_column (view, column, order);\n  }\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ColumnViewSorter.html)"
    },
    "deprecated": false,
    "insertText": "ColumnViewSorter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ComboBox",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ComboBox : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkComboBox` is a widget that allows the user to choose from a list of\nvalid choices.\n\n![An example GtkComboBox](combo-box.png)\n\nThe `GtkComboBox` displays the selected choice; when activated, the\n`GtkComboBox` displays a popup which allows the user to make a new choice.\n\nThe `GtkComboBox` uses the model-view pattern; the list of valid choices\nis specified in the form of a tree model, and the display of the choices\ncan be adapted to the data in the model by using cell renderers, as you\nwould in a tree view. This is possible since `GtkComboBox` implements the\n[iface@Gtk.CellLayout] interface. The tree model holding the valid\nchoices is not restricted to a flat list, it can be a real tree, and the\npopup will reflect the tree structure.\n\nTo allow the user to enter values not in the model, the\n[property@Gtk.ComboBox:has-entry] property allows the `GtkComboBox` to\ncontain a [class@Gtk.Entry]. This entry can be accessed by calling\n[method@Gtk.ComboBox.get_child] on the combo box.\n\nFor a simple list of textual choices, the model-view API of `GtkComboBox`\ncan be a bit overwhelming. In this case, [class@Gtk.ComboBoxText] offers\na simple alternative. Both `GtkComboBox` and `GtkComboBoxText` can contain\nan entry.\n\n## CSS nodes\n\n```\ncombobox\n├── box.linked\n│   ╰── button.combo\n│       ╰── box\n│           ├── cellview\n│           ╰── arrow\n╰── window.popup\n```\n\nA normal combobox contains a box with the .linked class, a button\nwith the .combo class and inside those buttons, there are a cellview and\nan arrow.\n\n```\ncombobox\n├── box.linked\n│   ├── entry.combo\n│   ╰── button.combo\n│       ╰── box\n│           ╰── arrow\n╰── window.popup\n```\n\nA `GtkComboBox` with an entry has a single CSS node with name combobox.\nIt contains a box with the .linked class. That box contains an entry and\na button, both with the .combo class added. The button also contains another\nnode with name arrow.\n\n## Accessibility\n\n`GtkComboBox` uses the %GTK_ACCESSIBLE_ROLE_COMBO_BOX role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ComboBox.html)"
    },
    "deprecated": false,
    "insertText": "ComboBox {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ComboBoxText",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ComboBoxText : Gtk.ComboBox implements Gtk.Accessible, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkComboBoxText` is a simple variant of `GtkComboBox` for text-only\nuse cases.\n\n![An example GtkComboBoxText](combo-box-text.png)\n\n`GtkComboBoxText` hides the model-view complexity of `GtkComboBox`.\n\nTo create a `GtkComboBoxText`, use [ctor@Gtk.ComboBoxText.new] or\n[ctor@Gtk.ComboBoxText.new_with_entry].\n\nYou can add items to a `GtkComboBoxText` with\n[method@Gtk.ComboBoxText.append_text],\n[method@Gtk.ComboBoxText.insert_text] or\n[method@Gtk.ComboBoxText.prepend_text] and remove options with\n[method@Gtk.ComboBoxText.remove].\n\nIf the `GtkComboBoxText` contains an entry (via the\n[property@Gtk.ComboBox:has-entry] property), its contents can be retrieved\nusing [method@Gtk.ComboBoxText.get_active_text].\n\nYou should not call [method@Gtk.ComboBox.set_model] or attempt to pack more\ncells into this combo box via its [iface@Gtk.CellLayout] interface.\n\n## GtkComboBoxText as GtkBuildable\n\nThe `GtkComboBoxText` implementation of the `GtkBuildable` interface supports\nadding items directly using the `<items>` element and specifying `<item>`\nelements for each item. Each `<item>` element can specify the “id”\ncorresponding to the appended text and also supports the regular\ntranslation attributes “translatable”, “context” and “comments”.\n\nHere is a UI definition fragment specifying `GtkComboBoxText` items:\n```xml\n<object class=\"GtkComboBoxText\">\n  <items>\n    <item translatable=\"yes\" id=\"factory\">Factory</item>\n    <item translatable=\"yes\" id=\"home\">Home</item>\n    <item translatable=\"yes\" id=\"subway\">Subway</item>\n  </items>\n</object>\n```\n\n## CSS nodes\n\n```\ncombobox\n╰── box.linked\n    ├── entry.combo\n    ├── button.combo\n    ╰── window.popup\n```\n\n`GtkComboBoxText` has a single CSS node with name combobox. It adds\nthe style class .combo to the main CSS nodes of its entry and button\nchildren, and the .linked class to the node of its internal box.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ComboBoxText.html)"
    },
    "deprecated": false,
    "insertText": "ComboBoxText {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ConstantExpression",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ConstantExpression : Gtk.Expression\n```\n\n---\n\nA constant value in a `GtkExpression`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ConstantExpression.html)"
    },
    "deprecated": false,
    "insertText": "ConstantExpression {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Constraint",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Constraint : GObject.Object\n```\n\n---\n\n`GtkConstraint` describes a constraint between attributes of two widgets,\n expressed as a linear equation.\n\nThe typical equation for a constraint is:\n\n```\n  target.target_attr = source.source_attr × multiplier + constant\n```\n\nEach `GtkConstraint` is part of a system that will be solved by a\n[class@Gtk.ConstraintLayout] in order to allocate and position each\nchild widget or guide.\n\nThe source and target, as well as their attributes, of a `GtkConstraint`\ninstance are immutable after creation.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Constraint.html)"
    },
    "deprecated": false,
    "insertText": "Constraint {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ConstraintGuide",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ConstraintGuide : GObject.Object implements Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkConstraintGuide` is an invisible layout element in a\n`GtkConstraintLayout`.\n\nThe `GtkConstraintLayout` treats guides like widgets. They\ncan be used as the source or target of a `GtkConstraint`.\n\nGuides have a minimum, maximum and natural size. Depending\non the constraints that are applied, they can act like a\nguideline that widgets can be aligned to, or like *flexible\nspace*.\n\nUnlike a `GtkWidget`, a `GtkConstraintGuide` will not be drawn.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ConstraintGuide.html)"
    },
    "deprecated": false,
    "insertText": "ConstraintGuide {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ConstraintLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ConstraintLayout : Gtk.LayoutManager implements Gtk.Buildable\n```\n\n---\n\nA layout manager using constraints to describe relations between widgets.\n\n`GtkConstraintLayout` is a layout manager that uses relations between\nwidget attributes, expressed via [class@Gtk.Constraint] instances, to\nmeasure and allocate widgets.\n\n### How do constraints work\n\nConstraints are objects defining the relationship between attributes\nof a widget; you can read the description of the [class@Gtk.Constraint]\nclass to have a more in depth definition.\n\nBy taking multiple constraints and applying them to the children of\na widget using `GtkConstraintLayout`, it's possible to describe\ncomplex layout policies; each constraint applied to a child or to the parent\nwidgets contributes to the full description of the layout, in terms of\nparameters for resolving the value of each attribute.\n\nIt is important to note that a layout is defined by the totality of\nconstraints; removing a child, or a constraint, from an existing layout\nwithout changing the remaining constraints may result in an unstable\nor unsolvable layout.\n\nConstraints have an implicit \"reading order\"; you should start describing\neach edge of each child, as well as their relationship with the parent\ncontainer, from the top left (or top right, in RTL languages), horizontally\nfirst, and then vertically.\n\nA constraint-based layout with too few constraints can become \"unstable\",\nthat is: have more than one solution. The behavior of an unstable layout\nis undefined.\n\nA constraint-based layout with conflicting constraints may be unsolvable,\nand lead to an unstable layout. You can use the [property@Gtk.Constraint:strength]\nproperty of [class@Gtk.Constraint] to \"nudge\" the layout towards a solution.\n\n### GtkConstraintLayout as GtkBuildable\n\n`GtkConstraintLayout` implements the [iface@Gtk.Buildable] interface and\nhas a custom \"constraints\" element which allows describing constraints in\na [class@Gtk.Builder] UI file.\n\nAn example of a UI definition fragment specifying a constraint:\n\n```xml\n  <object class=\"GtkConstraintLayout\">\n    <constraints>\n      <constraint target=\"button\" target-attribute=\"start\"\n                  relation=\"eq\"\n                  source=\"super\" source-attribute=\"start\"\n                  constant=\"12\"\n                  strength=\"required\" />\n      <constraint target=\"button\" target-attribute=\"width\"\n                  relation=\"ge\"\n                  constant=\"250\"\n                  strength=\"strong\" />\n    </constraints>\n  </object>\n```\n\nThe definition above will add two constraints to the GtkConstraintLayout:\n\n - a required constraint between the leading edge of \"button\" and\n   the leading edge of the widget using the constraint layout, plus\n   12 pixels\n - a strong, constant constraint making the width of \"button\" greater\n   than, or equal to 250 pixels\n\nThe \"target\" and \"target-attribute\" attributes are required.\n\nThe \"source\" and \"source-attribute\" attributes of the \"constraint\"\nelement are optional; if they are not specified, the constraint is\nassumed to be a constant.\n\nThe \"relation\" attribute is optional; if not specified, the constraint\nis assumed to be an equality.\n\nThe \"strength\" attribute is optional; if not specified, the constraint\nis assumed to be required.\n\nThe \"source\" and \"target\" attributes can be set to \"super\" to indicate\nthat the constraint target is the widget using the GtkConstraintLayout.\n\nThere can be \"constant\" and \"multiplier\" attributes.\n\nAdditionally, the \"constraints\" element can also contain a description\nof the `GtkConstraintGuides` used by the layout:\n\n```xml\n  <constraints>\n    <guide min-width=\"100\" max-width=\"500\" name=\"hspace\"/>\n    <guide min-height=\"64\" nat-height=\"128\" name=\"vspace\" strength=\"strong\"/>\n  </constraints>\n```\n\nThe \"guide\" element has the following optional attributes:\n\n  - \"min-width\", \"nat-width\", and \"max-width\", describe the minimum,\n    natural, and maximum width of the guide, respectively\n  - \"min-height\", \"nat-height\", and \"max-height\", describe the minimum,\n    natural, and maximum height of the guide, respectively\n  - \"strength\" describes the strength of the constraint on the natural\n    size of the guide; if not specified, the constraint is assumed to\n    have a medium strength\n  - \"name\" describes a name for the guide, useful when debugging\n\n### Using the Visual Format Language\n\nComplex constraints can be described using a compact syntax called VFL,\nor *Visual Format Language*.\n\nThe Visual Format Language describes all the constraints on a row or\ncolumn, typically starting from the leading edge towards the trailing\none. Each element of the layout is composed by \"views\", which identify\na [iface@Gtk.ConstraintTarget].\n\nFor instance:\n\n```\n  [button]-[textField]\n```\n\nDescribes a constraint that binds the trailing edge of \"button\" to the\nleading edge of \"textField\", leaving a default space between the two.\n\nUsing VFL is also possible to specify predicates that describe constraints\non attributes like width and height:\n\n```\n  // Width must be greater than, or equal to 50\n  [button(>=50)]\n\n  // Width of button1 must be equal to width of button2\n  [button1(==button2)]\n```\n\nThe default orientation for a VFL description is horizontal, unless\notherwise specified:\n\n```\n  // horizontal orientation, default attribute: width\n  H:[button(>=150)]\n\n  // vertical orientation, default attribute: height\n  V:[button1(==button2)]\n```\n\nIt's also possible to specify multiple predicates, as well as their\nstrength:\n\n```\n  // minimum width of button must be 150\n  // natural width of button can be 250\n  [button(>=150@required, ==250@medium)]\n```\n\nFinally, it's also possible to use simple arithmetic operators:\n\n```\n  // width of button1 must be equal to width of button2\n  // divided by 2 plus 12\n  [button1(button2 / 2 + 12)]\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ConstraintLayout.html)"
    },
    "deprecated": false,
    "insertText": "ConstraintLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ConstraintLayoutChild",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ConstraintLayoutChild : Gtk.LayoutChild\n```\n\n---\n\n`GtkLayoutChild` subclass for children in a `GtkConstraintLayout`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ConstraintLayoutChild.html)"
    },
    "deprecated": false,
    "insertText": "ConstraintLayoutChild {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CssProvider",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CssProvider : GObject.Object implements Gtk.StyleProvider\n```\n\n---\n\n`GtkCssProvider` is an object implementing the `GtkStyleProvider` interface\nfor CSS.\n\nIt is able to parse CSS-like input in order to style widgets.\n\nAn application can make GTK parse a specific CSS style sheet by calling\n[method@Gtk.CssProvider.load_from_file] or\n[method@Gtk.CssProvider.load_from_resource]\nand adding the provider with [method@Gtk.StyleContext.add_provider] or\n[func@Gtk.StyleContext.add_provider_for_display].\n\nIn addition, certain files will be read when GTK is initialized.\nFirst, the file `$XDG_CONFIG_HOME/gtk-4.0/gtk.css` is loaded if it\nexists. Then, GTK loads the first existing file among\n`XDG_DATA_HOME/themes/THEME/gtk-VERSION/gtk-VARIANT.css`,\n`$HOME/.themes/THEME/gtk-VERSION/gtk-VARIANT.css`,\n`$XDG_DATA_DIRS/themes/THEME/gtk-VERSION/gtk-VARIANT.css` and\n`DATADIR/share/themes/THEME/gtk-VERSION/gtk-VARIANT.css`,\nwhere `THEME` is the name of the current theme (see the\n[property@Gtk.Settings:gtk-theme-name] setting), `VARIANT` is the\nvariant to load (see the\n[property@Gtk.Settings:gtk-application-prefer-dark-theme] setting),\n`DATADIR` is the prefix configured when GTK was compiled (unless\noverridden by the `GTK_DATA_PREFIX` environment variable), and\n`VERSION` is the GTK version number. If no file is found for the\ncurrent version, GTK tries older versions all the way back to 4.0.\n\nTo track errors while loading CSS, connect to the\n[signal@Gtk.CssProvider::parsing-error] signal.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CssProvider.html)"
    },
    "deprecated": false,
    "insertText": "CssProvider {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CustomFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CustomFilter : Gtk.Filter\n```\n\n---\n\n`GtkCustomFilter` determines whether to include items with a callback.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CustomFilter.html)"
    },
    "deprecated": false,
    "insertText": "CustomFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CustomLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CustomLayout : Gtk.LayoutManager\n```\n\n---\n\n`GtkCustomLayout` uses closures for size negotiation.\n\nA `GtkCustomLayout `uses closures matching to the old `GtkWidget`\nvirtual functions for size negotiation, as a convenience API to\nease the porting towards the corresponding `GtkLayoutManager\nvirtual functions.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CustomLayout.html)"
    },
    "deprecated": false,
    "insertText": "CustomLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "CustomSorter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.CustomSorter : Gtk.Sorter\n```\n\n---\n\n`GtkCustomSorter` is a `GtkSorter` implementation that sorts via a callback\nfunction.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.CustomSorter.html)"
    },
    "deprecated": false,
    "insertText": "CustomSorter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Dialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Dialog : Gtk.Window implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\nDialogs are a convenient way to prompt the user for a small amount\nof input.\n\n![An example GtkDialog](dialog.png)\n\nTypical uses are to display a message, ask a question, or anything else\nthat does not require extensive effort on the user’s part.\n\nThe main area of a `GtkDialog` is called the \"content area\", and is yours\nto populate with widgets such a `GtkLabel` or `GtkEntry`, to present\nyour information, questions, or tasks to the user.\n\nIn addition, dialogs allow you to add \"action widgets\". Most commonly,\naction widgets are buttons. Depending on the platform, action widgets may\nbe presented in the header bar at the top of the window, or at the bottom\nof the window. To add action widgets, create your `GtkDialog` using\n[ctor@Gtk.Dialog.new_with_buttons], or use\n[method@Gtk.Dialog.add_button], [method@Gtk.Dialog.add_buttons],\nor [method@Gtk.Dialog.add_action_widget].\n\n`GtkDialogs` uses some heuristics to decide whether to add a close\nbutton to the window decorations. If any of the action buttons use\nthe response ID %GTK_RESPONSE_CLOSE or %GTK_RESPONSE_CANCEL, the\nclose button is omitted.\n\nClicking a button that was added as an action widget will emit the\n[signal@Gtk.Dialog::response] signal with a response ID that you specified.\nGTK will never assign a meaning to positive response IDs; these are\nentirely user-defined. But for convenience, you can use the response\nIDs in the [enum@Gtk.ResponseType] enumeration (these all have values\nless than zero). If a dialog receives a delete event, the\n[signal@Gtk.Dialog::response] signal will be emitted with the\n%GTK_RESPONSE_DELETE_EVENT response ID.\n\nDialogs are created with a call to [ctor@Gtk.Dialog.new] or\n[ctor@Gtk.Dialog.new_with_buttons]. The latter is recommended; it allows\nyou to set the dialog title, some convenient flags, and add buttons.\n\nA “modal” dialog (that is, one which freezes the rest of the application\nfrom user input), can be created by calling [method@Gtk.Window.set_modal]\non the dialog. When using [ctor@Gtk.Dialog.new_with_buttons], you can also\npass the %GTK_DIALOG_MODAL flag to make a dialog modal.\n\nFor the simple dialog in the following example, a [class@Gtk.MessageDialog]\nwould save some effort. But you’d need to create the dialog contents manually\nif you had more than a simple message in the dialog.\n\nAn example for simple `GtkDialog` usage:\n\n```c\n// Function to open a dialog box with a message\nvoid\nquick_message (GtkWindow *parent, char *message)\n{\n GtkWidget *dialog, *label, *content_area;\n GtkDialogFlags flags;\n\n // Create the widgets\n flags = GTK_DIALOG_DESTROY_WITH_PARENT;\n dialog = gtk_dialog_new_with_buttons (\"Message\",\n                                       parent,\n                                       flags,\n                                       _(\"_OK\"),\n                                       GTK_RESPONSE_NONE,\n                                       NULL);\n content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));\n label = gtk_label_new (message);\n\n // Ensure that the dialog box is destroyed when the user responds\n\n g_signal_connect_swapped (dialog,\n                           \"response\",\n                           G_CALLBACK (gtk_window_destroy),\n                           dialog);\n\n // Add the label, and show everything we’ve added\n\n gtk_box_append (GTK_BOX (content_area), label);\n gtk_widget_show (dialog);\n}\n```\n\n# GtkDialog as GtkBuildable\n\nThe `GtkDialog` implementation of the `GtkBuildable` interface exposes the\n@content_area as an internal child with the name “content_area”.\n\n`GtkDialog` supports a custom `<action-widgets>` element, which can contain\nmultiple `<action-widget>` elements. The “response” attribute specifies a\nnumeric response, and the content of the element is the id of widget\n(which should be a child of the dialogs @action_area). To mark a response\nas default, set the “default” attribute of the `<action-widget>` element\nto true.\n\n`GtkDialog` supports adding action widgets by specifying “action” as\nthe “type” attribute of a `<child>` element. The widget will be added\neither to the action area or the headerbar of the dialog, depending\non the “use-header-bar” property. The response id has to be associated\nwith the action widget using the `<action-widgets>` element.\n\nAn example of a `GtkDialog` UI definition fragment:\n\n```xml\n<object class=\"GtkDialog\" id=\"dialog1\">\n  <child type=\"action\">\n    <object class=\"GtkButton\" id=\"button_cancel\"/>\n  </child>\n  <child type=\"action\">\n    <object class=\"GtkButton\" id=\"button_ok\">\n    </object>\n  </child>\n  <action-widgets>\n    <action-widget response=\"cancel\">button_cancel</action-widget>\n    <action-widget response=\"ok\" default=\"true\">button_ok</action-widget>\n  </action-widgets>\n</object>\n```\n\n# Accessibility\n\n`GtkDialog` uses the %GTK_ACCESSIBLE_ROLE_DIALOG role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Dialog.html)"
    },
    "deprecated": false,
    "insertText": "Dialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DirectoryList",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DirectoryList : GObject.Object implements Gio.ListModel\n```\n\n---\n\n`GtkDirectoryList` is a list model that wraps g_file_enumerate_children_async().\n\nIt presents a `GListModel` and fills it asynchronously with the `GFileInfo`s\nreturned from that function.\n\nEnumeration will start automatically when the\n[property@Gtk.DirectoryList:file] property is set.\n\nWhile the `GtkDirectoryList` is being filled, the\n[property@Gtk.DirectoryList:loading] property will be set to %TRUE. You can\nlisten to that property if you want to show information like a `GtkSpinner`\nor a \"Loading...\" text.\n\nIf loading fails at any point, the [property@Gtk.DirectoryList:error]\nproperty will be set to give more indication about the failure.\n\nThe `GFileInfo`s returned from a `GtkDirectoryList` have the \"standard::file\"\nattribute set to the `GFile` they refer to. This way you can get at the file\nthat is referred to in the same way you would via g_file_enumerator_get_child().\nThis means you do not need access to the `GtkDirectoryList`, but can access\nthe `GFile` directly from the `GFileInfo` when operating with a `GtkListView`\nor similar.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DirectoryList.html)"
    },
    "deprecated": false,
    "insertText": "DirectoryList {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DragIcon",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DragIcon : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root\n```\n\n---\n\n`GtkDragIcon` is a `GtkRoot` implementation for drag icons.\n\nA drag icon moves with the pointer during a Drag-and-Drop operation\nand is destroyed when the drag ends.\n\nTo set up a drag icon and associate it with an ongoing drag operation,\nuse [func@Gtk.DragIcon.get_for_drag] to get the icon for a drag. You can\nthen use it like any other widget and use [method@Gtk.DragIcon.set_child]\nto set whatever widget should be used for the drag icon.\n\nKeep in mind that drag icons do not allow user input.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DragIcon.html)"
    },
    "deprecated": false,
    "insertText": "DragIcon {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DragSource",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DragSource : Gtk.GestureSingle\n```\n\n---\n\n`GtkDragSource` is an event controller to initiate Drag-And-Drop operations.\n\n`GtkDragSource` can be set up with the necessary\ningredients for a DND operation ahead of time. This includes\nthe source for the data that is being transferred, in the form\nof a [class@Gdk.ContentProvider], the desired action, and the icon to\nuse during the drag operation. After setting it up, the drag\nsource must be added to a widget as an event controller, using\n[method@Gtk.Widget.add_controller].\n\n```c\nstatic void\nmy_widget_init (MyWidget *self)\n{\n  GtkDragSource *drag_source = gtk_drag_source_new ();\n\n  g_signal_connect (drag_source, \"prepare\", G_CALLBACK (on_drag_prepare), self);\n  g_signal_connect (drag_source, \"drag-begin\", G_CALLBACK (on_drag_begin), self);\n\n  gtk_widget_add_controller (GTK_WIDGET (self), GTK_EVENT_CONTROLLER (drag_source));\n}\n```\n\nSetting up the content provider and icon ahead of time only makes\nsense when the data does not change. More commonly, you will want\nto set them up just in time. To do so, `GtkDragSource` has\n[signal@Gtk.DragSource::prepare] and [signal@Gtk.DragSource::drag-begin]\nsignals.\n\nThe ::prepare signal is emitted before a drag is started, and\ncan be used to set the content provider and actions that the\ndrag should be started with.\n\n```c\nstatic GdkContentProvider *\non_drag_prepare (GtkDragSource *source,\n                 double         x,\n                 double         y,\n                 MyWidget      *self)\n{\n  // This widget supports two types of content: GFile objects\n  // and GdkPixbuf objects; GTK will handle the serialization\n  // of these types automatically\n  GFile *file = my_widget_get_file (self);\n  GdkPixbuf *pixbuf = my_widget_get_pixbuf (self);\n\n  return gdk_content_provider_new_union ((GdkContentProvider *[2]) {\n      gdk_content_provider_new_typed (G_TYPE_FILE, file),\n      gdk_content_provider_new_typed (GDK_TYPE_PIXBUF, pixbuf),\n    }, 2);\n}\n```\n\nThe ::drag-begin signal is emitted after the `GdkDrag` object has\nbeen created, and can be used to set up the drag icon.\n\n```c\nstatic void\non_drag_begin (GtkDragSource *source,\n               GdkDrag       *drag,\n               MyWidget      *self)\n{\n  // Set the widget as the drag icon\n  GdkPaintable *paintable = gtk_widget_paintable_new (GTK_WIDGET (self));\n  gtk_drag_source_set_icon (source, paintable, 0, 0);\n  g_object_unref (paintable);\n}\n```\n\nDuring the DND operation, `GtkDragSource` emits signals that\ncan be used to obtain updates about the status of the operation,\nbut it is not normally necessary to connect to any signals,\nexcept for one case: when the supported actions include\n%GDK_ACTION_MOVE, you need to listen for the\n[signal@Gtk.DragSource::drag-end] signal and delete the\ndata after it has been transferred.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DragSource.html)"
    },
    "deprecated": false,
    "insertText": "DragSource {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DrawingArea",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DrawingArea : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkDrawingArea` is a widget that allows drawing with cairo.\n\n![An example GtkDrawingArea](drawingarea.png)\n\nIt’s essentially a blank widget; you can draw on it. After\ncreating a drawing area, the application may want to connect to:\n\n- The [signal@Gtk.Widget::realize] signal to take any necessary actions\n  when the widget is instantiated on a particular display.\n  (Create GDK resources in response to this signal.)\n\n- The [signal@Gtk.DrawingArea::resize] signal to take any necessary\n  actions when the widget changes size.\n\n- Call [method@Gtk.DrawingArea.set_draw_func] to handle redrawing the\n  contents of the widget.\n\nThe following code portion demonstrates using a drawing\narea to display a circle in the normal widget foreground\ncolor.\n\n## Simple GtkDrawingArea usage\n\n```c\nstatic void\ndraw_function (GtkDrawingArea *area,\n               cairo_t        *cr,\n               int             width,\n               int             height,\n               gpointer        data)\n{\n  GdkRGBA color;\n\n  cairo_arc (cr,\n             width / 2.0, height / 2.0,\n             MIN (width, height) / 2.0,\n             0, 2 * G_PI);\n\n  gtk_widget_get_color (GTK_WIDGET (area),\n                        &color);\n  gdk_cairo_set_source_rgba (cr, &color);\n\n  cairo_fill (cr);\n}\n\nint\nmain (int argc, char **argv)\n{\n  gtk_init ();\n\n  GtkWidget *area = gtk_drawing_area_new ();\n  gtk_drawing_area_set_content_width (GTK_DRAWING_AREA (area), 100);\n  gtk_drawing_area_set_content_height (GTK_DRAWING_AREA (area), 100);\n  gtk_drawing_area_set_draw_func (GTK_DRAWING_AREA (area),\n                                  draw_function,\n                                  NULL, NULL);\n  return 0;\n}\n```\n\nThe draw function is normally called when a drawing area first comes\nonscreen, or when it’s covered by another window and then uncovered.\nYou can also force a redraw by adding to the “damage region” of the\ndrawing area’s window using [method@Gtk.Widget.queue_draw].\nThis will cause the drawing area to call the draw function again.\n\nThe available routines for drawing are documented in the\n[Cairo documentation](https://www.cairographics.org/manual/); GDK\noffers additional API to integrate with Cairo, like [func@Gdk.cairo_set_source_rgba]\nor [func@Gdk.cairo_set_source_pixbuf].\n\nTo receive mouse events on a drawing area, you will need to use\nevent controllers. To receive keyboard events, you will need to set\nthe “can-focus” property on the drawing area, and you should probably\ndraw some user-visible indication that the drawing area is focused.\n\nIf you need more complex control over your widget, you should consider\ncreating your own `GtkWidget` subclass.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DrawingArea.html)"
    },
    "deprecated": false,
    "insertText": "DrawingArea {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DropControllerMotion",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DropControllerMotion : Gtk.EventController\n```\n\n---\n\n`GtkDropControllerMotion` is an event controller tracking\nthe pointer during Drag-and-Drop operations.\n\nIt is modeled after [class@Gtk.EventControllerMotion] so if you\nhave used that, this should feel really familiar.\n\nThis controller is not able to accept drops, use [class@Gtk.DropTarget]\nfor that purpose.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DropControllerMotion.html)"
    },
    "deprecated": false,
    "insertText": "DropControllerMotion {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DropDown",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DropDown : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkDropDown` is a widget that allows the user to choose an item\nfrom a list of options.\n\n![An example GtkDropDown](drop-down.png)\n\nThe `GtkDropDown` displays the [selected][property@Gtk.DropDown:selected]\nchoice.\n\nThe options are given to `GtkDropDown` in the form of `GListModel`\nand how the individual options are represented is determined by\na [class@Gtk.ListItemFactory]. The default factory displays simple strings,\nand adds a checkmark to the selected item in the popup.\n\nTo set your own factory, use [method@Gtk.DropDown.set_factory]. It is\npossible to use a separate factory for the items in the popup, with\n[method@Gtk.DropDown.set_list_factory].\n\n`GtkDropDown` knows how to obtain strings from the items in a\n[class@Gtk.StringList]; for other models, you have to provide an expression\nto find the strings via [method@Gtk.DropDown.set_expression].\n\n`GtkDropDown` can optionally allow search in the popup, which is\nuseful if the list of options is long. To enable the search entry,\nuse [method@Gtk.DropDown.set_enable_search].\n\nHere is a UI definition example for `GtkDropDown` with a simple model:\n\n```xml\n<object class=\"GtkDropDown\">\n  <property name=\"model\">\n    <object class=\"GtkStringList\">\n      <items>\n        <item translatable=\"yes\">Factory</item>\n        <item translatable=\"yes\">Home</item>\n        <item translatable=\"yes\">Subway</item>\n      </items>\n    </object>\n  </property>\n</object>\n```\n\nIf a `GtkDropDown` is created in this manner, or with\n[ctor@Gtk.DropDown.new_from_strings], for instance, the object returned from\n[method@Gtk.DropDown.get_selected_item] will be a [class@Gtk.StringObject].\n\nTo learn more about the list widget framework, see the\n[overview](section-list-widget.html).\n\n## CSS nodes\n\n`GtkDropDown` has a single CSS node with name dropdown,\nwith the button and popover nodes as children.\n\n## Accessibility\n\n`GtkDropDown` uses the %GTK_ACCESSIBLE_ROLE_COMBO_BOX role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DropDown.html)"
    },
    "deprecated": false,
    "insertText": "DropDown {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DropTarget",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DropTarget : Gtk.EventController\n```\n\n---\n\n`GtkDropTarget` is an event controller to receive Drag-and-Drop operations.\n\nThe most basic way to use a `GtkDropTarget` to receive drops on a\nwidget is to create it via [ctor@Gtk.DropTarget.new], passing in the\n`GType` of the data you want to receive and connect to the\n[signal@Gtk.DropTarget::drop] signal to receive the data:\n\n```c\nstatic gboolean\non_drop (GtkDropTarget *target,\n         const GValue  *value,\n         double         x,\n         double         y,\n         gpointer       data)\n{\n  MyWidget *self = data;\n\n  // Call the appropriate setter depending on the type of data\n  // that we received\n  if (G_VALUE_HOLDS (value, G_TYPE_FILE))\n    my_widget_set_file (self, g_value_get_object (value));\n  else if (G_VALUE_HOLDS (value, GDK_TYPE_PIXBUF))\n    my_widget_set_pixbuf (self, g_value_get_object (value));\n  else\n    return FALSE;\n\n  return TRUE;\n}\n\nstatic void\nmy_widget_init (MyWidget *self)\n{\n  GtkDropTarget *target =\n    gtk_drop_target_new (G_TYPE_INVALID, GDK_ACTION_COPY);\n\n  // This widget accepts two types of drop types: GFile objects\n  // and GdkPixbuf objects\n  gtk_drop_target_set_gtypes (target, (GType [2]) {\n    G_TYPE_FILE,\n    GDK_TYPE_PIXBUF,\n  }, 2);\n\n  g_signal_connect (target, \"drop\", G_CALLBACK (on_drop), self);\n  gtk_widget_add_controller (GTK_WIDGET (self), GTK_EVENT_CONTROLLER (target));\n}\n```\n\n`GtkDropTarget` supports more options, such as:\n\n * rejecting potential drops via the [signal@Gtk.DropTarget::accept] signal\n   and the [method@Gtk.DropTarget.reject] function to let other drop\n   targets handle the drop\n * tracking an ongoing drag operation before the drop via the\n   [signal@Gtk.DropTarget::enter], [signal@Gtk.DropTarget::motion] and\n   [signal@Gtk.DropTarget::leave] signals\n * configuring how to receive data by setting the\n   [property@Gtk.DropTarget:preload] property and listening for its\n   availability via the [property@Gtk.DropTarget:value] property\n\nHowever, `GtkDropTarget` is ultimately modeled in a synchronous way\nand only supports data transferred via `GType`. If you want full control\nover an ongoing drop, the [class@Gtk.DropTargetAsync] object gives you\nthis ability.\n\nWhile a pointer is dragged over the drop target's widget and the drop\nhas not been rejected, that widget will receive the\n%GTK_STATE_FLAG_DROP_ACTIVE state, which can be used to style the widget.\n\nIf you are not interested in receiving the drop, but just want to update\nUI state during a Drag-and-Drop operation (e.g. switching tabs), you can\nuse [class@Gtk.DropControllerMotion].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DropTarget.html)"
    },
    "deprecated": false,
    "insertText": "DropTarget {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "DropTargetAsync",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.DropTargetAsync : Gtk.EventController\n```\n\n---\n\n`GtkDropTargetAsync` is an event controller to receive Drag-and-Drop\noperations, asynchronously.\n\nIt is the more complete but also more complex method of handling drop\noperations compared to [class@Gtk.DropTarget], and you should only use\nit if `GtkDropTarget` doesn't provide all the features you need.\n\nTo use a `GtkDropTargetAsync` to receive drops on a widget, you create\na `GtkDropTargetAsync` object, configure which data formats and actions\nyou support, connect to its signals, and then attach it to the widget\nwith [method@Gtk.Widget.add_controller].\n\nDuring a drag operation, the first signal that a `GtkDropTargetAsync`\nemits is [signal@Gtk.DropTargetAsync::accept], which is meant to determine\nwhether the target is a possible drop site for the ongoing drop. The\ndefault handler for the ::accept signal accepts the drop if it finds\na compatible data format and an action that is supported on both sides.\n\nIf it is, and the widget becomes a target, you will receive a\n[signal@Gtk.DropTargetAsync::drag-enter] signal, followed by\n[signal@Gtk.DropTargetAsync::drag-motion] signals as the pointer moves,\noptionally a [signal@Gtk.DropTargetAsync::drop] signal when a drop happens,\nand finally a [signal@Gtk.DropTargetAsync::drag-leave] signal when the\npointer moves off the widget.\n\nThe ::drag-enter and ::drag-motion handler return a `GdkDragAction`\nto update the status of the ongoing operation. The ::drop handler\nshould decide if it ultimately accepts the drop and if it does, it\nshould initiate the data transfer and finish the operation by calling\n[method@Gdk.Drop.finish].\n\nBetween the ::drag-enter and ::drag-leave signals the widget is a\ncurrent drop target, and will receive the %GTK_STATE_FLAG_DROP_ACTIVE\nstate, which can be used by themes to style the widget as a drop target.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.DropTargetAsync.html)"
    },
    "deprecated": false,
    "insertText": "DropTargetAsync {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EditableLabel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EditableLabel : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable\n```\n\n---\n\nA `GtkEditableLabel` is a label that allows users to\nedit the text by switching to an “edit mode”.\n\n![An example GtkEditableLabel](editable-label.png)\n\n`GtkEditableLabel` does not have API of its own, but it\nimplements the [iface@Gtk.Editable] interface.\n\nThe default bindings for activating the edit mode is\nto click or press the Enter key. The default bindings\nfor leaving the edit mode are the Enter key (to save\nthe results) or the Escape key (to cancel the editing).\n\n# CSS nodes\n\n```\neditablelabel[.editing]\n╰── stack\n    ├── label\n    ╰── text\n```\n\n`GtkEditableLabel` has a main node with the name editablelabel.\nWhen the entry is in editing mode, it gets the .editing style\nclass.\n\nFor all the subnodes added to the text node in various situations,\nsee [class@Gtk.Text].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EditableLabel.html)"
    },
    "deprecated": false,
    "insertText": "EditableLabel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EmojiChooser",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EmojiChooser : Gtk.Popover implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.ShortcutManager\n```\n\n---\n\nThe `GtkEmojiChooser` is used by text widgets such as `GtkEntry` or\n`GtkTextView` to let users insert Emoji characters.\n\n![An example GtkEmojiChooser](emojichooser.png)\n\n`GtkEmojiChooser` emits the [signal@Gtk.EmojiChooser::emoji-picked]\nsignal when an Emoji is selected.\n\n# CSS nodes\n\n```\npopover\n├── box.emoji-searchbar\n│   ╰── entry.search\n╰── box.emoji-toolbar\n    ├── button.image-button.emoji-section\n    ├── ...\n    ╰── button.image-button.emoji-section\n```\n\nEvery `GtkEmojiChooser` consists of a main node called popover.\nThe contents of the popover are largely implementation defined\nand supposed to inherit general styles.\nThe top searchbar used to search emoji and gets the .emoji-searchbar\nstyle class itself.\nThe bottom toolbar used to switch between different emoji categories\nconsists of buttons with the .emoji-section style class and gets the\n.emoji-toolbar style class itself.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EmojiChooser.html)"
    },
    "deprecated": false,
    "insertText": "EmojiChooser {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Entry",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Entry : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.CellEditable, Gtk.ConstraintTarget, Gtk.Editable\n```\n\n---\n\n`GtkEntry` is a single line text entry widget.\n\n![An example GtkEntry](entry.png)\n\nA fairly large set of key bindings are supported by default. If the\nentered text is longer than the allocation of the widget, the widget\nwill scroll so that the cursor position is visible.\n\nWhen using an entry for passwords and other sensitive information, it\ncan be put into “password mode” using [method@Gtk.Entry.set_visibility].\nIn this mode, entered text is displayed using a “invisible” character.\nBy default, GTK picks the best invisible character that is available\nin the current font, but it can be changed with\n[method@Gtk.Entry.set_invisible_char].\n\n`GtkEntry` has the ability to display progress or activity\ninformation behind the text. To make an entry display such information,\nuse [method@Gtk.Entry.set_progress_fraction] or\n[method@Gtk.Entry.set_progress_pulse_step].\n\nAdditionally, `GtkEntry` can show icons at either side of the entry.\nThese icons can be activatable by clicking, can be set up as drag source\nand can have tooltips. To add an icon, use\n[method@Gtk.Entry.set_icon_from_gicon] or one of the various other functions\nthat set an icon from an icon name or a paintable. To trigger an action when\nthe user clicks an icon, connect to the [signal@Gtk.Entry::icon-press] signal.\nTo allow DND operations from an icon, use\n[method@Gtk.Entry.set_icon_drag_source]. To set a tooltip on an icon, use\n[method@Gtk.Entry.set_icon_tooltip_text] or the corresponding function\nfor markup.\n\nNote that functionality or information that is only available by clicking\non an icon in an entry may not be accessible at all to users which are not\nable to use a mouse or other pointing device. It is therefore recommended\nthat any such functionality should also be available by other means, e.g.\nvia the context menu of the entry.\n\n# CSS nodes\n\n```\nentry[.flat][.warning][.error]\n├── text[.readonly]\n├── image.left\n├── image.right\n╰── [progress[.pulse]]\n```\n\n`GtkEntry` has a main node with the name entry. Depending on the properties\nof the entry, the style classes .read-only and .flat may appear. The style\nclasses .warning and .error may also be used with entries.\n\nWhen the entry shows icons, it adds subnodes with the name image and the\nstyle class .left or .right, depending on where the icon appears.\n\nWhen the entry shows progress, it adds a subnode with the name progress.\nThe node has the style class .pulse when the shown progress is pulsing.\n\nFor all the subnodes added to the text node in various situations,\nsee [class@Gtk.Text].\n\n# GtkEntry as GtkBuildable\n\nThe `GtkEntry` implementation of the `GtkBuildable` interface supports a\ncustom `<attributes>` element, which supports any number of `<attribute>`\nelements. The `<attribute>` element has attributes named “name“, “value“,\n“start“ and “end“ and allows you to specify `PangoAttribute` values for\nthis label.\n\nAn example of a UI definition fragment specifying Pango attributes:\n```xml\n<object class=\"GtkEntry\">\n  <attributes>\n    <attribute name=\"weight\" value=\"PANGO_WEIGHT_BOLD\"/>\n    <attribute name=\"background\" value=\"red\" start=\"5\" end=\"10\"/>\n  </attributes>\n</object>\n```\n\nThe start and end attributes specify the range of characters to which the\nPango attribute applies. If start and end are not specified, the attribute\nis applied to the whole text. Note that specifying ranges does not make much\nsense with translatable attributes. Use markup embedded in the translatable\ncontent instead.\n\n# Accessibility\n\n`GtkEntry` uses the %GTK_ACCESSIBLE_ROLE_TEXT_BOX role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Entry.html)"
    },
    "deprecated": false,
    "insertText": "Entry {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EntryBuffer",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EntryBuffer : GObject.Object\n```\n\n---\n\nA `GtkEntryBuffer` hold the text displayed in a `GtkText` widget.\n\nA single `GtkEntryBuffer` object can be shared by multiple widgets\nwhich will then share the same text content, but not the cursor\nposition, visibility attributes, icon etc.\n\n`GtkEntryBuffer` may be derived from. Such a derived class might allow\ntext to be stored in an alternate location, such as non-pageable memory,\nuseful in the case of important passwords. Or a derived class could\nintegrate with an application’s concept of undo/redo.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EntryBuffer.html)"
    },
    "deprecated": false,
    "insertText": "EntryBuffer {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EntryCompletion",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EntryCompletion : GObject.Object implements Gtk.Buildable, Gtk.CellLayout\n```\n\n---\n\n`GtkEntryCompletion` is an auxiliary object to provide completion functionality\nfor `GtkEntry`.\n\nIt implements the [iface@Gtk.CellLayout] interface, to allow the user\nto add extra cells to the `GtkTreeView` with completion matches.\n\n“Completion functionality” means that when the user modifies the text\nin the entry, `GtkEntryCompletion` checks which rows in the model match\nthe current content of the entry, and displays a list of matches.\nBy default, the matching is done by comparing the entry text\ncase-insensitively against the text column of the model (see\n[method@Gtk.EntryCompletion.set_text_column]), but this can be overridden\nwith a custom match function (see [method@Gtk.EntryCompletion.set_match_func]).\n\nWhen the user selects a completion, the content of the entry is\nupdated. By default, the content of the entry is replaced by the\ntext column of the model, but this can be overridden by connecting\nto the [signal@Gtk.EntryCompletion::match-selected] signal and updating the\nentry in the signal handler. Note that you should return %TRUE from\nthe signal handler to suppress the default behaviour.\n\nTo add completion functionality to an entry, use\n[method@Gtk.Entry.set_completion].\n\n`GtkEntryCompletion` uses a [class@Gtk.TreeModelFilter] model to\nrepresent the subset of the entire model that is currently matching.\nWhile the `GtkEntryCompletion` signals\n[signal@Gtk.EntryCompletion::match-selected] and\n[signal@Gtk.EntryCompletion::cursor-on-match] take the original model\nand an iter pointing to that model as arguments, other callbacks and\nsignals (such as `GtkCellLayoutDataFunc` or\n[signal@Gtk.CellArea::apply-attributes)]\nwill generally take the filter model as argument. As long as you are\nonly calling [method@Gtk.TreeModel.get], this will make no difference to\nyou. If for some reason, you need the original model, use\n[method@Gtk.TreeModelFilter.get_model]. Don’t forget to use\n[method@Gtk.TreeModelFilter.convert_iter_to_child_iter] to obtain a\nmatching iter.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EntryCompletion.html)"
    },
    "deprecated": false,
    "insertText": "EntryCompletion {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EventController",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EventController : GObject.Object\n```\n\n---\n\n`GtkEventController` is the base class for event controllers.\n\nThese are ancillary objects associated to widgets, which react\nto `GdkEvents`, and possibly trigger actions as a consequence.\n\nEvent controllers are added to a widget with\n[method@Gtk.Widget.add_controller]. It is rarely necessary to\nexplicitly remove a controller with [method@Gtk.Widget.remove_controller].\n\nSee the chapter on [input handling](input-handling.html) for\nan overview of the basic concepts, such as the capture and bubble\nphases of event propagation.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EventController.html)"
    },
    "deprecated": false,
    "insertText": "EventController {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EventControllerFocus",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EventControllerFocus : Gtk.EventController\n```\n\n---\n\n`GtkEventControllerFocus` is an event controller to keep track of\nkeyboard focus.\n\nThe event controller offers [signal@Gtk.EventControllerFocus::enter]\nand [signal@Gtk.EventControllerFocus::leave] signals, as well as\n[property@Gtk.EventControllerFocus:is-focus] and\n[property@Gtk.EventControllerFocus:contains-focus] properties\nwhich are updated to reflect focus changes inside the widget hierarchy\nthat is rooted at the controllers widget.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EventControllerFocus.html)"
    },
    "deprecated": false,
    "insertText": "EventControllerFocus {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EventControllerKey",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EventControllerKey : Gtk.EventController\n```\n\n---\n\n`GtkEventControllerKey` is an event controller that provides access\nto key events.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EventControllerKey.html)"
    },
    "deprecated": false,
    "insertText": "EventControllerKey {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EventControllerLegacy",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EventControllerLegacy : Gtk.EventController\n```\n\n---\n\n`GtkEventControllerLegacy` is an event controller that provides raw\naccess to the event stream.\n\nIt should only be used as a last resort if none of the other event\ncontrollers or gestures do the job.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EventControllerLegacy.html)"
    },
    "deprecated": false,
    "insertText": "EventControllerLegacy {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EventControllerMotion",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EventControllerMotion : Gtk.EventController\n```\n\n---\n\n`GtkEventControllerMotion` is an event controller tracking the pointer\nposition.\n\nThe event controller offers [signal@Gtk.EventControllerMotion::enter]\nand [signal@Gtk.EventControllerMotion::leave] signals, as well as\n[property@Gtk.EventControllerMotion:is-pointer] and\n[property@Gtk.EventControllerMotion:contains-pointer] properties\nwhich are updated to reflect changes in the pointer position as it\nmoves over the widget.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EventControllerMotion.html)"
    },
    "deprecated": false,
    "insertText": "EventControllerMotion {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EventControllerScroll",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EventControllerScroll : Gtk.EventController\n```\n\n---\n\n`GtkEventControllerScroll` is an event controller that handles scroll\nevents.\n\nIt is capable of handling both discrete and continuous scroll\nevents from mice or touchpads, abstracting them both with the\n[signal@Gtk.EventControllerScroll::scroll] signal. Deltas in\nthe discrete case are multiples of 1.\n\nIn the case of continuous scroll events, `GtkEventControllerScroll`\nencloses all [signal@Gtk.EventControllerScroll::scroll] emissions\nbetween two [signal@Gtk.EventControllerScroll::scroll-begin] and\n[signal@Gtk.EventControllerScroll::scroll-end] signals.\n\nThe behavior of the event controller can be modified by the flags\ngiven at creation time, or modified at a later point through\n[method@Gtk.EventControllerScroll.set_flags] (e.g. because the scrolling\nconditions of the widget changed).\n\nThe controller can be set up to emit motion for either/both vertical\nand horizontal scroll events through %GTK_EVENT_CONTROLLER_SCROLL_VERTICAL,\n%GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL and %GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES.\nIf any axis is disabled, the respective [signal@Gtk.EventControllerScroll::scroll]\ndelta will be 0. Vertical scroll events will be translated to horizontal\nmotion for the devices incapable of horizontal scrolling.\n\nThe event controller can also be forced to emit discrete events on all\ndevices through %GTK_EVENT_CONTROLLER_SCROLL_DISCRETE. This can be used\nto implement discrete actions triggered through scroll events (e.g.\nswitching across combobox options).\n\nThe %GTK_EVENT_CONTROLLER_SCROLL_KINETIC flag toggles the emission of the\n[signal@Gtk.EventControllerScroll::decelerate] signal, emitted at the end\nof scrolling with two X/Y velocity arguments that are consistent with the\nmotion that was received.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EventControllerScroll.html)"
    },
    "deprecated": false,
    "insertText": "EventControllerScroll {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "EveryFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.EveryFilter : Gtk.MultiFilter implements Gio.ListModel, Gtk.Buildable\n```\n\n---\n\n`GtkEveryFilter` matches an item when each of its filters matches.\n\nTo add filters to a `GtkEveryFilter`, use [method@Gtk.MultiFilter.append].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.EveryFilter.html)"
    },
    "deprecated": false,
    "insertText": "EveryFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Expander",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Expander : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkExpander` allows the user to reveal its child by clicking\non an expander triangle.\n\n![An example GtkExpander](expander.png)\n\nThis is similar to the triangles used in a `GtkTreeView`.\n\nNormally you use an expander as you would use a frame; you create\nthe child widget and use [method@Gtk.Expander.set_child] to add it\nto the expander. When the expander is toggled, it will take care of\nshowing and hiding the child automatically.\n\n# Special Usage\n\nThere are situations in which you may prefer to show and hide the\nexpanded widget yourself, such as when you want to actually create\nthe widget at expansion time. In this case, create a `GtkExpander`\nbut do not add a child to it. The expander widget has an\n[property@Gtk.Expander:expanded] property which can be used to\nmonitor its expansion state. You should watch this property with\na signal connection as follows:\n\n```c\nstatic void\nexpander_callback (GObject    *object,\n                   GParamSpec *param_spec,\n                   gpointer    user_data)\n{\n  GtkExpander *expander;\n\n  expander = GTK_EXPANDER (object);\n\n  if (gtk_expander_get_expanded (expander))\n    {\n      // Show or create widgets\n    }\n  else\n    {\n      // Hide or destroy widgets\n    }\n}\n\nstatic void\ncreate_expander (void)\n{\n  GtkWidget *expander = gtk_expander_new_with_mnemonic (\"_More Options\");\n  g_signal_connect (expander, \"notify::expanded\",\n                    G_CALLBACK (expander_callback), NULL);\n\n  // ...\n}\n```\n\n# GtkExpander as GtkBuildable\n\nThe `GtkExpander` implementation of the `GtkBuildable` interface supports\nplacing a child in the label position by specifying “label” as the\n“type” attribute of a `<child>` element. A normal content child can be\nspecified without specifying a `<child>` type attribute.\n\nAn example of a UI definition fragment with GtkExpander:\n\n```xml\n<object class=\"GtkExpander\">\n  <child type=\"label\">\n    <object class=\"GtkLabel\" id=\"expander-label\"/>\n  </child>\n  <child>\n    <object class=\"GtkEntry\" id=\"expander-content\"/>\n  </child>\n</object>\n```\n\n# CSS nodes\n\n```\nexpander-widget\n╰── box\n    ├── title\n    │   ├── expander\n    │   ╰── <label widget>\n    ╰── <child>\n```\n\n`GtkExpander` has a main node `expander-widget`, and subnode `box` containing\nthe title and child widget. The box subnode `title` contains node `expander`,\ni.e. the expand/collapse arrow; then the label widget if any. The arrow of an\nexpander that is showing its child gets the `:checked` pseudoclass set on it.\n\n# Accessibility\n\n`GtkExpander` uses the %GTK_ACCESSIBLE_ROLE_BUTTON role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Expander.html)"
    },
    "deprecated": false,
    "insertText": "Expander {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Expression",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Expression\n```\n\n---\n\n`GtkExpression` provides a way to describe references to values.\n\nAn important aspect of expressions is that the value can be obtained\nfrom a source that is several steps away. For example, an expression\nmay describe ‘the value of property A of `object1`, which is itself the\nvalue of a property of `object2`’. And `object1` may not even exist yet\nat the time that the expression is created. This is contrast to `GObject`\nproperty bindings, which can only create direct connections between\nthe properties of two objects that must both exist for the duration\nof the binding.\n\nAn expression needs to be \"evaluated\" to obtain the value that it currently\nrefers to. An evaluation always happens in the context of a current object\ncalled `this` (it mirrors the behavior of object-oriented languages),\nwhich may or may not influence the result of the evaluation. Use\n[method@Gtk.Expression.evaluate] for evaluating an expression.\n\nVarious methods for defining expressions exist, from simple constants via\n[ctor@Gtk.ConstantExpression.new] to looking up properties in a `GObject`\n(even recursively) via [ctor@Gtk.PropertyExpression.new] or providing\ncustom functions to transform and combine expressions via\n[ctor@Gtk.ClosureExpression.new].\n\nHere is an example of a complex expression:\n\n```c\n  color_expr = gtk_property_expression_new (GTK_TYPE_LIST_ITEM,\n                                            NULL, \"item\");\n  expression = gtk_property_expression_new (GTK_TYPE_COLOR,\n                                            color_expr, \"name\");\n```\n\nwhen evaluated with `this` being a `GtkListItem`, it will obtain the\n\"item\" property from the `GtkListItem`, and then obtain the \"name\" property\nfrom the resulting object (which is assumed to be of type `GTK_TYPE_COLOR`).\n\nA more concise way to describe this would be\n\n```\n  this->item->name\n```\n\nThe most likely place where you will encounter expressions is in the context\nof list models and list widgets using them. For example, `GtkDropDown` is\nevaluating a `GtkExpression` to obtain strings from the items in its model\nthat it can then use to match against the contents of its search entry.\n`GtkStringFilter` is using a `GtkExpression` for similar reasons.\n\nBy default, expressions are not paying attention to changes and evaluation is\njust a snapshot of the current state at a given time. To get informed about\nchanges, an expression needs to be \"watched\" via a [struct@Gtk.ExpressionWatch],\nwhich will cause a callback to be called whenever the value of the expression may\nhave changed; [method@Gtk.Expression.watch] starts watching an expression, and\n[method@Gtk.ExpressionWatch.unwatch] stops.\n\nWatches can be created for automatically updating the property of an object,\nsimilar to GObject's `GBinding` mechanism, by using [method@Gtk.Expression.bind].\n\n## GtkExpression in GObject properties\n\nIn order to use a `GtkExpression` as a `GObject` property, you must use the\n[func@Gtk.param_spec_expression] when creating a `GParamSpec` to install in the\n`GObject` class being defined; for instance:\n\n```c\nobj_props[PROP_EXPRESSION] =\n  gtk_param_spec_expression (\"expression\",\n                             \"Expression\",\n                             \"The expression used by the widget\",\n                             G_PARAM_READWRITE |\n                             G_PARAM_STATIC_STRINGS |\n                             G_PARAM_EXPLICIT_NOTIFY);\n```\n\nWhen implementing the `GObjectClass.set_property` and `GObjectClass.get_property`\nvirtual functions, you must use [func@Gtk.value_get_expression], to retrieve the\nstored `GtkExpression` from the `GValue` container, and [func@Gtk.value_set_expression],\nto store the `GtkExpression` into the `GValue`; for instance:\n\n```c\n  // in set_property()...\n  case PROP_EXPRESSION:\n    foo_widget_set_expression (foo, gtk_value_get_expression (value));\n    break;\n\n  // in get_property()...\n  case PROP_EXPRESSION:\n    gtk_value_set_expression (value, foo->expression);\n    break;\n```\n\n## GtkExpression in .ui files\n\n`GtkBuilder` has support for creating expressions. The syntax here can be used where\na `GtkExpression` object is needed like in a `<property>` tag for an expression\nproperty, or in a `<binding name=\"property\">` tag to bind a property to an expression.\n\nTo create a property expression, use the `<lookup>` element. It can have a `type`\nattribute to specify the object type, and a `name` attribute to specify the property\nto look up. The content of `<lookup>` can either be an element specifying the expression\nto use the object, or a string that specifies the name of the object to use.\n\nExample:\n\n```xml\n  <lookup name='search'>string_filter</lookup>\n```\n\nSince the `<lookup>` element creates an expression and its element content can\nitself be an expression, this means that `<lookup>` tags can also be nested.\nThis is a common idiom when dealing with `GtkListItem`s. See\n[class@Gtk.BuilderListItemFactory] for an example of this technique.\n\nTo create a constant expression, use the `<constant>` element. If the type attribute\nis specified, the element content is interpreted as a value of that type. Otherwise,\nit is assumed to be an object. For instance:\n\n```xml\n  <constant>string_filter</constant>\n  <constant type='gchararray'>Hello, world</constant>\n```\n\nTo create a closure expression, use the `<closure>` element. The `function`\nattribute specifies what function to use for the closure, and the `type`\nattribute specifies its return type. The content of the element contains the\nexpressions for the parameters. For instance:\n\n```xml\n  <closure type='gchararray' function='combine_args_somehow'>\n    <constant type='gchararray'>File size:</constant>\n    <lookup type='GFile' name='size'>myfile</lookup>\n  </closure>\n```\n\nTo create a property binding, use the `<binding>` element in place of where a\n`<property>` tag would ordinarily be used. The `name` and `object` attributes are\nsupported. The `name` attribute is required, and pertains to the applicable property\nname. The `object` attribute is optional. If provided, it will use the specified object\nas the `this` object when the expression is evaluated. Here is an example in which the\n`label` property of a `GtkLabel` is bound to the `string` property of another arbitrary\nobject:\n\n```xml\n  <object class='GtkLabel'>\n    <binding name='label'>\n      <lookup name='string'>some_other_object</lookup>\n    </binding>\n  </object>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Expression.html)"
    },
    "deprecated": false,
    "insertText": "Expression {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FileChooserDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FileChooserDialog : Gtk.Dialog implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.FileChooser, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\n`GtkFileChooserDialog` is a dialog suitable for use with\n“File Open” or “File Save” commands.\n\n![An example GtkFileChooserDialog](filechooser.png)\n\nThis widget works by putting a [class@Gtk.FileChooserWidget]\ninside a [class@Gtk.Dialog]. It exposes the [iface@Gtk.FileChooser]\ninterface, so you can use all of the [iface@Gtk.FileChooser] functions\non the file chooser dialog as well as those for [class@Gtk.Dialog].\n\nNote that `GtkFileChooserDialog` does not have any methods of its\nown. Instead, you should use the functions that work on a\n[iface@Gtk.FileChooser].\n\nIf you want to integrate well with the platform you should use the\n[class@Gtk.FileChooserNative] API, which will use a platform-specific\ndialog if available and fall back to `GtkFileChooserDialog`\notherwise.\n\n## Typical usage\n\nIn the simplest of cases, you can the following code to use\n`GtkFileChooserDialog` to select a file for opening:\n\n```c\nstatic void\non_open_response (GtkDialog *dialog,\n                  int        response)\n{\n  if (response == GTK_RESPONSE_ACCEPT)\n    {\n      GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);\n\n      g_autoptr(GFile) file = gtk_file_chooser_get_file (chooser);\n\n      open_file (file);\n    }\n\n  gtk_window_destroy (GTK_WINDOW (dialog));\n}\n\n  // ...\n  GtkWidget *dialog;\n  GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;\n\n  dialog = gtk_file_chooser_dialog_new (\"Open File\",\n                                        parent_window,\n                                        action,\n                                        _(\"_Cancel\"),\n                                        GTK_RESPONSE_CANCEL,\n                                        _(\"_Open\"),\n                                        GTK_RESPONSE_ACCEPT,\n                                        NULL);\n\n  gtk_window_present (GTK_WINDOW (dialog));\n\n  g_signal_connect (dialog, \"response\",\n                    G_CALLBACK (on_open_response),\n                    NULL);\n```\n\nTo use a dialog for saving, you can use this:\n\n```c\nstatic void\non_save_response (GtkDialog *dialog,\n                  int        response)\n{\n  if (response == GTK_RESPONSE_ACCEPT)\n    {\n      GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);\n\n      g_autoptr(GFile) file = gtk_file_chooser_get_file (chooser);\n\n      save_to_file (file);\n    }\n\n  gtk_window_destroy (GTK_WINDOW (dialog));\n}\n\n  // ...\n  GtkWidget *dialog;\n  GtkFileChooser *chooser;\n  GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;\n\n  dialog = gtk_file_chooser_dialog_new (\"Save File\",\n                                        parent_window,\n                                        action,\n                                        _(\"_Cancel\"),\n                                        GTK_RESPONSE_CANCEL,\n                                        _(\"_Save\"),\n                                        GTK_RESPONSE_ACCEPT,\n                                        NULL);\n  chooser = GTK_FILE_CHOOSER (dialog);\n\n  if (user_edited_a_new_document)\n    gtk_file_chooser_set_current_name (chooser, _(\"Untitled document\"));\n  else\n    gtk_file_chooser_set_file (chooser, existing_filename);\n\n  gtk_window_present (GTK_WINDOW (dialog));\n\n  g_signal_connect (dialog, \"response\",\n                    G_CALLBACK (on_save_response),\n                    NULL);\n```\n\n## Setting up a file chooser dialog\n\nThere are various cases in which you may need to use a `GtkFileChooserDialog`:\n\n- To select a file for opening, use %GTK_FILE_CHOOSER_ACTION_OPEN.\n\n- To save a file for the first time, use %GTK_FILE_CHOOSER_ACTION_SAVE,\n  and suggest a name such as “Untitled” with\n  [method@Gtk.FileChooser.set_current_name].\n\n- To save a file under a different name, use %GTK_FILE_CHOOSER_ACTION_SAVE,\n  and set the existing file with [method@Gtk.FileChooser.set_file].\n\n- To choose a folder instead of a filem use %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.\n\nIn general, you should only cause the file chooser to show a specific\nfolder when it is appropriate to use [method@Gtk.FileChooser.set_file],\ni.e. when you are doing a “Save As” command and you already have a file\nsaved somewhere.\n\n## Response Codes\n\n`GtkFileChooserDialog` inherits from [class@Gtk.Dialog], so buttons that\ngo in its action area have response codes such as %GTK_RESPONSE_ACCEPT and\n%GTK_RESPONSE_CANCEL. For example, you could call\n[ctor@Gtk.FileChooserDialog.new] as follows:\n\n```c\nGtkWidget *dialog;\nGtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;\n\ndialog = gtk_file_chooser_dialog_new (\"Open File\",\n                                      parent_window,\n                                      action,\n                                      _(\"_Cancel\"),\n                                      GTK_RESPONSE_CANCEL,\n                                      _(\"_Open\"),\n                                      GTK_RESPONSE_ACCEPT,\n                                      NULL);\n```\n\nThis will create buttons for “Cancel” and “Open” that use predefined\nresponse identifiers from [enum@Gtk.ResponseType].  For most dialog\nboxes you can use your own custom response codes rather than the\nones in [enum@Gtk.ResponseType], but `GtkFileChooserDialog` assumes that\nits “accept”-type action, e.g. an “Open” or “Save” button,\nwill have one of the following response codes:\n\n- %GTK_RESPONSE_ACCEPT\n- %GTK_RESPONSE_OK\n- %GTK_RESPONSE_YES\n- %GTK_RESPONSE_APPLY\n\nThis is because `GtkFileChooserDialog` must intercept responses and switch\nto folders if appropriate, rather than letting the dialog terminate — the\nimplementation uses these known response codes to know which responses can\nbe blocked if appropriate.\n\nTo summarize, make sure you use a predefined response code\nwhen you use `GtkFileChooserDialog` to ensure proper operation.\n\n## CSS nodes\n\n`GtkFileChooserDialog` has a single CSS node with the name `window` and style\nclass `.filechooser`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FileChooserDialog.html)"
    },
    "deprecated": false,
    "insertText": "FileChooserDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FileChooserNative",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FileChooserNative : Gtk.NativeDialog implements Gtk.FileChooser\n```\n\n---\n\n`GtkFileChooserNative` is an abstraction of a dialog suitable\nfor use with “File Open” or “File Save as” commands.\n\nBy default, this just uses a `GtkFileChooserDialog` to implement\nthe actual dialog. However, on some platforms, such as Windows and\nmacOS, the native platform file chooser is used instead. When the\napplication is running in a sandboxed environment without direct\nfilesystem access (such as Flatpak), `GtkFileChooserNative` may call\nthe proper APIs (portals) to let the user choose a file and make it\navailable to the application.\n\nWhile the API of `GtkFileChooserNative` closely mirrors `GtkFileChooserDialog`,\nthe main difference is that there is no access to any `GtkWindow` or `GtkWidget`\nfor the dialog. This is required, as there may not be one in the case of a\nplatform native dialog.\n\nShowing, hiding and running the dialog is handled by the\n[class@Gtk.NativeDialog] functions.\n\nNote that unlike `GtkFileChooserDialog`, `GtkFileChooserNative` objects\nare not toplevel widgets, and GTK does not keep them alive. It is your\nresponsibility to keep a reference until you are done with the\nobject.\n\n## Typical usage\n\nIn the simplest of cases, you can the following code to use\n`GtkFileChooserNative` to select a file for opening:\n\n```c\nstatic void\non_response (GtkNativeDialog *native,\n             int              response)\n{\n  if (response == GTK_RESPONSE_ACCEPT)\n    {\n      GtkFileChooser *chooser = GTK_FILE_CHOOSER (native);\n      GFile *file = gtk_file_chooser_get_file (chooser);\n\n      open_file (file);\n\n      g_object_unref (file);\n    }\n\n  g_object_unref (native);\n}\n\n  // ...\n  GtkFileChooserNative *native;\n  GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;\n\n  native = gtk_file_chooser_native_new (\"Open File\",\n                                        parent_window,\n                                        action,\n                                        \"_Open\",\n                                        \"_Cancel\");\n\n  g_signal_connect (native, \"response\", G_CALLBACK (on_response), NULL);\n  gtk_native_dialog_show (GTK_NATIVE_DIALOG (native));\n```\n\nTo use a `GtkFileChooserNative` for saving, you can use this:\n\n```c\nstatic void\non_response (GtkNativeDialog *native,\n             int              response)\n{\n  if (response == GTK_RESPONSE_ACCEPT)\n    {\n      GtkFileChooser *chooser = GTK_FILE_CHOOSER (native);\n      GFile *file = gtk_file_chooser_get_file (chooser);\n\n      save_to_file (file);\n\n      g_object_unref (file);\n    }\n\n  g_object_unref (native);\n}\n\n  // ...\n  GtkFileChooserNative *native;\n  GtkFileChooser *chooser;\n  GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;\n\n  native = gtk_file_chooser_native_new (\"Save File\",\n                                        parent_window,\n                                        action,\n                                        \"_Save\",\n                                        \"_Cancel\");\n  chooser = GTK_FILE_CHOOSER (native);\n\n  if (user_edited_a_new_document)\n    gtk_file_chooser_set_current_name (chooser, _(\"Untitled document\"));\n  else\n    gtk_file_chooser_set_file (chooser, existing_file, NULL);\n\n  g_signal_connect (native, \"response\", G_CALLBACK (on_response), NULL);\n  gtk_native_dialog_show (GTK_NATIVE_DIALOG (native));\n```\n\nFor more information on how to best set up a file dialog,\nsee the [class@Gtk.FileChooserDialog] documentation.\n\n## Response Codes\n\n`GtkFileChooserNative` inherits from [class@Gtk.NativeDialog],\nwhich means it will return %GTK_RESPONSE_ACCEPT if the user accepted,\nand %GTK_RESPONSE_CANCEL if he pressed cancel. It can also return\n%GTK_RESPONSE_DELETE_EVENT if the window was unexpectedly closed.\n\n## Differences from `GtkFileChooserDialog`\n\nThere are a few things in the [iface@Gtk.FileChooser] interface that\nare not possible to use with `GtkFileChooserNative`, as such use would\nprohibit the use of a native dialog.\n\nNo operations that change the dialog work while the dialog is visible.\nSet all the properties that are required before showing the dialog.\n\n## Win32 details\n\nOn windows the `IFileDialog` implementation (added in Windows Vista) is\nused. It supports many of the features that `GtkFileChooser` has, but\nthere are some things it does not handle:\n\n* Any [class@Gtk.FileFilter] added using a mimetype\n\nIf any of these features are used the regular `GtkFileChooserDialog`\nwill be used in place of the native one.\n\n## Portal details\n\nWhen the `org.freedesktop.portal.FileChooser` portal is available on\nthe session bus, it is used to bring up an out-of-process file chooser.\nDepending on the kind of session the application is running in, this may\nor may not be a GTK file chooser.\n\n## macOS details\n\nOn macOS the `NSSavePanel` and `NSOpenPanel` classes are used to provide\nnative file chooser dialogs. Some features provided by `GtkFileChooser`\nare not supported:\n\n* Shortcut folders.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FileChooserNative.html)"
    },
    "deprecated": false,
    "insertText": "FileChooserNative {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FileChooserWidget",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FileChooserWidget : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.FileChooser\n```\n\n---\n\n`GtkFileChooserWidget` is a widget for choosing files.\n\nIt exposes the [iface@Gtk.FileChooser] interface, and you should\nuse the methods of this interface to interact with the\nwidget.\n\n# CSS nodes\n\n`GtkFileChooserWidget` has a single CSS node with name filechooser.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FileChooserWidget.html)"
    },
    "deprecated": false,
    "insertText": "FileChooserWidget {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FileDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FileDialog : GObject.Object\n```\n\n---\n\nA `GtkFileDialog` object collects the arguments that\nare needed to present a file chooser dialog to the\nuser, such as a title for the dialog and whether it\nshould be modal.\n\nThe dialog is shown with [method@Gtk.FileDialog.open],\n[method@Gtk.FileDialog.save], etc.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FileDialog.html)"
    },
    "deprecated": false,
    "insertText": "FileDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FileFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FileFilter : Gtk.Filter implements Gtk.Buildable\n```\n\n---\n\n`GtkFileFilter` filters files by name or mime type.\n\n`GtkFileFilter` can be used to restrict the files being shown in a\n`GtkFileChooser`. Files can be filtered based on their name (with\n[method@Gtk.FileFilter.add_pattern] or [method@Gtk.FileFilter.add_suffix])\nor on their mime type (with [method@Gtk.FileFilter.add_mime_type]).\n\nFiltering by mime types handles aliasing and subclassing of mime\ntypes; e.g. a filter for text/plain also matches a file with mime\ntype application/rtf, since application/rtf is a subclass of\ntext/plain. Note that `GtkFileFilter` allows wildcards for the\nsubtype of a mime type, so you can e.g. filter for image/\\*.\n\nNormally, file filters are used by adding them to a `GtkFileChooser`\n(see [method@Gtk.FileChooser.add_filter]), but it is also possible to\nmanually use a file filter on any [class@Gtk.FilterListModel] containing\n`GFileInfo` objects.\n\n# GtkFileFilter as GtkBuildable\n\nThe `GtkFileFilter` implementation of the `GtkBuildable` interface\nsupports adding rules using the `<mime-types>` and `<patterns>` and\n`<suffixes>` elements and listing the rules within. Specifying a\n`<mime-type>` or `<pattern>` or `<suffix>` has the same effect as\nas calling\n[method@Gtk.FileFilter.add_mime_type] or\n[method@Gtk.FileFilter.add_pattern] or\n[method@Gtk.FileFilter.add_suffix].\n\nAn example of a UI definition fragment specifying `GtkFileFilter`\nrules:\n```xml\n<object class=\"GtkFileFilter\">\n  <property name=\"name\" translatable=\"yes\">Text and Images</property>\n  <mime-types>\n    <mime-type>text/plain</mime-type>\n    <mime-type>image/ *</mime-type>\n  </mime-types>\n  <patterns>\n    <pattern>*.txt</pattern>\n  </patterns>\n  <suffixes>\n    <suffix>png</suffix>\n  </suffixes>\n</object>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FileFilter.html)"
    },
    "deprecated": false,
    "insertText": "FileFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FileLauncher",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FileLauncher : GObject.Object\n```\n\n---\n\nA `GtkFileLauncher` object collects the arguments that are needed to open a\nfile with an application.\n\nDepending on system configuration, user preferences and available APIs, this\nmay or may not show an app chooser dialog or launch the default application\nright away.\n\nThe operation is started with the [method@Gtk.FileLauncher.launch] function.\n\nTo launch uris that don't represent files, use [class@Gtk.UriLauncher].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FileLauncher.html)"
    },
    "deprecated": false,
    "insertText": "FileLauncher {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Filter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Filter : GObject.Object\n```\n\n---\n\nA `GtkFilter` object describes the filtering to be performed by a\n[class@Gtk.FilterListModel].\n\nThe model will use the filter to determine if it should include items\nor not by calling [method@Gtk.Filter.match] for each item and only\nkeeping the ones that the function returns %TRUE for.\n\nFilters may change what items they match through their lifetime. In that\ncase, they will emit the [signal@Gtk.Filter::changed] signal to notify\nthat previous filter results are no longer valid and that items should\nbe checked again via [method@Gtk.Filter.match].\n\nGTK provides various pre-made filter implementations for common filtering\noperations. These filters often include properties that can be linked to\nvarious widgets to easily allow searches.\n\nHowever, in particular for large lists or complex search methods, it is\nalso possible to subclass `GtkFilter` and provide one's own filter.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Filter.html)"
    },
    "deprecated": false,
    "insertText": "Filter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FilterListModel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FilterListModel : GObject.Object implements Gio.ListModel, Gtk.SectionModel\n```\n\n---\n\n`GtkFilterListModel` is a list model that filters the elements of\nthe underlying model according to a `GtkFilter`.\n\nIt hides some elements from the other model according to\ncriteria given by a `GtkFilter`.\n\nThe model can be set up to do incremental filtering, so that\nfiltering long lists doesn't block the UI. See\n[method@Gtk.FilterListModel.set_incremental] for details.\n\n`GtkFilterListModel` passes through sections from the underlying model.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FilterListModel.html)"
    },
    "deprecated": false,
    "insertText": "FilterListModel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Fixed",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Fixed : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkFixed` places its child widgets at fixed positions and with fixed sizes.\n\n`GtkFixed` performs no automatic layout management.\n\nFor most applications, you should not use this container! It keeps\nyou from having to learn about the other GTK containers, but it\nresults in broken applications.  With `GtkFixed`, the following\nthings will result in truncated text, overlapping widgets, and\nother display bugs:\n\n- Themes, which may change widget sizes.\n\n- Fonts other than the one you used to write the app will of course\n  change the size of widgets containing text; keep in mind that\n  users may use a larger font because of difficulty reading the\n  default, or they may be using a different OS that provides different fonts.\n\n- Translation of text into other languages changes its size. Also,\n  display of non-English text will use a different font in many\n  cases.\n\nIn addition, `GtkFixed` does not pay attention to text direction and\nthus may produce unwanted results if your app is run under right-to-left\nlanguages such as Hebrew or Arabic. That is: normally GTK will order\ncontainers appropriately for the text direction, e.g. to put labels to\nthe right of the thing they label when using an RTL language, but it can’t\ndo that with `GtkFixed`. So if you need to reorder widgets depending on\nthe text direction, you would need to manually detect it and adjust child\npositions accordingly.\n\nFinally, fixed positioning makes it kind of annoying to add/remove\nUI elements, since you have to reposition all the other elements. This\nis a long-term maintenance problem for your application.\n\nIf you know none of these things are an issue for your application,\nand prefer the simplicity of `GtkFixed`, by all means use the\nwidget. But you should be aware of the tradeoffs.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Fixed.html)"
    },
    "deprecated": false,
    "insertText": "Fixed {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FixedLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FixedLayout : Gtk.LayoutManager\n```\n\n---\n\n`GtkFixedLayout` is a layout manager which can place child widgets\nat fixed positions.\n\nMost applications should never use this layout manager; fixed positioning\nand sizing requires constant recalculations on where children need to be\npositioned and sized. Other layout managers perform this kind of work\ninternally so that application developers don't need to do it. Specifically,\nwidgets positioned in a fixed layout manager will need to take into account:\n\n- Themes, which may change widget sizes.\n\n- Fonts other than the one you used to write the app will of course\n  change the size of widgets containing text; keep in mind that\n  users may use a larger font because of difficulty reading the\n  default, or they may be using a different OS that provides different\n  fonts.\n\n- Translation of text into other languages changes its size. Also,\n  display of non-English text will use a different font in many\n  cases.\n\nIn addition, `GtkFixedLayout` does not pay attention to text direction and\nthus may produce unwanted results if your app is run under right-to-left\nlanguages such as Hebrew or Arabic. That is: normally GTK will order\ncontainers appropriately depending on the text direction, e.g. to put labels\nto the right of the thing they label when using an RTL language;\n`GtkFixedLayout` won't be able to do that for you.\n\nFinally, fixed positioning makes it kind of annoying to add/remove UI\nelements, since you have to reposition all the other  elements. This is a\nlong-term maintenance problem for your application.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FixedLayout.html)"
    },
    "deprecated": false,
    "insertText": "FixedLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FixedLayoutChild",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FixedLayoutChild : Gtk.LayoutChild\n```\n\n---\n\n`GtkLayoutChild` subclass for children in a `GtkFixedLayout`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FixedLayoutChild.html)"
    },
    "deprecated": false,
    "insertText": "FixedLayoutChild {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FlattenListModel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FlattenListModel : GObject.Object implements Gio.ListModel, Gtk.SectionModel\n```\n\n---\n\n`GtkFlattenListModel` is a list model that concatenates other list models.\n\n`GtkFlattenListModel` takes a list model containing list models, and flattens\nit into a single model. Each list model becomes a section in the single model.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FlattenListModel.html)"
    },
    "deprecated": false,
    "insertText": "FlattenListModel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FlowBox",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FlowBox : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nA `GtkFlowBox` puts child widgets in reflowing grid.\n\nFor instance, with the horizontal orientation, the widgets will be\narranged from left to right, starting a new row under the previous\nrow when necessary. Reducing the width in this case will require more\nrows, so a larger height will be requested.\n\nLikewise, with the vertical orientation, the widgets will be arranged\nfrom top to bottom, starting a new column to the right when necessary.\nReducing the height will require more columns, so a larger width will\nbe requested.\n\nThe size request of a `GtkFlowBox` alone may not be what you expect;\nif you need to be able to shrink it along both axes and dynamically\nreflow its children, you may have to wrap it in a `GtkScrolledWindow`\nto enable that.\n\nThe children of a `GtkFlowBox` can be dynamically sorted and filtered.\n\nAlthough a `GtkFlowBox` must have only `GtkFlowBoxChild` children, you\ncan add any kind of widget to it via [method@Gtk.FlowBox.insert], and a\n`GtkFlowBoxChild` widget will automatically be inserted between the box\nand the widget.\n\nAlso see [class@Gtk.ListBox].\n\n# CSS nodes\n\n```\nflowbox\n├── flowboxchild\n│   ╰── <child>\n├── flowboxchild\n│   ╰── <child>\n┊\n╰── [rubberband]\n```\n\n`GtkFlowBox` uses a single CSS node with name flowbox. `GtkFlowBoxChild`\nuses a single CSS node with name flowboxchild. For rubberband selection,\na subnode with name rubberband is used.\n\n# Accessibility\n\n`GtkFlowBox` uses the %GTK_ACCESSIBLE_ROLE_GRID role, and `GtkFlowBoxChild`\nuses the %GTK_ACCESSIBLE_ROLE_GRID_CELL role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FlowBox.html)"
    },
    "deprecated": false,
    "insertText": "FlowBox {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FlowBoxChild",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FlowBoxChild : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkFlowBoxChild` is the kind of widget that can be added to a `GtkFlowBox`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FlowBoxChild.html)"
    },
    "deprecated": false,
    "insertText": "FlowBoxChild {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FontButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FontButton : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.FontChooser\n```\n\n---\n\nThe `GtkFontButton` allows to open a font chooser dialog to change\nthe font.\n\n![An example GtkFontButton](font-button.png)\n\nIt is suitable widget for selecting a font in a preference dialog.\n\n# CSS nodes\n\n```\nfontbutton\n╰── button.font\n    ╰── [content]\n```\n\n`GtkFontButton` has a single CSS node with name fontbutton which\ncontains a button node with the .font style class.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FontButton.html)"
    },
    "deprecated": false,
    "insertText": "FontButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FontChooserDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FontChooserDialog : Gtk.Dialog implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.FontChooser, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\nThe `GtkFontChooserDialog` widget is a dialog for selecting a font.\n\n![An example GtkFontChooserDialog](fontchooser.png)\n\n`GtkFontChooserDialog` implements the [iface@Gtk.FontChooser] interface\nand does not provide much API of its own.\n\nTo create a `GtkFontChooserDialog`, use [ctor@Gtk.FontChooserDialog.new].\n\n# GtkFontChooserDialog as GtkBuildable\n\nThe `GtkFontChooserDialog` implementation of the `GtkBuildable`\ninterface exposes the buttons with the names “select_button”\nand “cancel_button”.\n\n## CSS nodes\n\n`GtkFontChooserDialog` has a single CSS node with the name `window` and style\nclass `.fontchooser`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FontChooserDialog.html)"
    },
    "deprecated": false,
    "insertText": "FontChooserDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FontChooserWidget",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FontChooserWidget : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.FontChooser\n```\n\n---\n\nThe `GtkFontChooserWidget` widget lets the user select a font.\n\nIt is used in the `GtkFontChooserDialog` widget to provide a\ndialog for selecting fonts.\n\nTo set the font which is initially selected, use\n[method@Gtk.FontChooser.set_font] or [method@Gtk.FontChooser.set_font_desc].\n\nTo get the selected font use [method@Gtk.FontChooser.get_font] or\n[method@Gtk.FontChooser.get_font_desc].\n\nTo change the text which is shown in the preview area, use\n[method@Gtk.FontChooser.set_preview_text].\n\n# CSS nodes\n\n`GtkFontChooserWidget` has a single CSS node with name fontchooser.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FontChooserWidget.html)"
    },
    "deprecated": false,
    "insertText": "FontChooserWidget {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FontDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FontDialog : GObject.Object\n```\n\n---\n\nA `GtkFontDialog` object collects the arguments that\nare needed to present a font chooser dialog to the\nuser, such as a title for the dialog and whether it\nshould be modal.\n\nThe dialog is shown with the [method@Gtk.FontDialog.choose_font]\nfunction or its variants.\n\nSee [class@Gtk.FontDialogButton] for a convenient control\nthat uses `GtkFontDialog` and presents the results.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FontDialog.html)"
    },
    "deprecated": false,
    "insertText": "FontDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "FontDialogButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.FontDialogButton : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkFontDialogButton` is wrapped around a [class@Gtk.FontDialog]\nand allows to open a font chooser dialog to change the font.\n\n![An example GtkFontDialogButton](font-button.png)\n\nIt is suitable widget for selecting a font in a preference dialog.\n\n# CSS nodes\n\n```\nfontbutton\n╰── button.font\n    ╰── [content]\n```\n\n`GtkFontDialogButton` has a single CSS node with name fontbutton which\ncontains a button node with the .font style class.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.FontDialogButton.html)"
    },
    "deprecated": false,
    "insertText": "FontDialogButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Frame",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Frame : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkFrame` is a widget that surrounds its child with a decorative\nframe and an optional label.\n\n![An example GtkFrame](frame.png)\n\nIf present, the label is drawn inside the top edge of the frame.\nThe horizontal position of the label can be controlled with\n[method@Gtk.Frame.set_label_align].\n\n`GtkFrame` clips its child. You can use this to add rounded corners\nto widgets, but be aware that it also cuts off shadows.\n\n# GtkFrame as GtkBuildable\n\nThe `GtkFrame` implementation of the `GtkBuildable` interface supports\nplacing a child in the label position by specifying “label” as the\n“type” attribute of a `<child>` element. A normal content child can\nbe specified without specifying a `<child>` type attribute.\n\nAn example of a UI definition fragment with GtkFrame:\n```xml\n<object class=\"GtkFrame\">\n  <child type=\"label\">\n    <object class=\"GtkLabel\" id=\"frame_label\"/>\n  </child>\n  <child>\n    <object class=\"GtkEntry\" id=\"frame_content\"/>\n  </child>\n</object>\n```\n\n# CSS nodes\n\n```\nframe\n├── <label widget>\n╰── <child>\n```\n\n`GtkFrame` has a main CSS node with name “frame”, which is used to draw the\nvisible border. You can set the appearance of the border using CSS properties\nlike “border-style” on this node.\n\n# Accessibility\n\n`GtkFrame` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Frame.html)"
    },
    "deprecated": false,
    "insertText": "Frame {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GLArea",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GLArea : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkGLArea` is a widget that allows drawing with OpenGL.\n\n![An example GtkGLArea](glarea.png)\n\n`GtkGLArea` sets up its own [class@Gdk.GLContext], and creates a custom\nGL framebuffer that the widget will do GL rendering onto. It also ensures\nthat this framebuffer is the default GL rendering target when rendering.\nThe completed rendering is integrated into the larger GTK scene graph as\na texture.\n\nIn order to draw, you have to connect to the [signal@Gtk.GLArea::render]\nsignal, or subclass `GtkGLArea` and override the GtkGLAreaClass.render\nvirtual function.\n\nThe `GtkGLArea` widget ensures that the `GdkGLContext` is associated with\nthe widget's drawing area, and it is kept updated when the size and\nposition of the drawing area changes.\n\n## Drawing with GtkGLArea\n\nThe simplest way to draw using OpenGL commands in a `GtkGLArea` is to\ncreate a widget instance and connect to the [signal@Gtk.GLArea::render] signal:\n\nThe `render()` function will be called when the `GtkGLArea` is ready\nfor you to draw its content:\n\nThe initial contents of the framebuffer are transparent.\n\n```c\nstatic gboolean\nrender (GtkGLArea *area, GdkGLContext *context)\n{\n  // inside this function it's safe to use GL; the given\n  // GdkGLContext has been made current to the drawable\n  // surface used by the `GtkGLArea` and the viewport has\n  // already been set to be the size of the allocation\n\n  // we can start by clearing the buffer\n  glClearColor (0, 0, 0, 0);\n  glClear (GL_COLOR_BUFFER_BIT);\n\n  // draw your object\n  // draw_an_object ();\n\n  // we completed our drawing; the draw commands will be\n  // flushed at the end of the signal emission chain, and\n  // the buffers will be drawn on the window\n  return TRUE;\n}\n\nvoid setup_glarea (void)\n{\n  // create a GtkGLArea instance\n  GtkWidget *gl_area = gtk_gl_area_new ();\n\n  // connect to the \"render\" signal\n  g_signal_connect (gl_area, \"render\", G_CALLBACK (render), NULL);\n}\n```\n\nIf you need to initialize OpenGL state, e.g. buffer objects or\nshaders, you should use the [signal@Gtk.Widget::realize] signal;\nyou can use the [signal@Gtk.Widget::unrealize] signal to clean up.\nSince the `GdkGLContext` creation and initialization may fail, you\nwill need to check for errors, using [method@Gtk.GLArea.get_error].\n\nAn example of how to safely initialize the GL state is:\n\n```c\nstatic void\non_realize (GtkGLarea *area)\n{\n  // We need to make the context current if we want to\n  // call GL API\n  gtk_gl_area_make_current (area);\n\n  // If there were errors during the initialization or\n  // when trying to make the context current, this\n  // function will return a GError for you to catch\n  if (gtk_gl_area_get_error (area) != NULL)\n    return;\n\n  // You can also use gtk_gl_area_set_error() in order\n  // to show eventual initialization errors on the\n  // GtkGLArea widget itself\n  GError *internal_error = NULL;\n  init_buffer_objects (&error);\n  if (error != NULL)\n    {\n      gtk_gl_area_set_error (area, error);\n      g_error_free (error);\n      return;\n    }\n\n  init_shaders (&error);\n  if (error != NULL)\n    {\n      gtk_gl_area_set_error (area, error);\n      g_error_free (error);\n      return;\n    }\n}\n```\n\nIf you need to change the options for creating the `GdkGLContext`\nyou should use the [signal@Gtk.GLArea::create-context] signal.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GLArea.html)"
    },
    "deprecated": false,
    "insertText": "GLArea {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Gesture",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Gesture : Gtk.EventController\n```\n\n---\n\n`GtkGesture` is the base class for gesture recognition.\n\nAlthough `GtkGesture` is quite generalized to serve as a base for\nmulti-touch gestures, it is suitable to implement single-touch and\npointer-based gestures (using the special %NULL `GdkEventSequence`\nvalue for these).\n\nThe number of touches that a `GtkGesture` need to be recognized is\ncontrolled by the [property@Gtk.Gesture:n-points] property, if a\ngesture is keeping track of less or more than that number of sequences,\nit won't check whether the gesture is recognized.\n\nAs soon as the gesture has the expected number of touches, it will check\nregularly if it is recognized, the criteria to consider a gesture as\n\"recognized\" is left to `GtkGesture` subclasses.\n\nA recognized gesture will then emit the following signals:\n\n- [signal@Gtk.Gesture::begin] when the gesture is recognized.\n- [signal@Gtk.Gesture::update], whenever an input event is processed.\n- [signal@Gtk.Gesture::end] when the gesture is no longer recognized.\n\n## Event propagation\n\nIn order to receive events, a gesture needs to set a propagation phase\nthrough [method@Gtk.EventController.set_propagation_phase].\n\nIn the capture phase, events are propagated from the toplevel down\nto the target widget, and gestures that are attached to containers\nabove the widget get a chance to interact with the event before it\nreaches the target.\n\nIn the bubble phase, events are propagated up from the target widget\nto the toplevel, and gestures that are attached to containers above\nthe widget get a chance to interact with events that have not been\nhandled yet.\n\n## States of a sequence\n\nWhenever input interaction happens, a single event may trigger a cascade\nof `GtkGesture`s, both across the parents of the widget receiving the\nevent and in parallel within an individual widget. It is a responsibility\nof the widgets using those gestures to set the state of touch sequences\naccordingly in order to enable cooperation of gestures around the\n`GdkEventSequence`s triggering those.\n\nWithin a widget, gestures can be grouped through [method@Gtk.Gesture.group].\nGrouped gestures synchronize the state of sequences, so calling\n[method@Gtk.Gesture.set_state] on one will effectively propagate\nthe state throughout the group.\n\nBy default, all sequences start out in the %GTK_EVENT_SEQUENCE_NONE state,\nsequences in this state trigger the gesture event handler, but event\npropagation will continue unstopped by gestures.\n\nIf a sequence enters into the %GTK_EVENT_SEQUENCE_DENIED state, the gesture\ngroup will effectively ignore the sequence, letting events go unstopped\nthrough the gesture, but the \"slot\" will still remain occupied while\nthe touch is active.\n\nIf a sequence enters in the %GTK_EVENT_SEQUENCE_CLAIMED state, the gesture\ngroup will grab all interaction on the sequence, by:\n\n- Setting the same sequence to %GTK_EVENT_SEQUENCE_DENIED on every other\n  gesture group within the widget, and every gesture on parent widgets\n  in the propagation chain.\n- Emitting [signal@Gtk.Gesture::cancel] on every gesture in widgets\n  underneath in the propagation chain.\n- Stopping event propagation after the gesture group handles the event.\n\nNote: if a sequence is set early to %GTK_EVENT_SEQUENCE_CLAIMED on\n%GDK_TOUCH_BEGIN/%GDK_BUTTON_PRESS (so those events are captured before\nreaching the event widget, this implies %GTK_PHASE_CAPTURE), one similar\nevent will be emulated if the sequence changes to %GTK_EVENT_SEQUENCE_DENIED.\nThis way event coherence is preserved before event propagation is unstopped\nagain.\n\nSequence states can't be changed freely.\nSee [method@Gtk.Gesture.set_state] to know about the possible\nlifetimes of a `GdkEventSequence`.\n\n## Touchpad gestures\n\nOn the platforms that support it, `GtkGesture` will handle transparently\ntouchpad gesture events. The only precautions users of `GtkGesture` should\ndo to enable this support are:\n\n- If the gesture has %GTK_PHASE_NONE, ensuring events of type\n  %GDK_TOUCHPAD_SWIPE and %GDK_TOUCHPAD_PINCH are handled by the `GtkGesture`\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Gesture.html)"
    },
    "deprecated": false,
    "insertText": "Gesture {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureClick",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureClick : Gtk.GestureSingle\n```\n\n---\n\n`GtkGestureClick` is a `GtkGesture` implementation for clicks.\n\nIt is able to recognize multiple clicks on a nearby zone, which\ncan be listened for through the [signal@Gtk.GestureClick::pressed]\nsignal. Whenever time or distance between clicks exceed the GTK\ndefaults, [signal@Gtk.GestureClick::stopped] is emitted, and the\nclick counter is reset.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureClick.html)"
    },
    "deprecated": false,
    "insertText": "GestureClick {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureDrag",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureDrag : Gtk.GestureSingle\n```\n\n---\n\n`GtkGestureDrag` is a `GtkGesture` implementation for drags.\n\nThe drag operation itself can be tracked throughout the\n[signal@Gtk.GestureDrag::drag-begin],\n[signal@Gtk.GestureDrag::drag-update] and\n[signal@Gtk.GestureDrag::drag-end] signals, and the relevant\ncoordinates can be extracted through\n[method@Gtk.GestureDrag.get_offset] and\n[method@Gtk.GestureDrag.get_start_point].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureDrag.html)"
    },
    "deprecated": false,
    "insertText": "GestureDrag {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureLongPress",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureLongPress : Gtk.GestureSingle\n```\n\n---\n\n`GtkGestureLongPress` is a `GtkGesture` for long presses.\n\nThis gesture is also known as “Press and Hold”.\n\nWhen the timeout is exceeded, the gesture is triggering the\n[signal@Gtk.GestureLongPress::pressed] signal.\n\nIf the touchpoint is lifted before the timeout passes, or if\nit drifts too far of the initial press point, the\n[signal@Gtk.GestureLongPress::cancelled] signal will be emitted.\n\nHow long the timeout is before the ::pressed signal gets emitted is\ndetermined by the [property@Gtk.Settings:gtk-long-press-time] setting.\nIt can be modified by the [property@Gtk.GestureLongPress:delay-factor]\nproperty.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureLongPress.html)"
    },
    "deprecated": false,
    "insertText": "GestureLongPress {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GesturePan",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GesturePan : Gtk.GestureDrag\n```\n\n---\n\n`GtkGesturePan` is a `GtkGesture` for pan gestures.\n\nThese are drags that are locked to happen along one axis. The axis\nthat a `GtkGesturePan` handles is defined at construct time, and\ncan be changed through [method@Gtk.GesturePan.set_orientation].\n\nWhen the gesture starts to be recognized, `GtkGesturePan` will\nattempt to determine as early as possible whether the sequence\nis moving in the expected direction, and denying the sequence if\nthis does not happen.\n\nOnce a panning gesture along the expected axis is recognized,\nthe [signal@Gtk.GesturePan::pan] signal will be emitted as input\nevents are received, containing the offset in the given axis.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GesturePan.html)"
    },
    "deprecated": false,
    "insertText": "GesturePan {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureRotate",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureRotate : Gtk.Gesture\n```\n\n---\n\n`GtkGestureRotate` is a `GtkGesture` for 2-finger rotations.\n\nWhenever the angle between both handled sequences changes, the\n[signal@Gtk.GestureRotate::angle-changed] signal is emitted.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureRotate.html)"
    },
    "deprecated": false,
    "insertText": "GestureRotate {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureSingle",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureSingle : Gtk.Gesture\n```\n\n---\n\n`GtkGestureSingle` is a `GtkGestures` subclass optimized for singe-touch\nand mouse gestures.\n\nUnder interaction, these gestures stick to the first interacting sequence,\nwhich is accessible through [method@Gtk.GestureSingle.get_current_sequence]\nwhile the gesture is being interacted with.\n\nBy default gestures react to both %GDK_BUTTON_PRIMARY and touch events.\n[method@Gtk.GestureSingle.set_touch_only] can be used to change the\ntouch behavior. Callers may also specify a different mouse button number\nto interact with through [method@Gtk.GestureSingle.set_button], or react\nto any mouse button by setting it to 0. While the gesture is active, the\nbutton being currently pressed can be known through\n[method@Gtk.GestureSingle.get_current_button].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureSingle.html)"
    },
    "deprecated": false,
    "insertText": "GestureSingle {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureStylus",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureStylus : Gtk.GestureSingle\n```\n\n---\n\n`GtkGestureStylus` is a `GtkGesture` specific to stylus input.\n\nThe provided signals just relay the basic information of the\nstylus events.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureStylus.html)"
    },
    "deprecated": false,
    "insertText": "GestureStylus {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureSwipe",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureSwipe : Gtk.GestureSingle\n```\n\n---\n\n`GtkGestureSwipe` is a `GtkGesture` for swipe gestures.\n\nAfter a press/move/.../move/release sequence happens, the\n[signal@Gtk.GestureSwipe::swipe] signal will be emitted,\nproviding the velocity and directionality of the sequence\nat the time it was lifted.\n\nIf the velocity is desired in intermediate points,\n[method@Gtk.GestureSwipe.get_velocity] can be called in a\n[signal@Gtk.Gesture::update] handler.\n\nAll velocities are reported in pixels/sec units.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureSwipe.html)"
    },
    "deprecated": false,
    "insertText": "GestureSwipe {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GestureZoom",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GestureZoom : Gtk.Gesture\n```\n\n---\n\n`GtkGestureZoom` is a `GtkGesture` for 2-finger pinch/zoom gestures.\n\nWhenever the distance between both tracked sequences changes, the\n[signal@Gtk.GestureZoom::scale-changed] signal is emitted to report\nthe scale factor.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GestureZoom.html)"
    },
    "deprecated": false,
    "insertText": "GestureZoom {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GraphicsOffload",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GraphicsOffload : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA widget that allows to bypass gsk rendering for its child by passing the content\ndirectly to the compositor.\n\nGraphics offload is an optimization to reduce overhead and battery use that is\nmost useful for video content. It only works on some platforms and in certain\nsituations. GTK will automatically fall back to normal rendering if it doesn't.\n\nGraphics offload is most efficient if there are no controls drawn on top of the\nvideo content.\n\nYou should consider using graphics offload for your main widget if it shows\nfrequently changing content (such as a video, or a VM display) and you provide\nthe content in the form of dmabuf textures (see [class@Gdk.DmabufTextureBuilder]),\nin particular if it may be fullscreen.\n\nNumerous factors can prohibit graphics offload:\n\n- Unsupported platforms. Currently, graphics offload only works on Linux with Wayland.\n\n- Clipping, such as rounded corners that cause the video content to not be rectangular\n\n- Unsupported dmabuf formats (see [method@Gdk.Display.get_dmabuf_formats])\n\n- Translucent video content (content with an alpha channel, even if it isn't used)\n\n- Transforms that are more complex than translations and scales\n\n- Filters such as opacity, grayscale or similar\n\nTo investigate problems related graphics offload, GTK offers debug flags to print\nout information about graphics offload and dmabuf use:\n\n    GDK_DEBUG=offload\n    GDK_DEBUG=dmabuf\n\nThe GTK inspector provides a visual debugging tool for graphics offload.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GraphicsOffload.html)"
    },
    "deprecated": false,
    "insertText": "GraphicsOffload {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Grid",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Grid : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkGrid` is a container which arranges its child widgets in\nrows and columns.\n\n![An example GtkGrid](grid.png)\n\nIt supports arbitrary positions and horizontal/vertical spans.\n\nChildren are added using [method@Gtk.Grid.attach]. They can span multiple\nrows or columns. It is also possible to add a child next to an existing\nchild, using [method@Gtk.Grid.attach_next_to]. To remove a child from the\ngrid, use [method@Gtk.Grid.remove].\n\nThe behaviour of `GtkGrid` when several children occupy the same grid\ncell is undefined.\n\n# GtkGrid as GtkBuildable\n\nEvery child in a `GtkGrid` has access to a custom [iface@Gtk.Buildable]\nelement, called `<layout>`. It can by used to specify a position in the\ngrid and optionally spans. All properties that can be used in the `<layout>`\nelement are implemented by [class@Gtk.GridLayoutChild].\n\nIt is implemented by `GtkWidget` using [class@Gtk.LayoutManager].\n\nTo showcase it, here is a simple example:\n\n```xml\n<object class=\"GtkGrid\" id=\"my_grid\">\n  <child>\n    <object class=\"GtkButton\" id=\"button1\">\n      <property name=\"label\">Button 1</property>\n      <layout>\n        <property name=\"column\">0</property>\n        <property name=\"row\">0</property>\n      </layout>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkButton\" id=\"button2\">\n      <property name=\"label\">Button 2</property>\n      <layout>\n        <property name=\"column\">1</property>\n        <property name=\"row\">0</property>\n      </layout>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkButton\" id=\"button3\">\n      <property name=\"label\">Button 3</property>\n      <layout>\n        <property name=\"column\">2</property>\n        <property name=\"row\">0</property>\n        <property name=\"row-span\">2</property>\n      </layout>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkButton\" id=\"button4\">\n      <property name=\"label\">Button 4</property>\n      <layout>\n        <property name=\"column\">0</property>\n        <property name=\"row\">1</property>\n        <property name=\"column-span\">2</property>\n      </layout>\n    </object>\n  </child>\n</object>\n```\n\nIt organizes the first two buttons side-by-side in one cell each.\nThe third button is in the last column but spans across two rows.\nThis is defined by the `row-span` property. The last button is\nlocated in the second row and spans across two columns, which is\ndefined by the `column-span` property.\n\n# CSS nodes\n\n`GtkGrid` uses a single CSS node with name `grid`.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkGrid` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nStarting from GTK 4.12, `GtkGrid` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Grid.html)"
    },
    "deprecated": false,
    "insertText": "Grid {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GridLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GridLayout : Gtk.LayoutManager\n```\n\n---\n\n`GtkGridLayout` is a layout manager which arranges child widgets in\nrows and columns.\n\nChildren have an \"attach point\" defined by the horizontal and vertical\nindex of the cell they occupy; children can span multiple rows or columns.\nThe layout properties for setting the attach points and spans are set\nusing the [class@Gtk.GridLayoutChild] associated to each child widget.\n\nThe behaviour of `GtkGridLayout` when several children occupy the same\ngrid cell is undefined.\n\n`GtkGridLayout` can be used like a `GtkBoxLayout` if all children are\nattached to the same row or column; however, if you only ever need a\nsingle row or column, you should consider using `GtkBoxLayout`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GridLayout.html)"
    },
    "deprecated": false,
    "insertText": "GridLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GridLayoutChild",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GridLayoutChild : Gtk.LayoutChild\n```\n\n---\n\n`GtkLayoutChild` subclass for children in a `GtkGridLayout`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GridLayoutChild.html)"
    },
    "deprecated": false,
    "insertText": "GridLayoutChild {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "GridView",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.GridView : Gtk.ListBase implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable, Gtk.Scrollable\n```\n\n---\n\n`GtkGridView` presents a large dynamic grid of items.\n\n`GtkGridView` uses its factory to generate one child widget for each\nvisible item and shows them in a grid. The orientation of the grid view\ndetermines if the grid reflows vertically or horizontally.\n\n`GtkGridView` allows the user to select items according to the selection\ncharacteristics of the model. For models that allow multiple selected items,\nit is possible to turn on _rubberband selection_, using\n[property@Gtk.GridView:enable-rubberband].\n\nTo learn more about the list widget framework, see the\n[overview](section-list-widget.html).\n\n# CSS nodes\n\n```\ngridview\n├── child[.activatable]\n│\n├── child[.activatable]\n│\n┊\n╰── [rubberband]\n```\n\n`GtkGridView` uses a single CSS node with name `gridview`. Each child uses\na single CSS node with name `child`. If the [property@Gtk.ListItem:activatable]\nproperty is set, the corresponding row will have the `.activatable` style\nclass. For rubberband selection, a subnode with name `rubberband` is used.\n\n# Accessibility\n\n`GtkGridView` uses the %GTK_ACCESSIBLE_ROLE_GRID role, and the items\nuse the %GTK_ACCESSIBLE_ROLE_GRID_CELL role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.GridView.html)"
    },
    "deprecated": false,
    "insertText": "GridView {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "HeaderBar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.HeaderBar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkHeaderBar` is a widget for creating custom title bars for windows.\n\n![An example GtkHeaderBar](headerbar.png)\n\n`GtkHeaderBar` is similar to a horizontal `GtkCenterBox`. It allows\nchildren to be placed at the start or the end. In addition, it allows\nthe window title to be displayed. The title will be centered with respect\nto the width of the box, even if the children at either side take up\ndifferent amounts of space.\n\n`GtkHeaderBar` can add typical window frame controls, such as minimize,\nmaximize and close buttons, or the window icon.\n\nFor these reasons, `GtkHeaderBar` is the natural choice for use as the\ncustom titlebar widget of a `GtkWindow` (see [method@Gtk.Window.set_titlebar]),\nas it gives features typical of titlebars while allowing the addition of\nchild widgets.\n\n## GtkHeaderBar as GtkBuildable\n\nThe `GtkHeaderBar` implementation of the `GtkBuildable` interface supports\nadding children at the start or end sides by specifying “start” or “end” as\nthe “type” attribute of a `<child>` element, or setting the title widget by\nspecifying “title” value.\n\nBy default the `GtkHeaderBar` uses a `GtkLabel` displaying the title of the\nwindow it is contained in as the title widget, equivalent to the following\nUI definition:\n\n```xml\n<object class=\"GtkHeaderBar\">\n  <property name=\"title-widget\">\n    <object class=\"GtkLabel\">\n      <property name=\"label\" translatable=\"yes\">Label</property>\n      <property name=\"single-line-mode\">True</property>\n      <property name=\"ellipsize\">end</property>\n      <property name=\"width-chars\">5</property>\n      <style>\n        <class name=\"title\"/>\n      </style>\n    </object>\n  </property>\n</object>\n```\n\n# CSS nodes\n\n```\nheaderbar\n╰── windowhandle\n    ╰── box\n        ├── box.start\n        │   ├── windowcontrols.start\n        │   ╰── [other children]\n        ├── [Title Widget]\n        ╰── box.end\n            ├── [other children]\n            ╰── windowcontrols.end\n```\n\nA `GtkHeaderBar`'s CSS node is called `headerbar`. It contains a `windowhandle`\nsubnode, which contains a `box` subnode, which contains two `box` subnodes at\nthe start and end of the header bar, as well as a center node that represents\nthe title.\n\nEach of the boxes contains a `windowcontrols` subnode, see\n[class@Gtk.WindowControls] for details, as well as other children.\n\n# Accessibility\n\n`GtkHeaderBar` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.HeaderBar.html)"
    },
    "deprecated": false,
    "insertText": "HeaderBar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "IMContext",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.IMContext : GObject.Object\n```\n\n---\n\n`GtkIMContext` defines the interface for GTK input methods.\n\n`GtkIMContext` is used by GTK text input widgets like `GtkText`\nto map from key events to Unicode character strings.\n\nAn input method may consume multiple key events in sequence before finally\noutputting the composed result. This is called *preediting*, and an input\nmethod may provide feedback about this process by displaying the intermediate\ncomposition states as preedit text. To do so, the `GtkIMContext` will emit\n[signal@Gtk.IMContext::preedit-start], [signal@Gtk.IMContext::preedit-changed]\nand [signal@Gtk.IMContext::preedit-end] signals.\n\nFor instance, the built-in GTK input method [class@Gtk.IMContextSimple]\nimplements the input of arbitrary Unicode code points by holding down the\n<kbd>Control</kbd> and <kbd>Shift</kbd> keys and then typing <kbd>u</kbd>\nfollowed by the hexadecimal digits of the code point. When releasing the\n<kbd>Control</kbd> and <kbd>Shift</kbd> keys, preediting ends and the\ncharacter is inserted as text. For example,\n\n    Ctrl+Shift+u 2 0 A C\n\nresults in the € sign.\n\nAdditional input methods can be made available for use by GTK widgets as\nloadable modules. An input method module is a small shared library which\nprovides a `GIOExtension` for the extension point named \"gtk-im-module\".\n\nTo connect a widget to the users preferred input method, you should use\n[class@Gtk.IMMulticontext].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.IMContext.html)"
    },
    "deprecated": false,
    "insertText": "IMContext {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "IMContextSimple",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.IMContextSimple : Gtk.IMContext\n```\n\n---\n\n`GtkIMContextSimple` is an input method supporting table-based input methods.\n\n## Compose sequences\n\n`GtkIMContextSimple` reads compose sequences from the first of the\nfollowing files that is found: ~/.config/gtk-4.0/Compose, ~/.XCompose,\n/usr/share/X11/locale/$locale/Compose (for locales that have a nontrivial\nCompose file). A subset of the file syntax described in the Compose(5)\nmanual page is supported. Additionally, `include \"%L\"` loads GTK’s built-in\ntable of compose sequences rather than the locale-specific one from X11.\n\nIf none of these files is found, `GtkIMContextSimple` uses a built-in table\nof compose sequences that is derived from the X11 Compose files.\n\nNote that compose sequences typically start with the Compose_key, which is\noften not available as a dedicated key on keyboards. Keyboard layouts may\nmap this keysym to other keys, such as the right Control key.\n\n## Unicode characters\n\n`GtkIMContextSimple` also supports numeric entry of Unicode characters\nby typing <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>u</kbd>, followed by a\nhexadecimal Unicode codepoint.\n\nFor example,\n\n    Ctrl-Shift-u 1 2 3 Enter\n\nyields U+0123 LATIN SMALL LETTER G WITH CEDILLA, i.e. ģ.\n\n## Dead keys\n\n`GtkIMContextSimple` supports dead keys. For example, typing\n\n    dead_acute a\n\n yields U+00E! LATIN SMALL LETTER_A WITH ACUTE, i.e. á. Note that this\n depends on the keyboard layout including dead keys.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.IMContextSimple.html)"
    },
    "deprecated": false,
    "insertText": "IMContextSimple {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "IMMulticontext",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.IMMulticontext : Gtk.IMContext\n```\n\n---\n\n`GtkIMMulticontext` is an input method context supporting multiple,\nswitchable input methods.\n\nText widgets such as `GtkText` or `GtkTextView` use a `GtkIMMultiContext`\nto implement their `im-module` property for switching between different\ninput methods.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.IMMulticontext.html)"
    },
    "deprecated": false,
    "insertText": "IMMulticontext {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "IconPaintable",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.IconPaintable : GObject.Object implements Gdk.Paintable, Gtk.SymbolicPaintable\n```\n\n---\n\nContains information found when looking up an icon in `GtkIconTheme`.\n\n`GtkIconPaintable` implements `GdkPaintable`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.IconPaintable.html)"
    },
    "deprecated": false,
    "insertText": "IconPaintable {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "IconTheme",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.IconTheme : GObject.Object\n```\n\n---\n\n`GtkIconTheme` provides a facility for loading themed icons.\n\nThe main reason for using a name rather than simply providing a filename\nis to allow different icons to be used depending on what “icon theme” is\nselected by the user. The operation of icon themes on Linux and Unix\nfollows the [Icon Theme Specification](http://www.freedesktop.org/Standards/icon-theme-spec)\nThere is a fallback icon theme, named `hicolor`, where applications\nshould install their icons, but additional icon themes can be installed\nas operating system vendors and users choose.\n\nIn many cases, named themes are used indirectly, via [class@Gtk.Image]\nrather than directly, but looking up icons directly is also simple. The\n`GtkIconTheme` object acts as a database of all the icons in the current\ntheme. You can create new `GtkIconTheme` objects, but it’s much more\nefficient to use the standard icon theme of the `GtkWidget` so that the\nicon information is shared with other people looking up icons.\n\n```c\nGtkIconTheme *icon_theme;\nGtkIconPaintable *icon;\nGdkPaintable *paintable;\n\nicon_theme = gtk_icon_theme_get_for_display (gtk_widget_get_display (my_widget));\nicon = gtk_icon_theme_lookup_icon (icon_theme,\n                                   \"my-icon-name\", // icon name\n                                   48, // icon size\n                                   1,  // scale\n                                   0,  // flags);\npaintable = GDK_PAINTABLE (icon);\n// Use the paintable\ng_object_unref (icon);\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.IconTheme.html)"
    },
    "deprecated": false,
    "insertText": "IconTheme {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "IconView",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.IconView : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.CellLayout, Gtk.ConstraintTarget, Gtk.Scrollable\n```\n\n---\n\n`GtkIconView` is a widget which displays data in a grid of icons.\n\n`GtkIconView` provides an alternative view on a `GtkTreeModel`.\nIt displays the model as a grid of icons with labels. Like\n[class@Gtk.TreeView], it allows to select one or multiple items\n(depending on the selection mode, see [method@Gtk.IconView.set_selection_mode]).\nIn addition to selection with the arrow keys, `GtkIconView` supports\nrubberband selection, which is controlled by dragging the pointer.\n\nNote that if the tree model is backed by an actual tree store (as\nopposed to a flat list where the mapping to icons is obvious),\n`GtkIconView` will only display the first level of the tree and\nignore the tree’s branches.\n\n## CSS nodes\n\n```\niconview.view\n╰── [rubberband]\n```\n\n`GtkIconView` has a single CSS node with name iconview and style class .view.\nFor rubberband selection, a subnode with name rubberband is used.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.IconView.html)"
    },
    "deprecated": false,
    "insertText": "IconView {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Image",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Image : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkImage` widget displays an image.\n\n![An example GtkImage](image.png)\n\nVarious kinds of object can be displayed as an image; most typically,\nyou would load a `GdkTexture` from a file, using the convenience function\n[ctor@Gtk.Image.new_from_file], for instance:\n\n```c\nGtkWidget *image = gtk_image_new_from_file (\"myfile.png\");\n```\n\nIf the file isn’t loaded successfully, the image will contain a\n“broken image” icon similar to that used in many web browsers.\n\nIf you want to handle errors in loading the file yourself,\nfor example by displaying an error message, then load the image with\n[ctor@Gdk.Texture.new_from_file], then create the `GtkImage` with\n[ctor@Gtk.Image.new_from_paintable].\n\nSometimes an application will want to avoid depending on external data\nfiles, such as image files. See the documentation of `GResource` inside\nGIO, for details. In this case, [property@Gtk.Image:resource],\n[ctor@Gtk.Image.new_from_resource], and [method@Gtk.Image.set_from_resource]\nshould be used.\n\n`GtkImage` displays its image as an icon, with a size that is determined\nby the application. See [class@Gtk.Picture] if you want to show an image\nat is actual size.\n\n## CSS nodes\n\n`GtkImage` has a single CSS node with the name `image`. The style classes\n`.normal-icons` or `.large-icons` may appear, depending on the\n[property@Gtk.Image:icon-size] property.\n\n## Accessibility\n\n`GtkImage` uses the `GTK_ACCESSIBLE_ROLE_IMG` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Image.html)"
    },
    "deprecated": false,
    "insertText": "Image {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "InfoBar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.InfoBar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkInfoBar` can be used to show messages to the user without a dialog.\n\n![An example GtkInfoBar](info-bar.png)\n\nIt is often temporarily shown at the top or bottom of a document.\nIn contrast to [class@Gtk.Dialog], which has an action area at the\nbottom, `GtkInfoBar` has an action area at the side.\n\nThe API of `GtkInfoBar` is very similar to `GtkDialog`, allowing you\nto add buttons to the action area with [method@Gtk.InfoBar.add_button]\nor [ctor@Gtk.InfoBar.new_with_buttons]. The sensitivity of action widgets\ncan be controlled with [method@Gtk.InfoBar.set_response_sensitive].\n\nTo add widgets to the main content area of a `GtkInfoBar`, use\n[method@Gtk.InfoBar.add_child].\n\nSimilar to [class@Gtk.MessageDialog], the contents of a `GtkInfoBar`\ncan by classified as error message, warning, informational message, etc,\nby using [method@Gtk.InfoBar.set_message_type]. GTK may use the message\ntype to determine how the message is displayed.\n\nA simple example for using a `GtkInfoBar`:\n```c\nGtkWidget *message_label;\nGtkWidget *widget;\nGtkWidget *grid;\nGtkInfoBar *bar;\n\n// set up info bar\nwidget = gtk_info_bar_new ();\nbar = GTK_INFO_BAR (widget);\ngrid = gtk_grid_new ();\n\nmessage_label = gtk_label_new (\"\");\ngtk_info_bar_add_child (bar, message_label);\ngtk_info_bar_add_button (bar,\n                         _(\"_OK\"),\n                         GTK_RESPONSE_OK);\ng_signal_connect (bar,\n                  \"response\",\n                  G_CALLBACK (gtk_widget_hide),\n                  NULL);\ngtk_grid_attach (GTK_GRID (grid),\n                 widget,\n                 0, 2, 1, 1);\n\n// ...\n\n// show an error message\ngtk_label_set_text (GTK_LABEL (message_label), \"An error occurred!\");\ngtk_info_bar_set_message_type (bar, GTK_MESSAGE_ERROR);\ngtk_widget_show (bar);\n```\n\n# GtkInfoBar as GtkBuildable\n\n`GtkInfoBar` supports a custom `<action-widgets>` element, which can contain\nmultiple `<action-widget>` elements. The “response” attribute specifies a\nnumeric response, and the content of the element is the id of widget\n(which should be a child of the dialogs @action_area).\n\n`GtkInfoBar` supports adding action widgets by specifying “action” as\nthe “type” attribute of a `<child>` element. The widget will be added\neither to the action area. The response id has to be associated\nwith the action widget using the `<action-widgets>` element.\n\n# CSS nodes\n\n`GtkInfoBar` has a single CSS node with name infobar. The node may get\none of the style classes .info, .warning, .error or .question, depending\non the message type.\nIf the info bar shows a close button, that button will have the .close\nstyle class applied.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.InfoBar.html)"
    },
    "deprecated": false,
    "insertText": "InfoBar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Inscription",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Inscription : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleText, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkInscription` is a widget to show text in a predefined area.\n\nYou likely want to use `GtkLabel` instead as this widget is intended only\nfor a small subset of use cases. The main scenario envisaged is inside lists\nsuch as `GtkColumnView`.\n\nWhile a `GtkLabel` sizes itself depending on the text that is displayed,\n`GtkInscription` is given a size and inscribes the given text into that\nspace as well as it can.\n\nUsers of this widget should take care to plan behaviour for the common case\nwhere the text doesn't fit exactly in the allocated space.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Inscription.html)"
    },
    "deprecated": false,
    "insertText": "Inscription {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "KeyvalTrigger",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.KeyvalTrigger : Gtk.ShortcutTrigger\n```\n\n---\n\nA `GtkShortcutTrigger` that triggers when a specific keyval and modifiers are pressed.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.KeyvalTrigger.html)"
    },
    "deprecated": false,
    "insertText": "KeyvalTrigger {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Label",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Label : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleText, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkLabel` widget displays a small amount of text.\n\nAs the name implies, most labels are used to label another widget\nsuch as a [class@Button].\n\n![An example GtkLabel](label.png)\n\n## CSS nodes\n\n```\nlabel\n├── [selection]\n├── [link]\n┊\n╰── [link]\n```\n\n`GtkLabel` has a single CSS node with the name label. A wide variety\nof style classes may be applied to labels, such as .title, .subtitle,\n.dim-label, etc. In the `GtkShortcutsWindow`, labels are used with the\n.keycap style class.\n\nIf the label has a selection, it gets a subnode with name selection.\n\nIf the label has links, there is one subnode per link. These subnodes\ncarry the link or visited state depending on whether they have been\nvisited. In this case, label node also gets a .link style class.\n\n## GtkLabel as GtkBuildable\n\nThe GtkLabel implementation of the GtkBuildable interface supports a\ncustom `<attributes>` element, which supports any number of `<attribute>`\nelements. The `<attribute>` element has attributes named “name“, “value“,\n“start“ and “end“ and allows you to specify [struct@Pango.Attribute]\nvalues for this label.\n\nAn example of a UI definition fragment specifying Pango attributes:\n\n```xml\n<object class=\"GtkLabel\">\n  <attributes>\n    <attribute name=\"weight\" value=\"PANGO_WEIGHT_BOLD\"/>\n    <attribute name=\"background\" value=\"red\" start=\"5\" end=\"10\"/>\n  </attributes>\n</object>\n```\n\nThe start and end attributes specify the range of characters to which the\nPango attribute applies. If start and end are not specified, the attribute is\napplied to the whole text. Note that specifying ranges does not make much\nsense with translatable attributes. Use markup embedded in the translatable\ncontent instead.\n\n## Accessibility\n\n`GtkLabel` uses the %GTK_ACCESSIBLE_ROLE_LABEL role.\n\n## Mnemonics\n\nLabels may contain “mnemonics”. Mnemonics are underlined characters in the\nlabel, used for keyboard navigation. Mnemonics are created by providing a\nstring with an underscore before the mnemonic character, such as `\"_File\"`,\nto the functions [ctor@Gtk.Label.new_with_mnemonic] or\n[method@Gtk.Label.set_text_with_mnemonic].\n\nMnemonics automatically activate any activatable widget the label is\ninside, such as a [class@Gtk.Button]; if the label is not inside the\nmnemonic’s target widget, you have to tell the label about the target\nusing [method@Gtk.Label.set_mnemonic_widget].\n\nHere’s a simple example where the label is inside a button:\n\n```c\n// Pressing Alt+H will activate this button\nGtkWidget *button = gtk_button_new ();\nGtkWidget *label = gtk_label_new_with_mnemonic (\"_Hello\");\ngtk_button_set_child (GTK_BUTTON (button), label);\n```\n\nThere’s a convenience function to create buttons with a mnemonic label\nalready inside:\n\n```c\n// Pressing Alt+H will activate this button\nGtkWidget *button = gtk_button_new_with_mnemonic (\"_Hello\");\n```\n\nTo create a mnemonic for a widget alongside the label, such as a\n[class@Gtk.Entry], you have to point the label at the entry with\n[method@Gtk.Label.set_mnemonic_widget]:\n\n```c\n// Pressing Alt+H will focus the entry\nGtkWidget *entry = gtk_entry_new ();\nGtkWidget *label = gtk_label_new_with_mnemonic (\"_Hello\");\ngtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);\n```\n\n## Markup (styled text)\n\nTo make it easy to format text in a label (changing colors,\nfonts, etc.), label text can be provided in a simple\nmarkup format:\n\nHere’s how to create a label with a small font:\n```c\nGtkWidget *label = gtk_label_new (NULL);\ngtk_label_set_markup (GTK_LABEL (label), \"<small>Small text</small>\");\n```\n\n(See the Pango manual for complete documentation] of available\ntags, [func@Pango.parse_markup])\n\nThe markup passed to [method@Gtk.Label.set_markup] must be valid; for example,\nliteral `<`, `>` and `&` characters must be escaped as `&lt;`, `&gt;`, and `&amp;`.\nIf you pass text obtained from the user, file, or a network to\n[method@Gtk.Label.set_markup], you’ll want to escape it with\n[func@GLib.markup_escape_text] or [func@GLib.markup_printf_escaped].\n\nMarkup strings are just a convenient way to set the [struct@Pango.AttrList]\non a label; [method@Gtk.Label.set_attributes] may be a simpler way to set\nattributes in some cases. Be careful though; [struct@Pango.AttrList] tends\nto cause internationalization problems, unless you’re applying attributes\nto the entire string (i.e. unless you set the range of each attribute\nto [0, %G_MAXINT)). The reason is that specifying the start_index and\nend_index for a [struct@Pango.Attribute] requires knowledge of the exact\nstring being displayed, so translations will cause problems.\n\n## Selectable labels\n\nLabels can be made selectable with [method@Gtk.Label.set_selectable].\nSelectable labels allow the user to copy the label contents to\nthe clipboard. Only labels that contain useful-to-copy information—such\nas error messages—should be made selectable.\n\n## Text layout\n\nA label can contain any number of paragraphs, but will have\nperformance problems if it contains more than a small number.\nParagraphs are separated by newlines or other paragraph separators\nunderstood by Pango.\n\nLabels can automatically wrap text if you call [method@Gtk.Label.set_wrap].\n\n[method@Gtk.Label.set_justify] sets how the lines in a label align\nwith one another. If you want to set how the label as a whole aligns\nin its available space, see the [property@Gtk.Widget:halign] and\n[property@Gtk.Widget:valign] properties.\n\nThe [property@Gtk.Label:width-chars] and [property@Gtk.Label:max-width-chars]\nproperties can be used to control the size allocation of ellipsized or\nwrapped labels. For ellipsizing labels, if either is specified (and less\nthan the actual text size), it is used as the minimum width, and the actual\ntext size is used as the natural width of the label. For wrapping labels,\nwidth-chars is used as the minimum width, if specified, and max-width-chars\nis used as the natural width. Even if max-width-chars specified, wrapping\nlabels will be rewrapped to use all of the available width.\n\n## Links\n\nGTK supports markup for clickable hyperlinks in addition to regular Pango\nmarkup. The markup for links is borrowed from HTML, using the `<a>` with\n“href“, “title“ and “class“ attributes. GTK renders links similar to the\nway they appear in web browsers, with colored, underlined text. The “title“\nattribute is displayed as a tooltip on the link. The “class“ attribute is\nused as style class on the CSS node for the link.\n\nAn example of inline links looks like this:\n\n```c\nconst char *text =\n\"Go to the \"\n\"<a href=\\\"https://www.gtk.org\\\" title=\\\"&lt;i&gt;Our&lt;/i&gt; website\\\">\"\n\"GTK website</a> for more...\";\nGtkWidget *label = gtk_label_new (NULL);\ngtk_label_set_markup (GTK_LABEL (label), text);\n```\n\nIt is possible to implement custom handling for links and their tooltips\nwith the [signal@Gtk.Label::activate-link] signal and the\n[method@Gtk.Label.get_current_uri] function.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Label.html)"
    },
    "deprecated": false,
    "insertText": "Label {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "LayoutChild",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.LayoutChild : GObject.Object\n```\n\n---\n\n`GtkLayoutChild` is the base class for objects that are meant to hold\nlayout properties.\n\nIf a `GtkLayoutManager` has per-child properties, like their packing type,\nor the horizontal and vertical span, or the icon name, then the layout\nmanager should use a `GtkLayoutChild` implementation to store those properties.\n\nA `GtkLayoutChild` instance is only ever valid while a widget is part\nof a layout.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.LayoutChild.html)"
    },
    "deprecated": false,
    "insertText": "LayoutChild {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "LayoutManager",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.LayoutManager : GObject.Object\n```\n\n---\n\nLayout managers are delegate classes that handle the preferred size\nand the allocation of a widget.\n\nYou typically subclass `GtkLayoutManager` if you want to implement a\nlayout policy for the children of a widget, or if you want to determine\nthe size of a widget depending on its contents.\n\nEach `GtkWidget` can only have a `GtkLayoutManager` instance associated\nto it at any given time; it is possible, though, to replace the layout\nmanager instance using [method@Gtk.Widget.set_layout_manager].\n\n## Layout properties\n\nA layout manager can expose properties for controlling the layout of\neach child, by creating an object type derived from [class@Gtk.LayoutChild]\nand installing the properties on it as normal `GObject` properties.\n\nEach `GtkLayoutChild` instance storing the layout properties for a\nspecific child is created through the [method@Gtk.LayoutManager.get_layout_child]\nmethod; a `GtkLayoutManager` controls the creation of its `GtkLayoutChild`\ninstances by overriding the GtkLayoutManagerClass.create_layout_child()\nvirtual function. The typical implementation should look like:\n\n```c\nstatic GtkLayoutChild *\ncreate_layout_child (GtkLayoutManager *manager,\n                     GtkWidget        *container,\n                     GtkWidget        *child)\n{\n  return g_object_new (your_layout_child_get_type (),\n                       \"layout-manager\", manager,\n                       \"child-widget\", child,\n                       NULL);\n}\n```\n\nThe [property@Gtk.LayoutChild:layout-manager] and\n[property@Gtk.LayoutChild:child-widget] properties\non the newly created `GtkLayoutChild` instance are mandatory. The\n`GtkLayoutManager` will cache the newly created `GtkLayoutChild` instance\nuntil the widget is removed from its parent, or the parent removes the\nlayout manager.\n\nEach `GtkLayoutManager` instance creating a `GtkLayoutChild` should use\n[method@Gtk.LayoutManager.get_layout_child] every time it needs to query\nthe layout properties; each `GtkLayoutChild` instance should call\n[method@Gtk.LayoutManager.layout_changed] every time a property is\nupdated, in order to queue a new size measuring and allocation.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.LayoutManager.html)"
    },
    "deprecated": false,
    "insertText": "LayoutManager {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "LevelBar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.LevelBar : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkLevelBar` is a widget that can be used as a level indicator.\n\nTypical use cases are displaying the strength of a password, or\nshowing the charge level of a battery.\n\n![An example GtkLevelBar](levelbar.png)\n\nUse [method@Gtk.LevelBar.set_value] to set the current value, and\n[method@Gtk.LevelBar.add_offset_value] to set the value offsets at which\nthe bar will be considered in a different state. GTK will add a few\noffsets by default on the level bar: %GTK_LEVEL_BAR_OFFSET_LOW,\n%GTK_LEVEL_BAR_OFFSET_HIGH and %GTK_LEVEL_BAR_OFFSET_FULL, with\nvalues 0.25, 0.75 and 1.0 respectively.\n\nNote that it is your responsibility to update preexisting offsets\nwhen changing the minimum or maximum value. GTK will simply clamp\nthem to the new range.\n\n## Adding a custom offset on the bar\n\n```c\nstatic GtkWidget *\ncreate_level_bar (void)\n{\n  GtkWidget *widget;\n  GtkLevelBar *bar;\n\n  widget = gtk_level_bar_new ();\n  bar = GTK_LEVEL_BAR (widget);\n\n  // This changes the value of the default low offset\n\n  gtk_level_bar_add_offset_value (bar,\n                                  GTK_LEVEL_BAR_OFFSET_LOW,\n                                  0.10);\n\n  // This adds a new offset to the bar; the application will\n  // be able to change its color CSS like this:\n  //\n  // levelbar block.my-offset {\n  //   background-color: magenta;\n  //   border-style: solid;\n  //   border-color: black;\n  //   border-width: 1px;\n  // }\n\n  gtk_level_bar_add_offset_value (bar, \"my-offset\", 0.60);\n\n  return widget;\n}\n```\n\nThe default interval of values is between zero and one, but it’s possible\nto modify the interval using [method@Gtk.LevelBar.set_min_value] and\n[method@Gtk.LevelBar.set_max_value]. The value will be always drawn in\nproportion to the admissible interval, i.e. a value of 15 with a specified\ninterval between 10 and 20 is equivalent to a value of 0.5 with an interval\nbetween 0 and 1. When %GTK_LEVEL_BAR_MODE_DISCRETE is used, the bar level\nis rendered as a finite number of separated blocks instead of a single one.\nThe number of blocks that will be rendered is equal to the number of units\nspecified by the admissible interval.\n\nFor instance, to build a bar rendered with five blocks, it’s sufficient to\nset the minimum value to 0 and the maximum value to 5 after changing the\nindicator mode to discrete.\n\n# GtkLevelBar as GtkBuildable\n\nThe `GtkLevelBar` implementation of the `GtkBuildable` interface supports a\ncustom `<offsets>` element, which can contain any number of `<offset>` elements,\neach of which must have \"name\" and \"value\" attributes.\n\n# CSS nodes\n\n```\nlevelbar[.discrete]\n╰── trough\n    ├── block.filled.level-name\n    ┊\n    ├── block.empty\n    ┊\n```\n\n`GtkLevelBar` has a main CSS node with name levelbar and one of the style\nclasses .discrete or .continuous and a subnode with name trough. Below the\ntrough node are a number of nodes with name block and style class .filled\nor .empty. In continuous mode, there is exactly one node of each, in discrete\nmode, the number of filled and unfilled nodes corresponds to blocks that are\ndrawn. The block.filled nodes also get a style class .level-name corresponding\nto the level for the current value.\n\nIn horizontal orientation, the nodes are always arranged from left to right,\nregardless of text direction.\n\n# Accessibility\n\n`GtkLevelBar` uses the %GTK_ACCESSIBLE_ROLE_METER role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.LevelBar.html)"
    },
    "deprecated": false,
    "insertText": "LevelBar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "LinkButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.LinkButton : Gtk.Button implements Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkLinkButton` is a button with a hyperlink.\n\n![An example GtkLinkButton](link-button.png)\n\nIt is useful to show quick links to resources.\n\nA link button is created by calling either [ctor@Gtk.LinkButton.new] or\n[ctor@Gtk.LinkButton.new_with_label]. If using the former, the URI you\npass to the constructor is used as a label for the widget.\n\nThe URI bound to a `GtkLinkButton` can be set specifically using\n[method@Gtk.LinkButton.set_uri].\n\nBy default, `GtkLinkButton` calls [method@Gtk.FileLauncher.launch] when the button\nis clicked. This behaviour can be overridden by connecting to the\n[signal@Gtk.LinkButton::activate-link] signal and returning %TRUE from\nthe signal handler.\n\n# CSS nodes\n\n`GtkLinkButton` has a single CSS node with name button. To differentiate\nit from a plain `GtkButton`, it gets the .link style class.\n\n# Accessibility\n\n`GtkLinkButton` uses the %GTK_ACCESSIBLE_ROLE_LINK role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.LinkButton.html)"
    },
    "deprecated": false,
    "insertText": "LinkButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListBase",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListBase : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable, Gtk.Scrollable\n```\n\n---\n\n`GtkListBase` is the abstract base class for GTK's list widgets.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListBase.html)"
    },
    "deprecated": false,
    "insertText": "ListBase {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListBox",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListBox : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkListBox` is a vertical list.\n\nA `GtkListBox` only contains `GtkListBoxRow` children. These rows can\nby dynamically sorted and filtered, and headers can be added dynamically\ndepending on the row content. It also allows keyboard and mouse navigation\nand selection like a typical list.\n\nUsing `GtkListBox` is often an alternative to `GtkTreeView`, especially\nwhen the list contents has a more complicated layout than what is allowed\nby a `GtkCellRenderer`, or when the contents is interactive (i.e. has a\nbutton in it).\n\nAlthough a `GtkListBox` must have only `GtkListBoxRow` children, you can\nadd any kind of widget to it via [method@Gtk.ListBox.prepend],\n[method@Gtk.ListBox.append] and [method@Gtk.ListBox.insert] and a\n`GtkListBoxRow` widget will automatically be inserted between the list\nand the widget.\n\n`GtkListBoxRows` can be marked as activatable or selectable. If a row is\nactivatable, [signal@Gtk.ListBox::row-activated] will be emitted for it when\nthe user tries to activate it. If it is selectable, the row will be marked\nas selected when the user tries to select it.\n\n# GtkListBox as GtkBuildable\n\nThe `GtkListBox` implementation of the `GtkBuildable` interface supports\nsetting a child as the placeholder by specifying “placeholder” as the “type”\nattribute of a `<child>` element. See [method@Gtk.ListBox.set_placeholder]\nfor info.\n\n# CSS nodes\n\n|[<!-- language=\"plain\" -->\nlist[.separators][.rich-list][.navigation-sidebar][.boxed-list]\n╰── row[.activatable]\n]|\n\n`GtkListBox` uses a single CSS node named list. It may carry the .separators\nstyle class, when the [property@Gtk.ListBox:show-separators] property is set.\nEach `GtkListBoxRow` uses a single CSS node named row. The row nodes get the\n.activatable style class added when appropriate.\n\nIt may also carry the .boxed-list style class. In this case, the list will be\nautomatically surrounded by a frame and have separators.\n\nThe main list node may also carry style classes to select\nthe style of [list presentation](section-list-widget.html#list-styles):\n.rich-list, .navigation-sidebar or .data-table.\n\n# Accessibility\n\n`GtkListBox` uses the %GTK_ACCESSIBLE_ROLE_LIST role and `GtkListBoxRow` uses\nthe %GTK_ACCESSIBLE_ROLE_LIST_ITEM role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListBox.html)"
    },
    "deprecated": false,
    "insertText": "ListBox {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListBoxRow",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListBoxRow : Gtk.Widget implements Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkListBoxRow` is the kind of widget that can be added to a `GtkListBox`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListBoxRow.html)"
    },
    "deprecated": false,
    "insertText": "ListBoxRow {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListHeader",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListHeader : GObject.Object\n```\n\n---\n\n`GtkListHeader` is used by list widgets to represent the headers they\ndisplay.\n\n`GtkListHeader` objects are managed just like [class@Gtk.ListItem]\nobjects via their factory, but provide a different set of properties suitable\nfor managing the header instead of individual items.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListHeader.html)"
    },
    "deprecated": false,
    "insertText": "ListHeader {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListItem",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListItem : GObject.Object\n```\n\n---\n\n`GtkListItem` is used by list widgets to represent items in a\n[iface@Gio.ListModel].\n\n`GtkListItem` objects are managed by the list widget (with its factory)\nand cannot be created by applications, but they need to be populated\nby application code. This is done by calling [method@Gtk.ListItem.set_child].\n\n`GtkListItem` objects exist in 2 stages:\n\n1. The unbound stage where the listitem is not currently connected to\n   an item in the list. In that case, the [property@Gtk.ListItem:item]\n   property is set to %NULL.\n\n2. The bound stage where the listitem references an item from the list.\n   The [property@Gtk.ListItem:item] property is not %NULL.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListItem.html)"
    },
    "deprecated": false,
    "insertText": "ListItem {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListItemFactory",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListItemFactory : GObject.Object\n```\n\n---\n\nA `GtkListItemFactory` creates widgets for the items taken from a `GListModel`.\n\nThis is one of the core concepts of handling list widgets such\nas [class@Gtk.ListView] or [class@Gtk.GridView].\n\nThe `GtkListItemFactory` is tasked with creating widgets for items\ntaken from the model when the views need them and updating them as\nthe items displayed by the view change.\n\nA view is usually only able to display anything after both a factory\nand a model have been set on the view. So it is important that you do\nnot skip this step when setting up your first view.\n\nBecause views do not display the whole list at once but only a few\nitems, they only need to maintain a few widgets at a time. They will\ninstruct the `GtkListItemFactory` to create these widgets and bind them\nto the items that are currently displayed.\n\nAs the list model changes or the user scrolls to the list, the items will\nchange and the view will instruct the factory to bind the widgets to those\nnew items.\n\nThe actual widgets used for displaying those widgets is provided by you.\n\nWhen the factory needs widgets created, it will create a `GtkListItem`\nand hand it to your code to set up a widget for. This list item will provide\nvarious properties with information about what item to display and provide\nyou with some opportunities to configure its behavior. See the\n[class@Gtk.ListItem] documentation for further details.\n\nVarious implementations of `GtkListItemFactory` exist to allow you different\nways to provide those widgets. The most common implementations are\n[class@Gtk.BuilderListItemFactory] which takes a `GtkBuilder` .ui file\nand then creates widgets and manages everything automatically from the\ninformation in that file and [class@Gtk.SignalListItemFactory] which allows\nyou to connect to signals with your own code and retain full control over\nhow the widgets are setup and managed.\n\nA `GtkListItemFactory` is supposed to be final - that means its behavior should\nnot change and the first widget created from it should behave the same way as\nthe last widget created from it.\nIf you intend to do changes to the behavior, it is recommended that you create\na new `GtkListItemFactory` which will allow the views to recreate its widgets.\n\nOnce you have chosen your factory and created it, you need to set it\non the view widget you want to use it with, such as via\n[method@Gtk.ListView.set_factory]. Reusing factories across different\nviews is allowed, but very uncommon.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListItemFactory.html)"
    },
    "deprecated": false,
    "insertText": "ListItemFactory {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListStore",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListStore : GObject.Object implements Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable\n```\n\n---\n\nA list-like data structure that can be used with the [class@Gtk.TreeView].\n\nThe `GtkListStore` object is a list model for use with a `GtkTreeView`\nwidget.  It implements the `GtkTreeModel` interface, and consequentialy,\ncan use all of the methods available there.  It also implements the\n`GtkTreeSortable` interface so it can be sorted by the view.\nFinally, it also implements the tree\n[drag](iface.TreeDragSource.html) and [drop](iface.TreeDragDest.html)\ninterfaces.\n\nThe `GtkListStore` can accept most `GType`s as a column type, though\nit can’t accept all custom types.  Internally, it will keep a copy of\ndata passed in (such as a string or a boxed pointer).  Columns that\naccept `GObject`s are handled a little differently.  The\n`GtkListStore` will keep a reference to the object instead of copying the\nvalue.  As a result, if the object is modified, it is up to the\napplication writer to call [method@Gtk.TreeModel.row_changed] to emit the\n[signal@Gtk.TreeModel::row_changed] signal. This most commonly affects lists\nwith [class@Gdk.Texture]s stored.\n\nAn example for creating a simple list store:\n\n```c\nenum {\n  COLUMN_STRING,\n  COLUMN_INT,\n  COLUMN_BOOLEAN,\n  N_COLUMNS\n};\n\n{\n  GtkListStore *list_store;\n  GtkTreePath *path;\n  GtkTreeIter iter;\n  int i;\n\n  list_store = gtk_list_store_new (N_COLUMNS,\n                                   G_TYPE_STRING,\n                                   G_TYPE_INT,\n                                   G_TYPE_BOOLEAN);\n\n  for (i = 0; i < 10; i++)\n    {\n      char *some_data;\n\n      some_data = get_some_data (i);\n\n      // Add a new row to the model\n      gtk_list_store_append (list_store, &iter);\n      gtk_list_store_set (list_store, &iter,\n                          COLUMN_STRING, some_data,\n                          COLUMN_INT, i,\n                          COLUMN_BOOLEAN,  FALSE,\n                          -1);\n\n      // As the store will keep a copy of the string internally,\n      // we free some_data.\n      g_free (some_data);\n    }\n\n  // Modify a particular row\n  path = gtk_tree_path_new_from_string (\"4\");\n  gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),\n                           &iter,\n                           path);\n  gtk_tree_path_free (path);\n  gtk_list_store_set (list_store, &iter,\n                      COLUMN_BOOLEAN, TRUE,\n                      -1);\n}\n```\n\n`GtkListStore` is deprecated since GTK 4.10, and should not be used in newly\nwritten code. You should use [class@Gio.ListStore] instead, and the various\nlist models provided by GTK.\n\n## Performance Considerations\n\nInternally, the `GtkListStore` was originally implemented with a linked list\nwith a tail pointer.  As a result, it was fast at data insertion and deletion,\nand not fast at random data access.  The `GtkListStore` sets the\n`GTK_TREE_MODEL_ITERS_PERSIST` flag, which means that `GtkTreeIter`s can be\ncached while the row exists.  Thus, if access to a particular row is needed\noften and your code is expected to run on older versions of GTK, it is worth\nkeeping the iter around.\n\n## Atomic Operations\n\nIt is important to note that only the methods\ngtk_list_store_insert_with_values() and gtk_list_store_insert_with_valuesv()\nare atomic, in the sense that the row is being appended to the store and the\nvalues filled in in a single operation with regard to `GtkTreeModel` signaling.\nIn contrast, using e.g. gtk_list_store_append() and then gtk_list_store_set()\nwill first create a row, which triggers the `GtkTreeModel::row-inserted` signal\non `GtkListStore`. The row, however, is still empty, and any signal handler\nconnecting to `GtkTreeModel::row-inserted` on this particular store should be prepared\nfor the situation that the row might be empty. This is especially important\nif you are wrapping the `GtkListStore` inside a `GtkTreeModel`Filter and are\nusing a `GtkTreeModel`FilterVisibleFunc. Using any of the non-atomic operations\nto append rows to the `GtkListStore` will cause the\n`GtkTreeModel`FilterVisibleFunc to be visited with an empty row first; the\nfunction must be prepared for that.\n\n## GtkListStore as GtkBuildable\n\nThe GtkListStore implementation of the [iface@Gtk.Buildable] interface allows\nto specify the model columns with a `<columns>` element that may contain\nmultiple `<column>` elements, each specifying one model column. The “type”\nattribute specifies the data type for the column.\n\nAdditionally, it is possible to specify content for the list store\nin the UI definition, with the `<data>` element. It can contain multiple\n`<row>` elements, each specifying to content for one row of the list model.\nInside a `<row>`, the `<col>` elements specify the content for individual cells.\n\nNote that it is probably more common to define your models in the code,\nand one might consider it a layering violation to specify the content of\na list store in a UI definition, data, not presentation, and common wisdom\nis to separate the two, as far as possible.\n\nAn example of a UI Definition fragment for a list store:\n\n```xml\n<object class=\"GtkListStore\">\n  <columns>\n    <column type=\"gchararray\"/>\n    <column type=\"gchararray\"/>\n    <column type=\"gint\"/>\n  </columns>\n  <data>\n    <row>\n      <col id=\"0\">John</col>\n      <col id=\"1\">Doe</col>\n      <col id=\"2\">25</col>\n    </row>\n    <row>\n      <col id=\"0\">Johan</col>\n      <col id=\"1\">Dahlin</col>\n      <col id=\"2\">50</col>\n    </row>\n  </data>\n</object>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListStore.html)"
    },
    "deprecated": false,
    "insertText": "ListStore {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ListView",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ListView : Gtk.ListBase implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable, Gtk.Scrollable\n```\n\n---\n\n`GtkListView` presents a large dynamic list of items.\n\n`GtkListView` uses its factory to generate one row widget for each visible\nitem and shows them in a linear display, either vertically or horizontally.\n\nThe [property@Gtk.ListView:show-separators] property offers a simple way to\ndisplay separators between the rows.\n\n`GtkListView` allows the user to select items according to the selection\ncharacteristics of the model. For models that allow multiple selected items,\nit is possible to turn on _rubberband selection_, using\n[property@Gtk.ListView:enable-rubberband].\n\nIf you need multiple columns with headers, see [class@Gtk.ColumnView].\n\nTo learn more about the list widget framework, see the\n[overview](section-list-widget.html).\n\nAn example of using `GtkListView`:\n```c\nstatic void\nsetup_listitem_cb (GtkListItemFactory *factory,\n                   GtkListItem        *list_item)\n{\n  GtkWidget *image;\n\n  image = gtk_image_new ();\n  gtk_image_set_icon_size (GTK_IMAGE (image), GTK_ICON_SIZE_LARGE);\n  gtk_list_item_set_child (list_item, image);\n}\n\nstatic void\nbind_listitem_cb (GtkListItemFactory *factory,\n                  GtkListItem        *list_item)\n{\n  GtkWidget *image;\n  GAppInfo *app_info;\n\n  image = gtk_list_item_get_child (list_item);\n  app_info = gtk_list_item_get_item (list_item);\n  gtk_image_set_from_gicon (GTK_IMAGE (image), g_app_info_get_icon (app_info));\n}\n\nstatic void\nactivate_cb (GtkListView  *list,\n             guint         position,\n             gpointer      unused)\n{\n  GAppInfo *app_info;\n\n  app_info = g_list_model_get_item (G_LIST_MODEL (gtk_list_view_get_model (list)), position);\n  g_app_info_launch (app_info, NULL, NULL, NULL);\n  g_object_unref (app_info);\n}\n\n...\n\n  model = create_application_list ();\n\n  factory = gtk_signal_list_item_factory_new ();\n  g_signal_connect (factory, \"setup\", G_CALLBACK (setup_listitem_cb), NULL);\n  g_signal_connect (factory, \"bind\", G_CALLBACK (bind_listitem_cb), NULL);\n\n  list = gtk_list_view_new (GTK_SELECTION_MODEL (gtk_single_selection_new (model)), factory);\n\n  g_signal_connect (list, \"activate\", G_CALLBACK (activate_cb), NULL);\n\n  gtk_scrolled_window_set_child (GTK_SCROLLED_WINDOW (sw), list);\n```\n\n# CSS nodes\n\n```\nlistview[.separators][.rich-list][.navigation-sidebar][.data-table]\n├── row[.activatable]\n│\n├── row[.activatable]\n│\n┊\n╰── [rubberband]\n```\n\n`GtkListView` uses a single CSS node named `listview`. It may carry the\n`.separators` style class, when [property@Gtk.ListView:show-separators]\nproperty is set. Each child widget uses a single CSS node named `row`.\nIf the [property@Gtk.ListItem:activatable] property is set, the\ncorresponding row will have the `.activatable` style class. For\nrubberband selection, a node with name `rubberband` is used.\n\nThe main listview node may also carry style classes to select\nthe style of [list presentation](ListContainers.html#list-styles):\n.rich-list, .navigation-sidebar or .data-table.\n\n# Accessibility\n\n`GtkListView` uses the %GTK_ACCESSIBLE_ROLE_LIST role, and the list\nitems use the %GTK_ACCESSIBLE_ROLE_LIST_ITEM role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ListView.html)"
    },
    "deprecated": false,
    "insertText": "ListView {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "LockButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.LockButton : Gtk.Button implements Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkLockButton` is a widget to obtain and revoke authorizations\nneeded to operate the controls.\n\n![An example GtkLockButton](lock-button.png)\n\nIt is typically used in preference dialogs or control panels.\n\nThe required authorization is represented by a `GPermission` object.\nConcrete implementations of `GPermission` may use PolicyKit or some\nother authorization framework. To obtain a PolicyKit-based\n`GPermission`, use `polkit_permission_new()`.\n\nIf the user is not currently allowed to perform the action, but can\nobtain the permission, the widget looks like this:\n\n![](lockbutton-locked.png)\n\nand the user can click the button to request the permission. Depending\non the platform, this may pop up an authentication dialog or ask the user\nto authenticate in some other way. Once the user has obtained the permission,\nthe widget changes to this:\n\n![](lockbutton-unlocked.png)\n\nand the permission can be dropped again by clicking the button. If the user\nis not able to obtain the permission at all, the widget looks like this:\n\n![](lockbutton-sorry.png)\n\nIf the user has the permission and cannot drop it, the button is hidden.\n\nThe text (and tooltips) that are shown in the various cases can be adjusted\nwith the [property@Gtk.LockButton:text-lock],\n[property@Gtk.LockButton:text-unlock],\n[property@Gtk.LockButton:tooltip-lock],\n[property@Gtk.LockButton:tooltip-unlock] and\n[property@Gtk.LockButton:tooltip-not-authorized] properties.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.LockButton.html)"
    },
    "deprecated": false,
    "insertText": "LockButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MapListModel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MapListModel : GObject.Object implements Gio.ListModel, Gtk.SectionModel\n```\n\n---\n\nA `GtkMapListModel` maps the items in a list model to different items.\n\n`GtkMapListModel` uses a [callback@Gtk.MapListModelMapFunc].\n\nExample: Create a list of `GtkEventControllers`\n```c\nstatic gpointer\nmap_to_controllers (gpointer widget,\n                    gpointer data)\n{\n  gpointer result = gtk_widget_observe_controllers (widget);\n  g_object_unref (widget);\n  return result;\n}\n\nwidgets = gtk_widget_observe_children (widget);\n\ncontrollers = gtk_map_list_model_new (widgets,\n                                      map_to_controllers,\n                                      NULL, NULL);\n\nmodel = gtk_flatten_list_model_new (GTK_TYPE_EVENT_CONTROLLER,\n                                    controllers);\n```\n\n`GtkMapListModel` will attempt to discard the mapped objects as soon as\nthey are no longer needed and recreate them if necessary.\n\n`GtkMapListModel` passes through sections from the underlying model.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MapListModel.html)"
    },
    "deprecated": false,
    "insertText": "MapListModel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MediaControls",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MediaControls : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkMediaControls` is a widget to show controls for a video.\n\n![An example GtkMediaControls](media-controls.png)\n\nUsually, `GtkMediaControls` is used as part of [class@Gtk.Video].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MediaControls.html)"
    },
    "deprecated": false,
    "insertText": "MediaControls {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MediaFile",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MediaFile : Gtk.MediaStream implements Gdk.Paintable\n```\n\n---\n\n`GtkMediaFile` implements `GtkMediaStream` for files.\n\nThis provides a simple way to play back video files with GTK.\n\nGTK provides a GIO extension point for `GtkMediaFile` implementations\nto allow for external implementations using various media frameworks.\n\nGTK itself includes an implementation using GStreamer.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MediaFile.html)"
    },
    "deprecated": false,
    "insertText": "MediaFile {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MediaStream",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MediaStream : GObject.Object implements Gdk.Paintable\n```\n\n---\n\n`GtkMediaStream` is the integration point for media playback inside GTK.\n\nGTK provides an implementation of the `GtkMediaStream` interface that\nis called [class@Gtk.MediaFile].\n\nApart from application-facing API for stream playback, `GtkMediaStream`\nhas a number of APIs that are only useful for implementations and should\nnot be used in applications:\n[method@Gtk.MediaStream.prepared],\n[method@Gtk.MediaStream.unprepared],\n[method@Gtk.MediaStream.update],\n[method@Gtk.MediaStream.ended],\n[method@Gtk.MediaStream.seek_success],\n[method@Gtk.MediaStream.seek_failed],\n[method@Gtk.MediaStream.gerror],\n[method@Gtk.MediaStream.error],\n[method@Gtk.MediaStream.error_valist].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MediaStream.html)"
    },
    "deprecated": false,
    "insertText": "MediaStream {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MenuButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MenuButton : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkMenuButton` widget is used to display a popup when clicked.\n\n![An example GtkMenuButton](menu-button.png)\n\nThis popup can be provided either as a `GtkPopover` or as an abstract\n`GMenuModel`.\n\nThe `GtkMenuButton` widget can show either an icon (set with the\n[property@Gtk.MenuButton:icon-name] property) or a label (set with the\n[property@Gtk.MenuButton:label] property). If neither is explicitly set,\na [class@Gtk.Image] is automatically created, using an arrow image oriented\naccording to [property@Gtk.MenuButton:direction] or the generic\n“open-menu-symbolic” icon if the direction is not set.\n\nThe positioning of the popup is determined by the\n[property@Gtk.MenuButton:direction] property of the menu button.\n\nFor menus, the [property@Gtk.Widget:halign] and [property@Gtk.Widget:valign]\nproperties of the menu are also taken into account. For example, when the\ndirection is %GTK_ARROW_DOWN and the horizontal alignment is %GTK_ALIGN_START,\nthe menu will be positioned below the button, with the starting edge\n(depending on the text direction) of the menu aligned with the starting\nedge of the button. If there is not enough space below the button, the\nmenu is popped up above the button instead. If the alignment would move\npart of the menu offscreen, it is “pushed in”.\n\n|           | start                | center                | end                |\n| -         | ---                  | ---                   | ---                |\n| **down**  | ![](down-start.png)  | ![](down-center.png)  | ![](down-end.png)  |\n| **up**    | ![](up-start.png)    | ![](up-center.png)    | ![](up-end.png)    |\n| **left**  | ![](left-start.png)  | ![](left-center.png)  | ![](left-end.png)  |\n| **right** | ![](right-start.png) | ![](right-center.png) | ![](right-end.png) |\n\n# CSS nodes\n\n```\nmenubutton\n╰── button.toggle\n    ╰── <content>\n         ╰── [arrow]\n```\n\n`GtkMenuButton` has a single CSS node with name `menubutton`\nwhich contains a `button` node with a `.toggle` style class.\n\nIf the button contains an icon, it will have the `.image-button` style class,\nif it contains text, it will have `.text-button` style class. If an arrow is\nvisible in addition to an icon, text or a custom child, it will also have\n`.arrow-button` style class.\n\nInside the toggle button content, there is an `arrow` node for\nthe indicator, which will carry one of the `.none`, `.up`, `.down`,\n`.left` or `.right` style classes to indicate the direction that\nthe menu will appear in. The CSS is expected to provide a suitable\nimage for each of these cases using the `-gtk-icon-source` property.\n\nOptionally, the `menubutton` node can carry the `.circular` style class\nto request a round appearance.\n\n# Accessibility\n\n`GtkMenuButton` uses the %GTK_ACCESSIBLE_ROLE_BUTTON role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MenuButton.html)"
    },
    "deprecated": false,
    "insertText": "MenuButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MessageDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MessageDialog : Gtk.Dialog implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\n`GtkMessageDialog` presents a dialog with some message text.\n\n![An example GtkMessageDialog](messagedialog.png)\n\nIt’s simply a convenience widget; you could construct the equivalent of\n`GtkMessageDialog` from `GtkDialog` without too much effort, but\n`GtkMessageDialog` saves typing.\n\nThe easiest way to do a modal message dialog is to use the %GTK_DIALOG_MODAL\nflag, which will call [method@Gtk.Window.set_modal] internally. The dialog will\nprevent interaction with the parent window until it's hidden or destroyed.\nYou can use the [signal@Gtk.Dialog::response] signal to know when the user\ndismissed the dialog.\n\nAn example for using a modal dialog:\n```c\nGtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL;\ndialog = gtk_message_dialog_new (parent_window,\n                                 flags,\n                                 GTK_MESSAGE_ERROR,\n                                 GTK_BUTTONS_CLOSE,\n                                 \"Error reading “%s”: %s\",\n                                 filename,\n                                 g_strerror (errno));\n// Destroy the dialog when the user responds to it\n// (e.g. clicks a button)\n\ng_signal_connect (dialog, \"response\",\n                  G_CALLBACK (gtk_window_destroy),\n                  NULL);\n```\n\nYou might do a non-modal `GtkMessageDialog` simply by omitting the\n%GTK_DIALOG_MODAL flag:\n\n```c\nGtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;\ndialog = gtk_message_dialog_new (parent_window,\n                                 flags,\n                                 GTK_MESSAGE_ERROR,\n                                 GTK_BUTTONS_CLOSE,\n                                 \"Error reading “%s”: %s\",\n                                 filename,\n                                 g_strerror (errno));\n\n// Destroy the dialog when the user responds to it\n// (e.g. clicks a button)\ng_signal_connect (dialog, \"response\",\n                  G_CALLBACK (gtk_window_destroy),\n                  NULL);\n```\n\n# GtkMessageDialog as GtkBuildable\n\nThe `GtkMessageDialog` implementation of the `GtkBuildable` interface exposes\nthe message area as an internal child with the name “message_area”.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MessageDialog.html)"
    },
    "deprecated": false,
    "insertText": "MessageDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MnemonicAction",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MnemonicAction : Gtk.ShortcutAction\n```\n\n---\n\nA `GtkShortcutAction` that calls gtk_widget_mnemonic_activate().\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MnemonicAction.html)"
    },
    "deprecated": false,
    "insertText": "MnemonicAction {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MnemonicTrigger",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MnemonicTrigger : Gtk.ShortcutTrigger\n```\n\n---\n\nA `GtkShortcutTrigger` that triggers when a specific mnemonic is pressed.\n\nMnemonics require a *mnemonic modifier* (typically <kbd>Alt</kbd>) to be\npressed together with the mnemonic key.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MnemonicTrigger.html)"
    },
    "deprecated": false,
    "insertText": "MnemonicTrigger {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MountOperation",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MountOperation : Gio.MountOperation\n```\n\n---\n\n`GtkMountOperation` is an implementation of `GMountOperation`.\n\nThe functions and objects described here make working with GTK and\nGIO more convenient.\n\n`GtkMountOperation` is needed when mounting volumes:\nIt is an implementation of `GMountOperation` that can be used with\nGIO functions for mounting volumes such as\ng_file_mount_enclosing_volume(), g_file_mount_mountable(),\ng_volume_mount(), g_mount_unmount_with_operation() and others.\n\nWhen necessary, `GtkMountOperation` shows dialogs to let the user\nenter passwords, ask questions or show processes blocking unmount.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MountOperation.html)"
    },
    "deprecated": false,
    "insertText": "MountOperation {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MultiFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MultiFilter : Gtk.Filter implements Gio.ListModel, Gtk.Buildable\n```\n\n---\n\n`GtkMultiFilter` is the base class for filters that combine multiple filters.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MultiFilter.html)"
    },
    "deprecated": false,
    "insertText": "MultiFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MultiSelection",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MultiSelection : GObject.Object implements Gio.ListModel, Gtk.SectionModel, Gtk.SelectionModel\n```\n\n---\n\n`GtkMultiSelection` is a `GtkSelectionModel` that allows selecting multiple\nelements.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MultiSelection.html)"
    },
    "deprecated": false,
    "insertText": "MultiSelection {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "MultiSorter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.MultiSorter : Gtk.Sorter implements Gio.ListModel, Gtk.Buildable\n```\n\n---\n\n`GtkMultiSorter` combines multiple sorters by trying them\nin turn.\n\nIf the first sorter compares two items as equal,\nthe second is tried next, and so on.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.MultiSorter.html)"
    },
    "deprecated": false,
    "insertText": "MultiSorter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "NamedAction",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.NamedAction : Gtk.ShortcutAction\n```\n\n---\n\nA `GtkShortcutAction` that activates an action by name.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.NamedAction.html)"
    },
    "deprecated": false,
    "insertText": "NamedAction {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "NativeDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.NativeDialog : GObject.Object\n```\n\n---\n\nNative dialogs are platform dialogs that don't use `GtkDialog`.\n\nThey are used in order to integrate better with a platform, by\nlooking the same as other native applications and supporting\nplatform specific features.\n\nThe [class@Gtk.Dialog] functions cannot be used on such objects,\nbut we need a similar API in order to drive them. The `GtkNativeDialog`\nobject is an API that allows you to do this. It allows you to set\nvarious common properties on the dialog, as well as show and hide\nit and get a [signal@Gtk.NativeDialog::response] signal when the user\nfinished with the dialog.\n\nNote that unlike `GtkDialog`, `GtkNativeDialog` objects are not\ntoplevel widgets, and GTK does not keep them alive. It is your\nresponsibility to keep a reference until you are done with the\nobject.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.NativeDialog.html)"
    },
    "deprecated": false,
    "insertText": "NativeDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "NeverTrigger",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.NeverTrigger : Gtk.ShortcutTrigger\n```\n\n---\n\nA `GtkShortcutTrigger` that never triggers.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.NeverTrigger.html)"
    },
    "deprecated": false,
    "insertText": "NeverTrigger {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "NoSelection",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.NoSelection : GObject.Object implements Gio.ListModel, Gtk.SectionModel, Gtk.SelectionModel\n```\n\n---\n\n`GtkNoSelection` is a `GtkSelectionModel` that does not allow selecting\nanything.\n\nThis model is meant to be used as a simple wrapper around a `GListModel`\nwhen a `GtkSelectionModel` is required.\n\n`GtkNoSelection` passes through sections from the underlying model.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.NoSelection.html)"
    },
    "deprecated": false,
    "insertText": "NoSelection {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Notebook",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Notebook : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkNotebook` is a container whose children are pages switched\nbetween using tabs.\n\n![An example GtkNotebook](notebook.png)\n\nThere are many configuration options for `GtkNotebook`. Among\nother things, you can choose on which edge the tabs appear\n(see [method@Gtk.Notebook.set_tab_pos]), whether, if there are\ntoo many tabs to fit the notebook should be made bigger or scrolling\narrows added (see [method@Gtk.Notebook.set_scrollable]), and whether\nthere will be a popup menu allowing the users to switch pages.\n(see [method@Gtk.Notebook.popup_enable]).\n\n# GtkNotebook as GtkBuildable\n\nThe `GtkNotebook` implementation of the `GtkBuildable` interface\nsupports placing children into tabs by specifying “tab” as the\n“type” attribute of a `<child>` element. Note that the content\nof the tab must be created before the tab can be filled.\nA tab child can be specified without specifying a `<child>`\ntype attribute.\n\nTo add a child widget in the notebooks action area, specify\n\"action-start\" or “action-end” as the “type” attribute of the\n`<child>` element.\n\nAn example of a UI definition fragment with `GtkNotebook`:\n\n```xml\n<object class=\"GtkNotebook\">\n  <child>\n    <object class=\"GtkLabel\" id=\"notebook-content\">\n      <property name=\"label\">Content</property>\n    </object>\n  </child>\n  <child type=\"tab\">\n    <object class=\"GtkLabel\" id=\"notebook-tab\">\n      <property name=\"label\">Tab</property>\n    </object>\n  </child>\n</object>\n```\n\n# CSS nodes\n\n```\nnotebook\n├── header.top\n│   ├── [<action widget>]\n│   ├── tabs\n│   │   ├── [arrow]\n│   │   ├── tab\n│   │   │   ╰── <tab label>\n┊   ┊   ┊\n│   │   ├── tab[.reorderable-page]\n│   │   │   ╰── <tab label>\n│   │   ╰── [arrow]\n│   ╰── [<action widget>]\n│\n╰── stack\n    ├── <child>\n    ┊\n    ╰── <child>\n```\n\n`GtkNotebook` has a main CSS node with name `notebook`, a subnode\nwith name `header` and below that a subnode with name `tabs` which\ncontains one subnode per tab with name `tab`.\n\nIf action widgets are present, their CSS nodes are placed next\nto the `tabs` node. If the notebook is scrollable, CSS nodes with\nname `arrow` are placed as first and last child of the `tabs` node.\n\nThe main node gets the `.frame` style class when the notebook\nhas a border (see [method@Gtk.Notebook.set_show_border]).\n\nThe header node gets one of the style class `.top`, `.bottom`,\n`.left` or `.right`, depending on where the tabs are placed. For\nreorderable pages, the tab node gets the `.reorderable-page` class.\n\nA `tab` node gets the `.dnd` style class while it is moved with drag-and-drop.\n\nThe nodes are always arranged from left-to-right, regardless of text direction.\n\n# Accessibility\n\n`GtkNotebook` uses the following roles:\n\n - %GTK_ACCESSIBLE_ROLE_GROUP for the notebook widget\n - %GTK_ACCESSIBLE_ROLE_TAB_LIST for the list of tabs\n - %GTK_ACCESSIBLE_ROLE_TAB role for each tab\n - %GTK_ACCESSIBLE_ROLE_TAB_PANEL for each page\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Notebook.html)"
    },
    "deprecated": false,
    "insertText": "Notebook {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "NotebookPage",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.NotebookPage : GObject.Object\n```\n\n---\n\n`GtkNotebookPage` is an auxiliary object used by `GtkNotebook`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.NotebookPage.html)"
    },
    "deprecated": false,
    "insertText": "NotebookPage {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "NothingAction",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.NothingAction : Gtk.ShortcutAction\n```\n\n---\n\nA `GtkShortcutAction` that does nothing.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.NothingAction.html)"
    },
    "deprecated": false,
    "insertText": "NothingAction {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "NumericSorter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.NumericSorter : Gtk.Sorter\n```\n\n---\n\n`GtkNumericSorter` is a `GtkSorter` that compares numbers.\n\nTo obtain the numbers to compare, this sorter evaluates a\n[class@Gtk.Expression].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.NumericSorter.html)"
    },
    "deprecated": false,
    "insertText": "NumericSorter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ObjectExpression",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ObjectExpression : Gtk.Expression\n```\n\n---\n\nA `GObject` value in a `GtkExpression`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ObjectExpression.html)"
    },
    "deprecated": false,
    "insertText": "ObjectExpression {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Overlay",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Overlay : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkOverlay` is a container which contains a single main child, on top\nof which it can place “overlay” widgets.\n\n![An example GtkOverlay](overlay.png)\n\nThe position of each overlay widget is determined by its\n[property@Gtk.Widget:halign] and [property@Gtk.Widget:valign]\nproperties. E.g. a widget with both alignments set to %GTK_ALIGN_START\nwill be placed at the top left corner of the `GtkOverlay` container,\nwhereas an overlay with halign set to %GTK_ALIGN_CENTER and valign set\nto %GTK_ALIGN_END will be placed a the bottom edge of the `GtkOverlay`,\nhorizontally centered. The position can be adjusted by setting the margin\nproperties of the child to non-zero values.\n\nMore complicated placement of overlays is possible by connecting\nto the [signal@Gtk.Overlay::get-child-position] signal.\n\nAn overlay’s minimum and natural sizes are those of its main child.\nThe sizes of overlay children are not considered when measuring these\npreferred sizes.\n\n# GtkOverlay as GtkBuildable\n\nThe `GtkOverlay` implementation of the `GtkBuildable` interface\nsupports placing a child as an overlay by specifying “overlay” as\nthe “type” attribute of a `<child>` element.\n\n# CSS nodes\n\n`GtkOverlay` has a single CSS node with the name “overlay”. Overlay children\nwhose alignments cause them to be positioned at an edge get the style classes\n“.left”, “.right”, “.top”, and/or “.bottom” according to their position.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Overlay.html)"
    },
    "deprecated": false,
    "insertText": "Overlay {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "OverlayLayout",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.OverlayLayout : Gtk.LayoutManager\n```\n\n---\n\n`GtkOverlayLayout` is the layout manager used by [class@Gtk.Overlay].\n\nIt places widgets as overlays on top of the main child.\n\nThis is not a reusable layout manager, since it expects its widget\nto be a `GtkOverlay`. It is only listed here so that its layout\nproperties get documented.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.OverlayLayout.html)"
    },
    "deprecated": false,
    "insertText": "OverlayLayout {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "OverlayLayoutChild",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.OverlayLayoutChild : Gtk.LayoutChild\n```\n\n---\n\n`GtkLayoutChild` subclass for children in a `GtkOverlayLayout`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.OverlayLayoutChild.html)"
    },
    "deprecated": false,
    "insertText": "OverlayLayoutChild {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PadController",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PadController : Gtk.EventController\n```\n\n---\n\n`GtkPadController` is an event controller for the pads found in drawing\ntablets.\n\nPads are the collection of buttons and tactile sensors often found around\nthe stylus-sensitive area.\n\nThese buttons and sensors have no implicit meaning, and by default they\nperform no action. `GtkPadController` is provided to map those to\n[iface@Gio.Action] objects, thus letting the application give them a more\nsemantic meaning.\n\nButtons and sensors are not constrained to triggering a single action,\nsome %GDK_SOURCE_TABLET_PAD devices feature multiple \"modes\". All these\ninput elements have one current mode, which may determine the final action\nbeing triggered.\n\nPad devices often divide buttons and sensors into groups. All elements\nin a group share the same current mode, but different groups may have\ndifferent modes. See [method@Gdk.DevicePad.get_n_groups] and\n[method@Gdk.DevicePad.get_group_n_modes].\n\nEach of the actions that a given button/strip/ring performs for a given mode\nis defined by a [struct@Gtk.PadActionEntry]. It contains an action name that\nwill be looked up in the given [iface@Gio.ActionGroup] and activated whenever\nthe specified input element and mode are triggered.\n\nA simple example of `GtkPadController` usage: Assigning button 1 in all\nmodes and pad devices to an \"invert-selection\" action:\n\n```c\nGtkPadActionEntry *pad_actions[] = {\n  { GTK_PAD_ACTION_BUTTON, 1, -1, \"Invert selection\", \"pad-actions.invert-selection\" },\n  …\n};\n\n…\naction_group = g_simple_action_group_new ();\naction = g_simple_action_new (\"pad-actions.invert-selection\", NULL);\ng_signal_connect (action, \"activate\", on_invert_selection_activated, NULL);\ng_action_map_add_action (G_ACTION_MAP (action_group), action);\n…\npad_controller = gtk_pad_controller_new (action_group, NULL);\n```\n\nThe actions belonging to rings/strips will be activated with a parameter\nof type %G_VARIANT_TYPE_DOUBLE bearing the value of the given axis, it\nis required that those are made stateful and accepting this `GVariantType`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PadController.html)"
    },
    "deprecated": false,
    "insertText": "PadController {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PageSetup",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PageSetup : GObject.Object\n```\n\n---\n\nA `GtkPageSetup` object stores the page size, orientation and margins.\n\nThe idea is that you can get one of these from the page setup dialog\nand then pass it to the `GtkPrintOperation` when printing.\nThe benefit of splitting this out of the `GtkPrintSettings` is that\nthese affect the actual layout of the page, and thus need to be set\nlong before user prints.\n\n## Margins\n\nThe margins specified in this object are the “print margins”, i.e. the\nparts of the page that the printer cannot print on. These are different\nfrom the layout margins that a word processor uses; they are typically\nused to determine the minimal size for the layout margins.\n\nTo obtain a `GtkPageSetup` use [ctor@Gtk.PageSetup.new] to get the defaults,\nor use [func@Gtk.print_run_page_setup_dialog] to show the page setup dialog\nand receive the resulting page setup.\n\n## A page setup dialog\n\n```c\nstatic GtkPrintSettings *settings = NULL;\nstatic GtkPageSetup *page_setup = NULL;\n\nstatic void\ndo_page_setup (void)\n{\n  GtkPageSetup *new_page_setup;\n\n  if (settings == NULL)\n    settings = gtk_print_settings_new ();\n\n  new_page_setup = gtk_print_run_page_setup_dialog (GTK_WINDOW (main_window),\n                                                    page_setup, settings);\n\n  if (page_setup)\n    g_object_unref (page_setup);\n\n  page_setup = new_page_setup;\n}\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PageSetup.html)"
    },
    "deprecated": false,
    "insertText": "PageSetup {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PageSetupUnixDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PageSetupUnixDialog : Gtk.Dialog implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\n`GtkPageSetupUnixDialog` implements a page setup dialog for platforms\nwhich don’t provide a native page setup dialog, like Unix.\n\n![An example GtkPageSetupUnixDialog](pagesetupdialog.png)\n\nIt can be used very much like any other GTK dialog, at the\ncost of the portability offered by the high-level printing\nAPI in [class@Gtk.PrintOperation].\n\n## CSS nodes\n\n`GtkPageSetupUnixDialog` has a single CSS node with the name `window` and\nstyle class `.pagesetup`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PageSetupUnixDialog.html)"
    },
    "deprecated": false,
    "insertText": "PageSetupUnixDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Paned",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Paned : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nA widget with two panes, arranged either horizontally or vertically.\n\n![An example GtkPaned](panes.png)\n\nThe division between the two panes is adjustable by the user\nby dragging a handle.\n\nChild widgets are added to the panes of the widget with\n[method@Gtk.Paned.set_start_child] and [method@Gtk.Paned.set_end_child].\nThe division between the two children is set by default from the size\nrequests of the children, but it can be adjusted by the user.\n\nA paned widget draws a separator between the two child widgets and a\nsmall handle that the user can drag to adjust the division. It does not\ndraw any relief around the children or around the separator. (The space\nin which the separator is called the gutter.) Often, it is useful to put\neach child inside a [class@Gtk.Frame] so that the gutter appears as a\nridge. No separator is drawn if one of the children is missing.\n\nEach child has two options that can be set, \"resize\" and \"shrink\". If\n\"resize\" is true then, when the `GtkPaned` is resized, that child will\nexpand or shrink along with the paned widget. If \"shrink\" is true, then\nthat child can be made smaller than its requisition by the user.\nSetting \"shrink\" to false allows the application to set a minimum size.\nIf \"resize\" is false for both children, then this is treated as if\n\"resize\" is true for both children.\n\nThe application can set the position of the slider as if it were set\nby the user, by calling [method@Gtk.Paned.set_position].\n\n# CSS nodes\n\n```\npaned\n├── <child>\n├── separator[.wide]\n╰── <child>\n```\n\n`GtkPaned` has a main CSS node with name paned, and a subnode for\nthe separator with name separator. The subnode gets a .wide style\nclass when the paned is supposed to be wide.\n\nIn horizontal orientation, the nodes are arranged based on the text\ndirection, so in left-to-right mode, :first-child will select the\nleftmost child, while it will select the rightmost child in\nRTL layouts.\n\n## Creating a paned widget with minimum sizes.\n\n```c\nGtkWidget *hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);\nGtkWidget *frame1 = gtk_frame_new (NULL);\nGtkWidget *frame2 = gtk_frame_new (NULL);\n\ngtk_widget_set_size_request (hpaned, 200, -1);\n\ngtk_paned_set_start_child (GTK_PANED (hpaned), frame1);\ngtk_paned_set_resize_start_child (GTK_PANED (hpaned), TRUE);\ngtk_paned_set_shrink_start_child (GTK_PANED (hpaned), FALSE);\ngtk_widget_set_size_request (frame1, 50, -1);\n\ngtk_paned_set_end_child (GTK_PANED (hpaned), frame2);\ngtk_paned_set_resize_end_child (GTK_PANED (hpaned), FALSE);\ngtk_paned_set_shrink_end_child (GTK_PANED (hpaned), FALSE);\ngtk_widget_set_size_request (frame2, 50, -1);\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Paned.html)"
    },
    "deprecated": false,
    "insertText": "Paned {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ParamSpecExpression",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ParamSpecExpression : GObject.ParamSpec\n```\n\n---\n\nA `GParamSpec` for properties holding a `GtkExpression`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ParamSpecExpression.html)"
    },
    "deprecated": false,
    "insertText": "ParamSpecExpression {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PasswordEntry",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PasswordEntry : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable\n```\n\n---\n\n`GtkPasswordEntry` is an entry that has been tailored for entering secrets.\n\n![An example GtkPasswordEntry](password-entry.png)\n\nIt does not show its contents in clear text, does not allow to copy it\nto the clipboard, and it shows a warning when Caps Lock is engaged. If\nthe underlying platform allows it, `GtkPasswordEntry` will also place\nthe text in a non-pageable memory area, to avoid it being written out\nto disk by the operating system.\n\nOptionally, it can offer a way to reveal the contents in clear text.\n\n`GtkPasswordEntry` provides only minimal API and should be used with\nthe [iface@Gtk.Editable] API.\n\n# CSS Nodes\n\n```\nentry.password\n╰── text\n    ├── image.caps-lock-indicator\n    ┊\n```\n\n`GtkPasswordEntry` has a single CSS node with name entry that carries\na .passwordstyle class. The text Css node below it has a child with\nname image and style class .caps-lock-indicator for the Caps Lock\nicon, and possibly other children.\n\n# Accessibility\n\n`GtkPasswordEntry` uses the %GTK_ACCESSIBLE_ROLE_TEXT_BOX role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PasswordEntry.html)"
    },
    "deprecated": false,
    "insertText": "PasswordEntry {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PasswordEntryBuffer",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PasswordEntryBuffer : Gtk.EntryBuffer\n```\n\n---\n\nA `GtkEntryBuffer` that locks the underlying memory to prevent it\nfrom being swapped to disk.\n\n`GtkPasswordEntry` uses a `GtkPasswordEntryBuffer`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PasswordEntryBuffer.html)"
    },
    "deprecated": false,
    "insertText": "PasswordEntryBuffer {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Picture",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Picture : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe `GtkPicture` widget displays a `GdkPaintable`.\n\n![An example GtkPicture](picture.png)\n\nMany convenience functions are provided to make pictures simple to use.\nFor example, if you want to load an image from a file, and then display\nit, there’s a convenience function to do this:\n\n```c\nGtkWidget *widget = gtk_picture_new_for_filename (\"myfile.png\");\n```\n\nIf the file isn’t loaded successfully, the picture will contain a\n“broken image” icon similar to that used in many web browsers.\nIf you want to handle errors in loading the file yourself,\nfor example by displaying an error message, then load the image with\n[ctor@Gdk.Texture.new_from_file], then create the `GtkPicture` with\n[ctor@Gtk.Picture.new_for_paintable].\n\nSometimes an application will want to avoid depending on external data\nfiles, such as image files. See the documentation of `GResource` for details.\nIn this case, [ctor@Gtk.Picture.new_for_resource] and\n[method@Gtk.Picture.set_resource] should be used.\n\n`GtkPicture` displays an image at its natural size. See [class@Gtk.Image]\nif you want to display a fixed-size image, such as an icon.\n\n## Sizing the paintable\n\nYou can influence how the paintable is displayed inside the `GtkPicture`\nby changing [property@Gtk.Picture:content-fit]. See [enum@Gtk.ContentFit]\nfor details. [property@Gtk.Picture:can-shrink] can be unset to make sure\nthat paintables are never made smaller than their ideal size - but\nbe careful if you do not know the size of the paintable in use (like\nwhen displaying user-loaded images). This can easily cause the picture to\ngrow larger than the screen. And [property@Gtk.Widget:halign] and\n[property@Gtk.Widget:valign] can be used to make sure the paintable doesn't\nfill all available space but is instead displayed at its original size.\n\n## CSS nodes\n\n`GtkPicture` has a single CSS node with the name `picture`.\n\n## Accessibility\n\n`GtkPicture` uses the `GTK_ACCESSIBLE_ROLE_IMG` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Picture.html)"
    },
    "deprecated": false,
    "insertText": "Picture {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Popover",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Popover : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.ShortcutManager\n```\n\n---\n\n`GtkPopover` is a bubble-like context popup.\n\n![An example GtkPopover](popover.png)\n\nIt is primarily meant to provide context-dependent information\nor options. Popovers are attached to a parent widget. By default,\nthey point to the whole widget area, although this behavior can be\nchanged with [method@Gtk.Popover.set_pointing_to].\n\nThe position of a popover relative to the widget it is attached to\ncan also be changed with [method@Gtk.Popover.set_position]\n\nBy default, `GtkPopover` performs a grab, in order to ensure input\nevents get redirected to it while it is shown, and also so the popover\nis dismissed in the expected situations (clicks outside the popover,\nor the Escape key being pressed). If no such modal behavior is desired\non a popover, [method@Gtk.Popover.set_autohide] may be called on it to\ntweak its behavior.\n\n## GtkPopover as menu replacement\n\n`GtkPopover` is often used to replace menus. The best was to do this\nis to use the [class@Gtk.PopoverMenu] subclass which supports being\npopulated from a `GMenuModel` with [ctor@Gtk.PopoverMenu.new_from_model].\n\n```xml\n<section>\n  <attribute name=\"display-hint\">horizontal-buttons</attribute>\n  <item>\n    <attribute name=\"label\">Cut</attribute>\n    <attribute name=\"action\">app.cut</attribute>\n    <attribute name=\"verb-icon\">edit-cut-symbolic</attribute>\n  </item>\n  <item>\n    <attribute name=\"label\">Copy</attribute>\n    <attribute name=\"action\">app.copy</attribute>\n    <attribute name=\"verb-icon\">edit-copy-symbolic</attribute>\n  </item>\n  <item>\n    <attribute name=\"label\">Paste</attribute>\n    <attribute name=\"action\">app.paste</attribute>\n    <attribute name=\"verb-icon\">edit-paste-symbolic</attribute>\n  </item>\n</section>\n```\n\n# CSS nodes\n\n```\npopover.background[.menu]\n├── arrow\n╰── contents\n    ╰── <child>\n```\n\n`GtkPopover` has a main node with name `popover`, an arrow with name `arrow`,\nand another node for the content named `contents`. The `popover` node always\ngets the `.background` style class. It also gets the `.menu` style class\nif the popover is menu-like, e.g. is a [class@Gtk.PopoverMenu].\n\nParticular uses of `GtkPopover`, such as touch selection popups or\nmagnifiers in `GtkEntry` or `GtkTextView` get style classes like\n`.touch-selection` or `.magnifier` to differentiate from plain popovers.\n\nWhen styling a popover directly, the `popover` node should usually\nnot have any background. The visible part of the popover can have\na shadow. To specify it in CSS, set the box-shadow of the `contents` node.\n\nNote that, in order to accomplish appropriate arrow visuals, `GtkPopover`\nuses custom drawing for the `arrow` node. This makes it possible for the\narrow to change its shape dynamically, but it also limits the possibilities\nof styling it using CSS. In particular, the `arrow` gets drawn over the\n`content` node's border and shadow, so they look like one shape, which\nmeans that the border width of the `content` node and the `arrow` node should\nbe the same. The arrow also does not support any border shape other than\nsolid, no border-radius, only one border width (border-bottom-width is\nused) and no box-shadow.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Popover.html)"
    },
    "deprecated": false,
    "insertText": "Popover {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PopoverMenu",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PopoverMenu : Gtk.Popover implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.ShortcutManager\n```\n\n---\n\n`GtkPopoverMenu` is a subclass of `GtkPopover` that implements menu\nbehavior.\n\n![An example GtkPopoverMenu](menu.png)\n\n`GtkPopoverMenu` treats its children like menus and allows switching\nbetween them. It can open submenus as traditional, nested submenus,\nor in a more touch-friendly sliding fashion.\nThe property [property@Gtk.PopoverMenu:flags] controls this appearance.\n\n`GtkPopoverMenu` is meant to be used primarily with menu models,\nusing [ctor@Gtk.PopoverMenu.new_from_model]. If you need to put\nother widgets such as a `GtkSpinButton` or a `GtkSwitch` into a popover,\nyou can use [method@Gtk.PopoverMenu.add_child].\n\nFor more dialog-like behavior, use a plain `GtkPopover`.\n\n## Menu models\n\nThe XML format understood by `GtkBuilder` for `GMenuModel` consists\nof a toplevel `<menu>` element, which contains one or more `<item>`\nelements. Each `<item>` element contains `<attribute>` and `<link>`\nelements with a mandatory name attribute. `<link>` elements have the\nsame content model as `<menu>`. Instead of `<link name=\"submenu\">`\nor `<link name=\"section\">`, you can use `<submenu>` or `<section>`\nelements.\n\n```xml\n<menu id='app-menu'>\n  <section>\n    <item>\n      <attribute name='label' translatable='yes'>_New Window</attribute>\n      <attribute name='action'>app.new</attribute>\n    </item>\n    <item>\n      <attribute name='label' translatable='yes'>_About Sunny</attribute>\n      <attribute name='action'>app.about</attribute>\n    </item>\n    <item>\n      <attribute name='label' translatable='yes'>_Quit</attribute>\n      <attribute name='action'>app.quit</attribute>\n    </item>\n  </section>\n</menu>\n```\n\nAttribute values can be translated using gettext, like other `GtkBuilder`\ncontent. `<attribute>` elements can be marked for translation with a\n`translatable=\"yes\"` attribute. It is also possible to specify message\ncontext and translator comments, using the context and comments attributes.\nTo make use of this, the `GtkBuilder` must have been given the gettext\ndomain to use.\n\nThe following attributes are used when constructing menu items:\n\n- \"label\": a user-visible string to display\n- \"use-markup\": whether the text in the menu item includes [Pango markup](https://docs.gtk.org/Pango/pango_markup.html)\n- \"action\": the prefixed name of the action to trigger\n- \"target\": the parameter to use when activating the action\n- \"icon\" and \"verb-icon\": names of icons that may be displayed\n- \"submenu-action\": name of an action that may be used to track\n     whether a submenu is open\n- \"hidden-when\": a string used to determine when the item will be hidden.\n     Possible values include \"action-disabled\", \"action-missing\", \"macos-menubar\".\n     This is mainly useful for exported menus, see [method@Gtk.Application.set_menubar].\n- \"custom\": a string used to match against the ID of a custom child added with\n     [method@Gtk.PopoverMenu.add_child], [method@Gtk.PopoverMenuBar.add_child],\n     or in the ui file with `<child type=\"ID\">`.\n\nThe following attributes are used when constructing sections:\n\n- \"label\": a user-visible string to use as section heading\n- \"display-hint\": a string used to determine special formatting for the section.\n    Possible values include \"horizontal-buttons\", \"circular-buttons\" and\n    \"inline-buttons\". They all indicate that section should be\n    displayed as a horizontal row of buttons.\n- \"text-direction\": a string used to determine the `GtkTextDirection` to use\n    when \"display-hint\" is set to \"horizontal-buttons\". Possible values\n    include \"rtl\", \"ltr\", and \"none\".\n\nThe following attributes are used when constructing submenus:\n\n- \"label\": a user-visible string to display\n- \"icon\": icon name to display\n\nMenu items will also show accelerators, which are usually associated\nwith actions via [method@Gtk.Application.set_accels_for_action],\n[method@WidgetClass.add_binding_action] or\n[method@Gtk.ShortcutController.add_shortcut].\n\n# CSS Nodes\n\n`GtkPopoverMenu` is just a subclass of `GtkPopover` that adds custom content\nto it, therefore it has the same CSS nodes. It is one of the cases that add\na `.menu` style class to the main `popover` node.\n\nMenu items have nodes with name `button` and class `.model`. If a section\ndisplay-hint is set, the section gets a node `box` with class `horizontal`\nplus a class with the same text as the display hint. Note that said box may\nnot be the direct ancestor of the item `button`s. Thus, for example, to style\nitems in an `inline-buttons` section, select `.inline-buttons button.model`.\nOther things that may be of interest to style in menus include `label` nodes.\n\n# Accessibility\n\n`GtkPopoverMenu` uses the %GTK_ACCESSIBLE_ROLE_MENU role, and its\nitems use the %GTK_ACCESSIBLE_ROLE_MENU_ITEM,\n%GTK_ACCESSIBLE_ROLE_MENU_ITEM_CHECKBOX or\n%GTK_ACCESSIBLE_ROLE_MENU_ITEM_RADIO roles, depending on the\naction they are connected to.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PopoverMenu.html)"
    },
    "deprecated": false,
    "insertText": "PopoverMenu {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PopoverMenuBar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PopoverMenuBar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkPopoverMenuBar` presents a horizontal bar of items that pop\nup popover menus when clicked.\n\n![An example GtkPopoverMenuBar](menubar.png)\n\nThe only way to create instances of `GtkPopoverMenuBar` is\nfrom a `GMenuModel`.\n\n# CSS nodes\n\n```\nmenubar\n├── item[.active]\n┊   ╰── popover\n╰── item\n    ╰── popover\n```\n\n`GtkPopoverMenuBar` has a single CSS node with name menubar, below which\neach item has its CSS node, and below that the corresponding popover.\n\nThe item whose popover is currently open gets the .active\nstyle class.\n\n# Accessibility\n\n`GtkPopoverMenuBar` uses the %GTK_ACCESSIBLE_ROLE_MENU_BAR role,\nthe menu items use the %GTK_ACCESSIBLE_ROLE_MENU_ITEM role and\nthe menus use the %GTK_ACCESSIBLE_ROLE_MENU role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PopoverMenuBar.html)"
    },
    "deprecated": false,
    "insertText": "PopoverMenuBar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PrintContext",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PrintContext : GObject.Object\n```\n\n---\n\nA `GtkPrintContext` encapsulates context information that is required when\ndrawing pages for printing.\n\nThis includes the cairo context and important parameters like page size\nand resolution. It also lets you easily create [class@Pango.Layout] and\n[class@Pango.Context] objects that match the font metrics of the cairo surface.\n\n`GtkPrintContext` objects get passed to the\n[signal@Gtk.PrintOperation::begin-print],\n[signal@Gtk.PrintOperation::end-print],\n[signal@Gtk.PrintOperation::request-page-setup] and\n[signal@Gtk.PrintOperation::draw-page] signals on the\n[class@Gtk.PrintOperation] object.\n\n## Using GtkPrintContext in a ::draw-page callback\n\n```c\nstatic void\ndraw_page (GtkPrintOperation *operation,\n           GtkPrintContext   *context,\n           int                page_nr)\n{\n  cairo_t *cr;\n  PangoLayout *layout;\n  PangoFontDescription *desc;\n\n  cr = gtk_print_context_get_cairo_context (context);\n\n  // Draw a red rectangle, as wide as the paper (inside the margins)\n  cairo_set_source_rgb (cr, 1.0, 0, 0);\n  cairo_rectangle (cr, 0, 0, gtk_print_context_get_width (context), 50);\n\n  cairo_fill (cr);\n\n  // Draw some lines\n  cairo_move_to (cr, 20, 10);\n  cairo_line_to (cr, 40, 20);\n  cairo_arc (cr, 60, 60, 20, 0, M_PI);\n  cairo_line_to (cr, 80, 20);\n\n  cairo_set_source_rgb (cr, 0, 0, 0);\n  cairo_set_line_width (cr, 5);\n  cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);\n  cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);\n\n  cairo_stroke (cr);\n\n  // Draw some text\n  layout = gtk_print_context_create_pango_layout (context);\n  pango_layout_set_text (layout, \"Hello World! Printing is easy\", -1);\n  desc = pango_font_description_from_string (\"sans 28\");\n  pango_layout_set_font_description (layout, desc);\n  pango_font_description_free (desc);\n\n  cairo_move_to (cr, 30, 20);\n  pango_cairo_layout_path (cr, layout);\n\n  // Font Outline\n  cairo_set_source_rgb (cr, 0.93, 1.0, 0.47);\n  cairo_set_line_width (cr, 0.5);\n  cairo_stroke_preserve (cr);\n\n  // Font Fill\n  cairo_set_source_rgb (cr, 0, 0.0, 1.0);\n  cairo_fill (cr);\n\n  g_object_unref (layout);\n}\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PrintContext.html)"
    },
    "deprecated": false,
    "insertText": "PrintContext {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PrintDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PrintDialog : GObject.Object\n```\n\n---\n\nA `GtkPrintDialog` object collects the arguments that\nare needed to present a print dialog to the user, such\nas a title for the dialog and whether it should be modal.\n\nThe dialog is shown with the [method@Gtk.PrintDialog.setup] function.\nThe actual printing can be done with [method@Gtk.PrintDialog.print] or\n[method@Gtk.PrintDialog.print_file]. These APIs follows the GIO async pattern,\nand the results can be obtained by calling the corresponding finish methods.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PrintDialog.html)"
    },
    "deprecated": false,
    "insertText": "PrintDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PrintJob",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PrintJob : GObject.Object\n```\n\n---\n\nA `GtkPrintJob` object represents a job that is sent to a printer.\n\nYou only need to deal directly with print jobs if you use the\nnon-portable [class@Gtk.PrintUnixDialog] API.\n\nUse [method@Gtk.PrintJob.get_surface] to obtain the cairo surface\nonto which the pages must be drawn. Use [method@Gtk.PrintJob.send]\nto send the finished job to the printer. If you don’t use cairo\n`GtkPrintJob` also supports printing of manually generated PostScript,\nvia [method@Gtk.PrintJob.set_source_file].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PrintJob.html)"
    },
    "deprecated": false,
    "insertText": "PrintJob {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PrintOperation",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PrintOperation : GObject.Object implements Gtk.PrintOperationPreview\n```\n\n---\n\n`GtkPrintOperation` is the high-level, portable printing API.\n\nIt looks a bit different than other GTK dialogs such as the\n`GtkFileChooser`, since some platforms don’t expose enough\ninfrastructure to implement a good print dialog. On such\nplatforms, `GtkPrintOperation` uses the native print dialog.\nOn platforms which do not provide a native print dialog, GTK\nuses its own, see [class@Gtk.PrintUnixDialog].\n\nThe typical way to use the high-level printing API is to create\na `GtkPrintOperation` object with [ctor@Gtk.PrintOperation.new]\nwhen the user selects to print. Then you set some properties on it,\ne.g. the page size, any [class@Gtk.PrintSettings] from previous print\noperations, the number of pages, the current page, etc.\n\nThen you start the print operation by calling [method@Gtk.PrintOperation.run].\nIt will then show a dialog, let the user select a printer and options.\nWhen the user finished the dialog, various signals will be emitted on\nthe `GtkPrintOperation`, the main one being\n[signal@Gtk.PrintOperation::draw-page], which you are supposed to handle\nand render the page on the provided [class@Gtk.PrintContext] using Cairo.\n\n# The high-level printing API\n\n```c\nstatic GtkPrintSettings *settings = NULL;\n\nstatic void\ndo_print (void)\n{\n  GtkPrintOperation *print;\n  GtkPrintOperationResult res;\n\n  print = gtk_print_operation_new ();\n\n  if (settings != NULL)\n    gtk_print_operation_set_print_settings (print, settings);\n\n  g_signal_connect (print, \"begin_print\", G_CALLBACK (begin_print), NULL);\n  g_signal_connect (print, \"draw_page\", G_CALLBACK (draw_page), NULL);\n\n  res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,\n                                 GTK_WINDOW (main_window), NULL);\n\n  if (res == GTK_PRINT_OPERATION_RESULT_APPLY)\n    {\n      if (settings != NULL)\n        g_object_unref (settings);\n      settings = g_object_ref (gtk_print_operation_get_print_settings (print));\n    }\n\n  g_object_unref (print);\n}\n```\n\nBy default `GtkPrintOperation` uses an external application to do\nprint preview. To implement a custom print preview, an application\nmust connect to the preview signal. The functions\n[method@Gtk.PrintOperationPreview.render_page],\n[method@Gtk.PrintOperationPreview.end_preview] and\n[method@Gtk.PrintOperationPreview.is_selected]\nare useful when implementing a print preview.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PrintOperation.html)"
    },
    "deprecated": false,
    "insertText": "PrintOperation {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PrintSettings",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PrintSettings : GObject.Object\n```\n\n---\n\nA `GtkPrintSettings` object represents the settings of a print dialog in\na system-independent way.\n\nThe main use for this object is that once you’ve printed you can get a\nsettings object that represents the settings the user chose, and the next\ntime you print you can pass that object in so that the user doesn’t have\nto re-set all his settings.\n\nIts also possible to enumerate the settings so that you can easily save\nthe settings for the next time your app runs, or even store them in a\ndocument. The predefined keys try to use shared values as much as possible\nso that moving such a document between systems still works.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PrintSettings.html)"
    },
    "deprecated": false,
    "insertText": "PrintSettings {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PrintUnixDialog",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PrintUnixDialog : Gtk.Dialog implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\n`GtkPrintUnixDialog` implements a print dialog for platforms\nwhich don’t provide a native print dialog, like Unix.\n\n![An example GtkPrintUnixDialog](printdialog.png)\n\nIt can be used very much like any other GTK dialog, at the cost of\nthe portability offered by the high-level printing API with\n[class@Gtk.PrintOperation].\n\nIn order to print something with `GtkPrintUnixDialog`, you need to\nuse [method@Gtk.PrintUnixDialog.get_selected_printer] to obtain a\n[class@Gtk.Printer] object and use it to construct a [class@Gtk.PrintJob]\nusing [ctor@Gtk.PrintJob.new].\n\n`GtkPrintUnixDialog` uses the following response values:\n\n- %GTK_RESPONSE_OK: for the “Print” button\n- %GTK_RESPONSE_APPLY: for the “Preview” button\n- %GTK_RESPONSE_CANCEL: for the “Cancel” button\n\n# GtkPrintUnixDialog as GtkBuildable\n\nThe `GtkPrintUnixDialog` implementation of the `GtkBuildable` interface\nexposes its @notebook internal children with the name “notebook”.\n\nAn example of a `GtkPrintUnixDialog` UI definition fragment:\n\n```xml\n<object class=\"GtkPrintUnixDialog\" id=\"dialog1\">\n  <child internal-child=\"notebook\">\n    <object class=\"GtkNotebook\" id=\"notebook\">\n      <child>\n        <object type=\"GtkNotebookPage\">\n          <property name=\"tab_expand\">False</property>\n          <property name=\"tab_fill\">False</property>\n          <property name=\"tab\">\n            <object class=\"GtkLabel\" id=\"tablabel\">\n              <property name=\"label\">Tab label</property>\n            </object>\n          </property>\n          <property name=\"child\">\n            <object class=\"GtkLabel\" id=\"tabcontent\">\n              <property name=\"label\">Content on notebook tab</property>\n            </object>\n          </property>\n        </object>\n      </child>\n    </object>\n  </child>\n</object>\n```\n\n# CSS nodes\n\n`GtkPrintUnixDialog` has a single CSS node with name window. The style classes\ndialog and print are added.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PrintUnixDialog.html)"
    },
    "deprecated": false,
    "insertText": "PrintUnixDialog {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Printer",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Printer : GObject.Object\n```\n\n---\n\nA `GtkPrinter` object represents a printer.\n\nYou only need to deal directly with printers if you use the\nnon-portable [class@Gtk.PrintUnixDialog] API.\n\nA `GtkPrinter` allows to get status information about the printer,\nsuch as its description, its location, the number of queued jobs,\netc. Most importantly, a `GtkPrinter` object can be used to create\na [class@Gtk.PrintJob] object, which lets you print to the printer.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Printer.html)"
    },
    "deprecated": false,
    "insertText": "Printer {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ProgressBar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ProgressBar : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkProgressBar` is typically used to display the progress of a long\nrunning operation.\n\nIt provides a visual clue that processing is underway. `GtkProgressBar`\ncan be used in two different modes: percentage mode and activity mode.\n\n![An example GtkProgressBar](progressbar.png)\n\nWhen an application can determine how much work needs to take place\n(e.g. read a fixed number of bytes from a file) and can monitor its\nprogress, it can use the `GtkProgressBar` in percentage mode and the\nuser sees a growing bar indicating the percentage of the work that\nhas been completed. In this mode, the application is required to call\n[method@Gtk.ProgressBar.set_fraction] periodically to update the progress bar.\n\nWhen an application has no accurate way of knowing the amount of work\nto do, it can use the `GtkProgressBar` in activity mode, which shows\nactivity by a block moving back and forth within the progress area. In\nthis mode, the application is required to call [method@Gtk.ProgressBar.pulse]\nperiodically to update the progress bar.\n\nThere is quite a bit of flexibility provided to control the appearance\nof the `GtkProgressBar`. Functions are provided to control the orientation\nof the bar, optional text can be displayed along with the bar, and the\nstep size used in activity mode can be set.\n\n# CSS nodes\n\n```\nprogressbar[.osd]\n├── [text]\n╰── trough[.empty][.full]\n    ╰── progress[.pulse]\n```\n\n`GtkProgressBar` has a main CSS node with name progressbar and subnodes with\nnames text and trough, of which the latter has a subnode named progress. The\ntext subnode is only present if text is shown. The progress subnode has the\nstyle class .pulse when in activity mode. It gets the style classes .left,\n.right, .top or .bottom added when the progress 'touches' the corresponding\nend of the GtkProgressBar. The .osd class on the progressbar node is for use\nin overlays like the one Epiphany has for page loading progress.\n\n# Accessibility\n\n`GtkProgressBar` uses the %GTK_ACCESSIBLE_ROLE_PROGRESS_BAR role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ProgressBar.html)"
    },
    "deprecated": false,
    "insertText": "ProgressBar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "PropertyExpression",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.PropertyExpression : Gtk.Expression\n```\n\n---\n\nA `GObject` property value in a `GtkExpression`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.PropertyExpression.html)"
    },
    "deprecated": false,
    "insertText": "PropertyExpression {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Range",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Range : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkRange` is the common base class for widgets which visualize an\nadjustment.\n\nWidgets that are derived from `GtkRange` include\n[class@Gtk.Scale] and [class@Gtk.Scrollbar].\n\nApart from signals for monitoring the parameters of the adjustment,\n`GtkRange` provides properties and methods for setting a\n“fill level” on range widgets. See [method@Gtk.Range.set_fill_level].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Range.html)"
    },
    "deprecated": false,
    "insertText": "Range {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "RecentManager",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.RecentManager : GObject.Object\n```\n\n---\n\n`GtkRecentManager` manages and looks up recently used files.\n\nEach recently used file is identified by its URI, and has meta-data\nassociated to it, like the names and command lines of the applications\nthat have registered it, the number of time each application has\nregistered the same file, the mime type of the file and whether\nthe file should be displayed only by the applications that have\nregistered it.\n\nThe recently used files list is per user.\n\n`GtkRecentManager` acts like a database of all the recently\nused files. You can create new `GtkRecentManager` objects, but\nit is more efficient to use the default manager created by GTK.\n\nAdding a new recently used file is as simple as:\n\n```c\nGtkRecentManager *manager;\n\nmanager = gtk_recent_manager_get_default ();\ngtk_recent_manager_add_item (manager, file_uri);\n```\n\nThe `GtkRecentManager` will try to gather all the needed information\nfrom the file itself through GIO.\n\nLooking up the meta-data associated with a recently used file\ngiven its URI requires calling [method@Gtk.RecentManager.lookup_item]:\n\n```c\nGtkRecentManager *manager;\nGtkRecentInfo *info;\nGError *error = NULL;\n\nmanager = gtk_recent_manager_get_default ();\ninfo = gtk_recent_manager_lookup_item (manager, file_uri, &error);\nif (error)\n  {\n    g_warning (\"Could not find the file: %s\", error->message);\n    g_error_free (error);\n  }\nelse\n {\n   // Use the info object\n   gtk_recent_info_unref (info);\n }\n```\n\nIn order to retrieve the list of recently used files, you can use\n[method@Gtk.RecentManager.get_items], which returns a list of\n[struct@Gtk.RecentInfo].\n\nNote that the maximum age of the recently used files list is\ncontrollable through the [property@Gtk.Settings:gtk-recent-files-max-age]\nproperty.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.RecentManager.html)"
    },
    "deprecated": false,
    "insertText": "RecentManager {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Revealer",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Revealer : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkRevealer` animates the transition of its child from invisible to visible.\n\nThe style of transition can be controlled with\n[method@Gtk.Revealer.set_transition_type].\n\nThese animations respect the [property@Gtk.Settings:gtk-enable-animations]\nsetting.\n\n# CSS nodes\n\n`GtkRevealer` has a single CSS node with name revealer.\nWhen styling `GtkRevealer` using CSS, remember that it only hides its contents,\nnot itself. That means applied margin, padding and borders will be visible even\nwhen the [property@Gtk.Revealer:reveal-child] property is set to %FALSE.\n\n# Accessibility\n\n`GtkRevealer` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.\n\nThe child of `GtkRevealer`, if set, is always available in the accessibility\ntree, regardless of the state of the revealer widget.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Revealer.html)"
    },
    "deprecated": false,
    "insertText": "Revealer {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Scale",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Scale : Gtk.Range implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nA `GtkScale` is a slider control used to select a numeric value.\n\n![An example GtkScale](scales.png)\n\nTo use it, you’ll probably want to investigate the methods on its base\nclass, [class@Gtk.Range], in addition to the methods for `GtkScale` itself.\nTo set the value of a scale, you would normally use [method@Gtk.Range.set_value].\nTo detect changes to the value, you would normally use the\n[signal@Gtk.Range::value-changed] signal.\n\nNote that using the same upper and lower bounds for the `GtkScale` (through\nthe `GtkRange` methods) will hide the slider itself. This is useful for\napplications that want to show an undeterminate value on the scale, without\nchanging the layout of the application (such as movie or music players).\n\n# GtkScale as GtkBuildable\n\n`GtkScale` supports a custom `<marks>` element, which can contain multiple\n`<mark\\>` elements. The “value” and “position” attributes have the same\nmeaning as [method@Gtk.Scale.add_mark] parameters of the same name. If\nthe element is not empty, its content is taken as the markup to show at\nthe mark. It can be translated with the usual ”translatable” and\n“context” attributes.\n\n# CSS nodes\n\n```\nscale[.fine-tune][.marks-before][.marks-after]\n├── [value][.top][.right][.bottom][.left]\n├── marks.top\n│   ├── mark\n│   ┊    ├── [label]\n│   ┊    ╰── indicator\n┊   ┊\n│   ╰── mark\n├── marks.bottom\n│   ├── mark\n│   ┊    ├── indicator\n│   ┊    ╰── [label]\n┊   ┊\n│   ╰── mark\n╰── trough\n    ├── [fill]\n    ├── [highlight]\n    ╰── slider\n```\n\n`GtkScale` has a main CSS node with name scale and a subnode for its contents,\nwith subnodes named trough and slider.\n\nThe main node gets the style class .fine-tune added when the scale is in\n'fine-tuning' mode.\n\nIf the scale has an origin (see [method@Gtk.Scale.set_has_origin]), there is\na subnode with name highlight below the trough node that is used for rendering\nthe highlighted part of the trough.\n\nIf the scale is showing a fill level (see [method@Gtk.Range.set_show_fill_level]),\nthere is a subnode with name fill below the trough node that is used for\nrendering the filled in part of the trough.\n\nIf marks are present, there is a marks subnode before or after the trough\nnode, below which each mark gets a node with name mark. The marks nodes get\neither the .top or .bottom style class.\n\nThe mark node has a subnode named indicator. If the mark has text, it also\nhas a subnode named label. When the mark is either above or left of the\nscale, the label subnode is the first when present. Otherwise, the indicator\nsubnode is the first.\n\nThe main CSS node gets the 'marks-before' and/or 'marks-after' style classes\nadded depending on what marks are present.\n\nIf the scale is displaying the value (see [property@Gtk.Scale:draw-value]),\nthere is subnode with name value. This node will get the .top or .bottom style\nclasses similar to the marks node.\n\n# Accessibility\n\n`GtkScale` uses the %GTK_ACCESSIBLE_ROLE_SLIDER role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Scale.html)"
    },
    "deprecated": false,
    "insertText": "Scale {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ScaleButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ScaleButton : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkScaleButton` provides a button which pops up a scale widget.\n\nThis kind of widget is commonly used for volume controls in multimedia\napplications, and GTK provides a [class@Gtk.VolumeButton] subclass that\nis tailored for this use case.\n\n# CSS nodes\n\n```\nscalebutton.scale\n╰── button.toggle\n    ╰── <icon>\n```\n\n`GtkScaleButton` has a single CSS node with name scalebutton and `.scale`\nstyle class, and contains a `button` node with a `.toggle` style class.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ScaleButton.html)"
    },
    "deprecated": false,
    "insertText": "ScaleButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Scrollbar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Scrollbar : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nThe `GtkScrollbar` widget is a horizontal or vertical scrollbar.\n\n![An example GtkScrollbar](scrollbar.png)\n\nIts position and movement are controlled by the adjustment that is passed to\nor created by [ctor@Gtk.Scrollbar.new]. See [class@Gtk.Adjustment] for more\ndetails. The [property@Gtk.Adjustment:value] field sets the position of the\nthumb and must be between [property@Gtk.Adjustment:lower] and\n[property@Gtk.Adjustment:upper] - [property@Gtk.Adjustment:page-size].\nThe [property@Gtk.Adjustment:page-size] represents the size of the visible\nscrollable area.\n\nThe fields [property@Gtk.Adjustment:step-increment] and\n[property@Gtk.Adjustment:page-increment] fields are added to or subtracted\nfrom the [property@Gtk.Adjustment:value] when the user asks to move by a step\n(using e.g. the cursor arrow keys) or by a page (using e.g. the Page Down/Up\nkeys).\n\n# CSS nodes\n\n```\nscrollbar\n╰── range[.fine-tune]\n    ╰── trough\n        ╰── slider\n```\n\n`GtkScrollbar` has a main CSS node with name scrollbar and a subnode for its\ncontents. The main node gets the .horizontal or .vertical style classes applied,\ndepending on the scrollbar's orientation.\n\nThe range node gets the style class .fine-tune added when the scrollbar is\nin 'fine-tuning' mode.\n\nOther style classes that may be added to scrollbars inside\n[class@Gtk.ScrolledWindow] include the positional classes (.left, .right,\n.top, .bottom) and style classes related to overlay scrolling (.overlay-indicator,\n.dragging, .hovering).\n\n# Accessibility\n\n`GtkScrollbar` uses the %GTK_ACCESSIBLE_ROLE_SCROLLBAR role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Scrollbar.html)"
    },
    "deprecated": false,
    "insertText": "Scrollbar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ScrolledWindow",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ScrolledWindow : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkScrolledWindow` is a container that makes its child scrollable.\n\nIt does so using either internally added scrollbars or externally\nassociated adjustments, and optionally draws a frame around the child.\n\nWidgets with native scrolling support, i.e. those whose classes implement\nthe [iface@Gtk.Scrollable] interface, are added directly. For other types\nof widget, the class [class@Gtk.Viewport] acts as an adaptor, giving\nscrollability to other widgets. [method@Gtk.ScrolledWindow.set_child]\nintelligently accounts for whether or not the added child is a `GtkScrollable`.\nIf it isn’t, then it wraps the child in a `GtkViewport`. Therefore, you can\njust add any child widget and not worry about the details.\n\nIf [method@Gtk.ScrolledWindow.set_child] has added a `GtkViewport` for you,\nit will be automatically removed when you unset the child.\nUnless [property@Gtk.ScrolledWindow:hscrollbar-policy] and\n[property@Gtk.ScrolledWindow:vscrollbar-policy] are %GTK_POLICY_NEVER or\n%GTK_POLICY_EXTERNAL, `GtkScrolledWindow` adds internal `GtkScrollbar` widgets\naround its child. The scroll position of the child, and if applicable the\nscrollbars, is controlled by the [property@Gtk.ScrolledWindow:hadjustment]\nand [property@Gtk.ScrolledWindow:vadjustment] that are associated with the\n`GtkScrolledWindow`. See the docs on [class@Gtk.Scrollbar] for the details,\nbut note that the “step_increment” and “page_increment” fields are only\neffective if the policy causes scrollbars to be present.\n\nIf a `GtkScrolledWindow` doesn’t behave quite as you would like, or\ndoesn’t have exactly the right layout, it’s very possible to set up\nyour own scrolling with `GtkScrollbar` and for example a `GtkGrid`.\n\n# Touch support\n\n`GtkScrolledWindow` has built-in support for touch devices. When a\ntouchscreen is used, swiping will move the scrolled window, and will\nexpose 'kinetic' behavior. This can be turned off with the\n[property@Gtk.ScrolledWindow:kinetic-scrolling] property if it is undesired.\n\n`GtkScrolledWindow` also displays visual 'overshoot' indication when\nthe content is pulled beyond the end, and this situation can be\ncaptured with the [signal@Gtk.ScrolledWindow::edge-overshot] signal.\n\nIf no mouse device is present, the scrollbars will overlaid as\nnarrow, auto-hiding indicators over the content. If traditional\nscrollbars are desired although no mouse is present, this behaviour\ncan be turned off with the [property@Gtk.ScrolledWindow:overlay-scrolling]\nproperty.\n\n# CSS nodes\n\n`GtkScrolledWindow` has a main CSS node with name scrolledwindow.\nIt gets a .frame style class added when [property@Gtk.ScrolledWindow:has-frame]\nis %TRUE.\n\nIt uses subnodes with names overshoot and undershoot to draw the overflow\nand underflow indications. These nodes get the .left, .right, .top or .bottom\nstyle class added depending on where the indication is drawn.\n\n`GtkScrolledWindow` also sets the positional style classes (.left, .right,\n.top, .bottom) and style classes related to overlay scrolling\n(.overlay-indicator, .dragging, .hovering) on its scrollbars.\n\nIf both scrollbars are visible, the area where they meet is drawn\nwith a subnode named junction.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkScrolledWindow` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nStarting from GTK 4.12, `GtkScrolledWindow` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ScrolledWindow.html)"
    },
    "deprecated": false,
    "insertText": "ScrolledWindow {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SearchBar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SearchBar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkSearchBar` is a container made to have a search entry.\n\n![An example GtkSearchBar](search-bar.png)\n\nIt can also contain additional widgets, such as drop-down menus,\nor buttons.  The search bar would appear when a search is started\nthrough typing on the keyboard, or the application’s search mode\nis toggled on.\n\nFor keyboard presses to start a search, the search bar must be told\nof a widget to capture key events from through\n[method@Gtk.SearchBar.set_key_capture_widget]. This widget will\ntypically be the top-level window, or a parent container of the\nsearch bar. Common shortcuts such as Ctrl+F should be handled as an\napplication action, or through the menu items.\n\nYou will also need to tell the search bar about which entry you\nare using as your search entry using [method@Gtk.SearchBar.connect_entry].\n\n## Creating a search bar\n\nThe following example shows you how to create a more complex search\nentry.\n\n[A simple example](https://gitlab.gnome.org/GNOME/gtk/tree/main/examples/search-bar.c)\n\n# CSS nodes\n\n```\nsearchbar\n╰── revealer\n    ╰── box\n         ├── [child]\n         ╰── [button.close]\n```\n\n`GtkSearchBar` has a main CSS node with name searchbar. It has a child\nnode with name revealer that contains a node with name box. The box node\ncontains both the CSS node of the child widget as well as an optional button\nnode which gets the .close style class applied.\n\n# Accessibility\n\n`GtkSearchBar` uses the %GTK_ACCESSIBLE_ROLE_SEARCH role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SearchBar.html)"
    },
    "deprecated": false,
    "insertText": "SearchBar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SearchEntry",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SearchEntry : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable\n```\n\n---\n\n`GtkSearchEntry` is an entry widget that has been tailored for use\nas a search entry.\n\nThe main API for interacting with a `GtkSearchEntry` as entry\nis the `GtkEditable` interface.\n\n![An example GtkSearchEntry](search-entry.png)\n\nIt will show an inactive symbolic “find” icon when the search\nentry is empty, and a symbolic “clear” icon when there is text.\nClicking on the “clear” icon will empty the search entry.\n\nTo make filtering appear more reactive, it is a good idea to\nnot react to every change in the entry text immediately, but\nonly after a short delay. To support this, `GtkSearchEntry`\nemits the [signal@Gtk.SearchEntry::search-changed] signal which\ncan be used instead of the [signal@Gtk.Editable::changed] signal.\n\nThe [signal@Gtk.SearchEntry::previous-match],\n[signal@Gtk.SearchEntry::next-match] and\n[signal@Gtk.SearchEntry::stop-search] signals can be used to\nimplement moving between search results and ending the search.\n\nOften, `GtkSearchEntry` will be fed events by means of being\nplaced inside a [class@Gtk.SearchBar]. If that is not the case,\nyou can use [method@Gtk.SearchEntry.set_key_capture_widget] to\nlet it capture key input from another widget.\n\n`GtkSearchEntry` provides only minimal API and should be used with\nthe [iface@Gtk.Editable] API.\n\n## CSS Nodes\n\n```\nentry.search\n╰── text\n```\n\n`GtkSearchEntry` has a single CSS node with name entry that carries\na `.search` style class, and the text node is a child of that.\n\n## Accessibility\n\n`GtkSearchEntry` uses the %GTK_ACCESSIBLE_ROLE_SEARCH_BOX role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SearchEntry.html)"
    },
    "deprecated": false,
    "insertText": "SearchEntry {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SelectionFilterModel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SelectionFilterModel : GObject.Object implements Gio.ListModel\n```\n\n---\n\n`GtkSelectionFilterModel` is a list model that presents the selection from\na `GtkSelectionModel`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SelectionFilterModel.html)"
    },
    "deprecated": false,
    "insertText": "SelectionFilterModel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Separator",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Separator : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkSeparator` is a horizontal or vertical separator widget.\n\n![An example GtkSeparator](separator.png)\n\nA `GtkSeparator` can be used to group the widgets within a window.\nIt displays a line with a shadow to make it appear sunken into the\ninterface.\n\n# CSS nodes\n\n`GtkSeparator` has a single CSS node with name separator. The node\ngets one of the .horizontal or .vertical style classes.\n\n# Accessibility\n\n`GtkSeparator` uses the %GTK_ACCESSIBLE_ROLE_SEPARATOR role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Separator.html)"
    },
    "deprecated": false,
    "insertText": "Separator {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Settings",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Settings : GObject.Object implements Gtk.StyleProvider\n```\n\n---\n\n`GtkSettings` provides a mechanism to share global settings between\napplications.\n\nOn the X window system, this sharing is realized by an\n[XSettings](http://www.freedesktop.org/wiki/Specifications/xsettings-spec)\nmanager that is usually part of the desktop environment, along with\nutilities that let the user change these settings.\n\nOn Wayland, the settings are obtained either via a settings portal,\nor by reading desktop settings from [class@Gio.Settings].\n\nOn macOS, the settings are obtained from `NSUserDefaults`.\n\nIn the absence of these sharing mechanisms, GTK reads default values for\nsettings from `settings.ini` files in `/etc/gtk-4.0`, `$XDG_CONFIG_DIRS/gtk-4.0`\nand `$XDG_CONFIG_HOME/gtk-4.0`. These files must be valid key files (see\n`GKeyFile`), and have a section called Settings. Themes can also provide\ndefault values for settings by installing a `settings.ini` file\nnext to their `gtk.css` file.\n\nApplications can override system-wide settings by setting the property\nof the `GtkSettings` object with g_object_set(). This should be restricted\nto special cases though; `GtkSettings` are not meant as an application\nconfiguration facility.\n\nThere is one `GtkSettings` instance per display. It can be obtained with\n[func@Gtk.Settings.get_for_display], but in many cases, it is more\nconvenient to use [method@Gtk.Widget.get_settings].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Settings.html)"
    },
    "deprecated": false,
    "insertText": "Settings {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Shortcut",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Shortcut : GObject.Object\n```\n\n---\n\nA `GtkShortcut` describes a keyboard shortcut.\n\nIt contains a description of how to trigger the shortcut via a\n[class@Gtk.ShortcutTrigger] and a way to activate the shortcut\non a widget via a [class@Gtk.ShortcutAction].\n\nThe actual work is usually done via [class@Gtk.ShortcutController],\nwhich decides if and when to activate a shortcut. Using that controller\ndirectly however is rarely necessary as various higher level\nconvenience APIs exist on `GtkWidget`s that make it easier to use\nshortcuts in GTK.\n\n`GtkShortcut` does provide functionality to make it easy for users\nto work with shortcuts, either by providing informational strings\nfor display purposes or by allowing shortcuts to be configured.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Shortcut.html)"
    },
    "deprecated": false,
    "insertText": "Shortcut {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutAction",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutAction : GObject.Object\n```\n\n---\n\n`GtkShortcutAction` encodes an action that can be triggered by a\nkeyboard shortcut.\n\n`GtkShortcutActions` contain functions that allow easy presentation\nto end users as well as being printed for debugging.\n\nAll `GtkShortcutActions` are immutable, you can only specify their\nproperties during construction. If you want to change a action, you\nhave to replace it with a new one. If you need to pass arguments to\nan action, these are specified by the higher-level `GtkShortcut` object.\n\nTo activate a `GtkShortcutAction` manually, [method@Gtk.ShortcutAction.activate]\ncan be called.\n\nGTK provides various actions:\n\n - [class@Gtk.MnemonicAction]: a shortcut action that calls\n   gtk_widget_mnemonic_activate()\n - [class@Gtk.CallbackAction]: a shortcut action that invokes\n   a given callback\n - [class@Gtk.SignalAction]: a shortcut action that emits a\n   given signal\n - [class@Gtk.ActivateAction]: a shortcut action that calls\n   gtk_widget_activate()\n - [class@Gtk.NamedAction]: a shortcut action that calls\n   gtk_widget_activate_action()\n - [class@Gtk.NothingAction]: a shortcut action that does nothing\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutAction.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutAction {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutController",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutController : Gtk.EventController implements Gio.ListModel, Gtk.Buildable\n```\n\n---\n\n`GtkShortcutController` is an event controller that manages shortcuts.\n\nMost common shortcuts are using this controller implicitly, e.g. by\nadding a mnemonic underline to a [class@Gtk.Label], or by installing a key\nbinding using [method@Gtk.WidgetClass.add_binding], or by adding accelerators\nto global actions using [method@Gtk.Application.set_accels_for_action].\n\nBut it is possible to create your own shortcut controller, and add\nshortcuts to it.\n\n`GtkShortcutController` implements [iface@Gio.ListModel] for querying the\nshortcuts that have been added to it.\n\n# GtkShortcutController as GtkBuildable\n\n`GtkShortcutController`s can be created in [class@Gtk.Builder] ui files, to set up\nshortcuts in the same place as the widgets.\n\nAn example of a UI definition fragment with `GtkShortcutController`:\n```xml\n  <object class='GtkButton'>\n    <child>\n      <object class='GtkShortcutController'>\n        <property name='scope'>managed</property>\n        <child>\n          <object class='GtkShortcut'>\n            <property name='trigger'>&lt;Control&gt;k</property>\n            <property name='action'>activate</property>\n          </object>\n        </child>\n      </object>\n    </child>\n  </object>\n```\n\nThis example creates a [class@Gtk.ActivateAction] for triggering the\n`activate` signal of the [class@Gtk.Button]. See [ctor@Gtk.ShortcutAction.parse_string]\nfor the syntax for other kinds of [class@Gtk.ShortcutAction]. See\n[ctor@Gtk.ShortcutTrigger.parse_string] to learn more about the syntax\nfor triggers.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutController.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutController {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutLabel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutLabel : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkShortcutLabel` displays a single keyboard shortcut or gesture.\n\nThe main use case for `GtkShortcutLabel` is inside a [class@Gtk.ShortcutsWindow].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutLabel.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutLabel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutTrigger",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutTrigger : GObject.Object\n```\n\n---\n\n`GtkShortcutTrigger` tracks how a `GtkShortcut` should be activated.\n\nTo find out if a `GtkShortcutTrigger` triggers, you can call\n[method@Gtk.ShortcutTrigger.trigger] on a `GdkEvent`.\n\n`GtkShortcutTriggers` contain functions that allow easy presentation\nto end users as well as being printed for debugging.\n\nAll `GtkShortcutTriggers` are immutable, you can only specify their\nproperties during construction. If you want to change a trigger, you\nhave to replace it with a new one.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutTrigger.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutTrigger {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutsGroup",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutsGroup : Gtk.Box implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nA `GtkShortcutsGroup` represents a group of related keyboard shortcuts\nor gestures.\n\nThe group has a title. It may optionally be associated with a view\nof the application, which can be used to show only relevant shortcuts\ndepending on the application context.\n\nThis widget is only meant to be used with [class@Gtk.ShortcutsWindow].\n\nThe recommended way to construct a `GtkShortcutsGroup` is with\n[class@Gtk.Builder], by using the `<child>` tag to populate a\n`GtkShortcutsGroup` with one or more [class@Gtk.ShortcutsShortcut]\ninstances.\n\nIf you need to add a shortcut programmatically, use\n[method@Gtk.ShortcutsGroup.add_shortcut].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutsGroup.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutsGroup {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutsSection",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutsSection : Gtk.Box implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nA `GtkShortcutsSection` collects all the keyboard shortcuts and gestures\nfor a major application mode.\n\nIf your application needs multiple sections, you should give each\nsection a unique [property@Gtk.ShortcutsSection:section-name] and\na [property@Gtk.ShortcutsSection:title] that can be shown in the\nsection selector of the [class@Gtk.ShortcutsWindow].\n\nThe [property@Gtk.ShortcutsSection:max-height] property can be used\nto influence how the groups in the section are distributed over pages\nand columns.\n\nThis widget is only meant to be used with [class@Gtk.ShortcutsWindow].\n\nThe recommended way to construct a `GtkShortcutsSection` is with\n[class@Gtk.Builder], by using the `<child>` tag to populate a\n`GtkShortcutsSection` with one or more [class@Gtk.ShortcutsGroup]\ninstances, which in turn contain one or more [class@Gtk.ShortcutsShortcut]\nobjects.\n\nIf you need to add a group programmatically, use\n[method@Gtk.ShortcutsSection.add_group].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutsSection.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutsSection {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutsShortcut",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutsShortcut : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkShortcutsShortcut` represents a single keyboard shortcut or gesture\nwith a short text.\n\nThis widget is only meant to be used with `GtkShortcutsWindow`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutsShortcut.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutsShortcut {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ShortcutsWindow",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ShortcutsWindow : Gtk.Window implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\nA `GtkShortcutsWindow` shows information about the keyboard shortcuts\nand gestures of an application.\n\nThe shortcuts can be grouped, and you can have multiple sections in this\nwindow, corresponding to the major modes of your application.\n\nAdditionally, the shortcuts can be filtered by the current view, to avoid\nshowing information that is not relevant in the current application context.\n\nThe recommended way to construct a `GtkShortcutsWindow` is with\n[class@Gtk.Builder], by using the `<child>` tag to populate a\n`GtkShortcutsWindow` with one or more [class@Gtk.ShortcutsSection] objects,\nwhich contain one or more [class@Gtk.ShortcutsGroup] instances, which, in turn,\ncontain [class@Gtk.ShortcutsShortcut] instances.\n\nIf you need to add a section programmatically, use [method@Gtk.ShortcutsWindow.add_section]\ninstead of [method@Gtk.Window.set_child], as the shortcuts window manages\nits children directly.\n\n# A simple example:\n\n![](gedit-shortcuts.png)\n\nThis example has as single section. As you can see, the shortcut groups\nare arranged in columns, and spread across several pages if there are too\nmany to find on a single page.\n\nThe .ui file for this example can be found [here](https://gitlab.gnome.org/GNOME/gtk/tree/main/demos/gtk-demo/shortcuts-gedit.ui).\n\n# An example with multiple views:\n\n![](clocks-shortcuts.png)\n\nThis example shows a `GtkShortcutsWindow` that has been configured to show only\nthe shortcuts relevant to the \"stopwatch\" view.\n\nThe .ui file for this example can be found [here](https://gitlab.gnome.org/GNOME/gtk/tree/main/demos/gtk-demo/shortcuts-clocks.ui).\n\n# An example with multiple sections:\n\n![](builder-shortcuts.png)\n\nThis example shows a `GtkShortcutsWindow` with two sections, \"Editor Shortcuts\"\nand \"Terminal Shortcuts\".\n\nThe .ui file for this example can be found [here](https://gitlab.gnome.org/GNOME/gtk/tree/main/demos/gtk-demo/shortcuts-builder.ui).\n\n## CSS nodes\n\n`GtkShortcutsWindow` has a single CSS node with the name `window` and style\nclass `.shortcuts`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ShortcutsWindow.html)"
    },
    "deprecated": false,
    "insertText": "ShortcutsWindow {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SignalAction",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SignalAction : Gtk.ShortcutAction\n```\n\n---\n\nA `GtkShortcut`Action that emits a signal.\n\nSignals that are used in this way are referred to as keybinding signals,\nand they are expected to be defined with the %G_SIGNAL_ACTION flag.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SignalAction.html)"
    },
    "deprecated": false,
    "insertText": "SignalAction {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SignalListItemFactory",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SignalListItemFactory : Gtk.ListItemFactory\n```\n\n---\n\n`GtkSignalListItemFactory` is a `GtkListItemFactory` that emits signals\nto manage listitems.\n\nSignals are emitted for every listitem in the same order:\n\n 1. [signal@Gtk.SignalListItemFactory::setup] is emitted to set up permanent\n things on the listitem. This usually means constructing the widgets used in\n the row and adding them to the listitem.\n\n 2. [signal@Gtk.SignalListItemFactory::bind] is emitted to bind the item passed\n via [property@Gtk.ListItem:item] to the widgets that have been created in\n step 1 or to add item-specific widgets. Signals are connected to listen to\n changes - both to changes in the item to update the widgets or to changes\n in the widgets to update the item. After this signal has been called, the\n listitem may be shown in a list widget.\n\n 3. [signal@Gtk.SignalListItemFactory::unbind] is emitted to undo everything\n done in step 2. Usually this means disconnecting signal handlers. Once this\n signal has been called, the listitem will no longer be used in a list\n widget.\n\n 4. [signal@Gtk.SignalListItemFactory::bind] and\n [signal@Gtk.SignalListItemFactory::unbind] may be emitted multiple times\n again to bind the listitem for use with new items. By reusing listitems,\n potentially costly setup can be avoided. However, it means code needs to\n make sure to properly clean up the listitem in step 3 so that no information\n from the previous use leaks into the next use.\n\n5. [signal@Gtk.SignalListItemFactory::teardown] is emitted to allow undoing\nthe effects of [signal@Gtk.SignalListItemFactory::setup]. After this signal\nwas emitted on a listitem, the listitem will be destroyed and not be used again.\n\nNote that during the signal emissions, changing properties on the\nlistitems passed will not trigger notify signals as the listitem's\nnotifications are frozen. See g_object_freeze_notify() for details.\n\nFor tracking changes in other properties in the listitem, the\n::notify signal is recommended. The signal can be connected in the\n[signal@Gtk.SignalListItemFactory::setup] signal and removed again during\n[signal@Gtk.SignalListItemFactory::teardown].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SignalListItemFactory.html)"
    },
    "deprecated": false,
    "insertText": "SignalListItemFactory {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SingleSelection",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SingleSelection : GObject.Object implements Gio.ListModel, Gtk.SectionModel, Gtk.SelectionModel\n```\n\n---\n\n`GtkSingleSelection` is a `GtkSelectionModel` that allows selecting a single\nitem.\n\nNote that the selection is *persistent* -- if the selected item is removed\nand re-added in the same [signal@Gio.ListModel::items-changed] emission, it\nstays selected. In particular, this means that changing the sort order of an\nunderlying sort model will preserve the selection.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SingleSelection.html)"
    },
    "deprecated": false,
    "insertText": "SingleSelection {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SizeGroup",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SizeGroup : GObject.Object implements Gtk.Buildable\n```\n\n---\n\n`GtkSizeGroup` groups widgets together so they all request the same size.\n\nThis is typically useful when you want a column of widgets to have the\nsame size, but you can’t use a `GtkGrid`.\n\nIn detail, the size requested for each widget in a `GtkSizeGroup` is\nthe maximum of the sizes that would have been requested for each\nwidget in the size group if they were not in the size group. The mode\nof the size group (see [method@Gtk.SizeGroup.set_mode]) determines whether\nthis applies to the horizontal size, the vertical size, or both sizes.\n\nNote that size groups only affect the amount of space requested, not\nthe size that the widgets finally receive. If you want the widgets in\na `GtkSizeGroup` to actually be the same size, you need to pack them in\nsuch a way that they get the size they request and not more.\n\n`GtkSizeGroup` objects are referenced by each widget in the size group,\nso once you have added all widgets to a `GtkSizeGroup`, you can drop\nthe initial reference to the size group with g_object_unref(). If the\nwidgets in the size group are subsequently destroyed, then they will\nbe removed from the size group and drop their references on the size\ngroup; when all widgets have been removed, the size group will be\nfreed.\n\nWidgets can be part of multiple size groups; GTK will compute the\nhorizontal size of a widget from the horizontal requisition of all\nwidgets that can be reached from the widget by a chain of size groups\nof type %GTK_SIZE_GROUP_HORIZONTAL or %GTK_SIZE_GROUP_BOTH, and the\nvertical size from the vertical requisition of all widgets that can be\nreached from the widget by a chain of size groups of type\n%GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH.\n\nNote that only non-contextual sizes of every widget are ever consulted\nby size groups (since size groups have no knowledge of what size a widget\nwill be allocated in one dimension, it cannot derive how much height\na widget will receive for a given width). When grouping widgets that\ntrade height for width in mode %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH:\nthe height for the minimum width will be the requested height for all\nwidgets in the group. The same is of course true when horizontally grouping\nwidth for height widgets.\n\nWidgets that trade height-for-width should set a reasonably large minimum\nwidth by way of [property@Gtk.Label:width-chars] for instance. Widgets with\nstatic sizes as well as widgets that grow (such as ellipsizing text) need no\nsuch considerations.\n\n# GtkSizeGroup as GtkBuildable\n\nSize groups can be specified in a UI definition by placing an `<object>`\nelement with `class=\"GtkSizeGroup\"` somewhere in the UI definition. The\nwidgets that belong to the size group are specified by a `<widgets>` element\nthat may contain multiple `<widget>` elements, one for each member of the\nsize group. The ”name” attribute gives the id of the widget.\n\nAn example of a UI definition fragment with `GtkSizeGroup`:\n```xml\n<object class=\"GtkSizeGroup\">\n  <property name=\"mode\">horizontal</property>\n  <widgets>\n    <widget name=\"radio1\"/>\n    <widget name=\"radio2\"/>\n  </widgets>\n</object>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SizeGroup.html)"
    },
    "deprecated": false,
    "insertText": "SizeGroup {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SliceListModel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SliceListModel : GObject.Object implements Gio.ListModel, Gtk.SectionModel\n```\n\n---\n\n`GtkSliceListModel` is a list model that presents a slice of another model.\n\nThis is useful when implementing paging by setting the size to the number\nof elements per page and updating the offset whenever a different page is\nopened.\n\n`GtkSliceListModel` passes through sections from the underlying model.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SliceListModel.html)"
    },
    "deprecated": false,
    "insertText": "SliceListModel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Snapshot",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Snapshot : Gdk.Snapshot\n```\n\n---\n\n`GtkSnapshot` assists in creating [class@Gsk.RenderNode]s for widgets.\n\nIt functions in a similar way to a cairo context, and maintains a stack\nof render nodes and their associated transformations.\n\nThe node at the top of the stack is the one that `gtk_snapshot_append_…()`\nfunctions operate on. Use the `gtk_snapshot_push_…()` functions and\n[method@Snapshot.pop] to change the current node.\n\nThe typical way to obtain a `GtkSnapshot` object is as an argument to\nthe [vfunc@Gtk.Widget.snapshot] vfunc. If you need to create your own\n`GtkSnapshot`, use [ctor@Gtk.Snapshot.new].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Snapshot.html)"
    },
    "deprecated": false,
    "insertText": "Snapshot {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SortListModel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SortListModel : GObject.Object implements Gio.ListModel, Gtk.SectionModel\n```\n\n---\n\nA `GListModel` that sorts the elements of an underlying model\naccording to a `GtkSorter`.\n\nThe model is a stable sort. If two items compare equal according\nto the sorter, the one that appears first in the original model will\nalso appear first after sorting.\nNote that if you change the sorter, the previous order will have no\ninfluence on the new order. If you want that, consider using a\n`GtkMultiSorter` and appending the previous sorter to it.\n\nThe model can be set up to do incremental sorting, so that\nsorting long lists doesn't block the UI. See\n[method@Gtk.SortListModel.set_incremental] for details.\n\n`GtkSortListModel` is a generic model and because of that it\ncannot take advantage of any external knowledge when sorting.\nIf you run into performance issues with `GtkSortListModel`,\nit is strongly recommended that you write your own sorting list\nmodel.\n\n`GtkSortListModel` allows sorting the items into sections. It\nimplements `GtkSectionModel` and when [property@Gtk.SortListModel:section-sorter]\nis set, it will sort all items with that sorter and items comparing\nequal with it will be put into the same section.\nThe [property@Gtk.SortListModel:sorter] will then be used to sort items\ninside their sections.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SortListModel.html)"
    },
    "deprecated": false,
    "insertText": "SortListModel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Sorter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Sorter : GObject.Object\n```\n\n---\n\n`GtkSorter` is an object to describe sorting criteria.\n\nIts primary user is [class@Gtk.SortListModel]\n\nThe model will use a sorter to determine the order in which\nits items should appear by calling [method@Gtk.Sorter.compare]\nfor pairs of items.\n\nSorters may change their sorting behavior through their lifetime.\nIn that case, they will emit the [signal@Gtk.Sorter::changed] signal\nto notify that the sort order is no longer valid and should be updated\nby calling gtk_sorter_compare() again.\n\nGTK provides various pre-made sorter implementations for common sorting\noperations. [class@Gtk.ColumnView] has built-in support for sorting lists\nvia the [property@Gtk.ColumnViewColumn:sorter] property, where the user can\nchange the sorting by clicking on list headers.\n\nOf course, in particular for large lists, it is also possible to subclass\n`GtkSorter` and provide one's own sorter.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Sorter.html)"
    },
    "deprecated": false,
    "insertText": "Sorter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "SpinButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.SpinButton : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.CellEditable, Gtk.ConstraintTarget, Gtk.Editable, Gtk.Orientable\n```\n\n---\n\nA `GtkSpinButton` is an ideal way to allow the user to set the\nvalue of some attribute.\n\n![An example GtkSpinButton](spinbutton.png)\n\nRather than having to directly type a number into a `GtkEntry`,\n`GtkSpinButton` allows the user to click on one of two arrows\nto increment or decrement the displayed value. A value can still be\ntyped in, with the bonus that it can be checked to ensure it is in a\ngiven range.\n\nThe main properties of a `GtkSpinButton` are through an adjustment.\nSee the [class@Gtk.Adjustment] documentation for more details about\nan adjustment's properties.\n\nNote that `GtkSpinButton` will by default make its entry large enough\nto accommodate the lower and upper bounds of the adjustment. If this\nis not desired, the automatic sizing can be turned off by explicitly\nsetting [property@Gtk.Editable:width-chars] to a value != -1.\n\n## Using a GtkSpinButton to get an integer\n\n```c\n// Provides a function to retrieve an integer value from a GtkSpinButton\n// and creates a spin button to model percentage values.\n\nint\ngrab_int_value (GtkSpinButton *button,\n                gpointer       user_data)\n{\n  return gtk_spin_button_get_value_as_int (button);\n}\n\nvoid\ncreate_integer_spin_button (void)\n{\n\n  GtkWidget *window, *button;\n  GtkAdjustment *adjustment;\n\n  adjustment = gtk_adjustment_new (50.0, 0.0, 100.0, 1.0, 5.0, 0.0);\n\n  window = gtk_window_new ();\n\n  // creates the spinbutton, with no decimal places\n  button = gtk_spin_button_new (adjustment, 1.0, 0);\n  gtk_window_set_child (GTK_WINDOW (window), button);\n\n  gtk_window_present (GTK_WINDOW (window));\n}\n```\n\n## Using a GtkSpinButton to get a floating point value\n\n```c\n// Provides a function to retrieve a floating point value from a\n// GtkSpinButton, and creates a high precision spin button.\n\nfloat\ngrab_float_value (GtkSpinButton *button,\n                  gpointer       user_data)\n{\n  return gtk_spin_button_get_value (button);\n}\n\nvoid\ncreate_floating_spin_button (void)\n{\n  GtkWidget *window, *button;\n  GtkAdjustment *adjustment;\n\n  adjustment = gtk_adjustment_new (2.500, 0.0, 5.0, 0.001, 0.1, 0.0);\n\n  window = gtk_window_new ();\n\n  // creates the spinbutton, with three decimal places\n  button = gtk_spin_button_new (adjustment, 0.001, 3);\n  gtk_window_set_child (GTK_WINDOW (window), button);\n\n  gtk_window_present (GTK_WINDOW (window));\n}\n```\n\n# CSS nodes\n\n```\nspinbutton.horizontal\n├── text\n│    ├── undershoot.left\n│    ╰── undershoot.right\n├── button.down\n╰── button.up\n```\n\n```\nspinbutton.vertical\n├── button.up\n├── text\n│    ├── undershoot.left\n│    ╰── undershoot.right\n╰── button.down\n```\n\n`GtkSpinButton`s main CSS node has the name spinbutton. It creates subnodes\nfor the entry and the two buttons, with these names. The button nodes have\nthe style classes .up and .down. The `GtkText` subnodes (if present) are put\nbelow the text node. The orientation of the spin button is reflected in\nthe .vertical or .horizontal style class on the main node.\n\n# Accessibility\n\n`GtkSpinButton` uses the %GTK_ACCESSIBLE_ROLE_SPIN_BUTTON role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.SpinButton.html)"
    },
    "deprecated": false,
    "insertText": "SpinButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Spinner",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Spinner : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkSpinner` widget displays an icon-size spinning animation.\n\nIt is often used as an alternative to a [class@Gtk.ProgressBar]\nfor displaying indefinite activity, instead of actual progress.\n\n![An example GtkSpinner](spinner.png)\n\nTo start the animation, use [method@Gtk.Spinner.start], to stop it\nuse [method@Gtk.Spinner.stop].\n\n# CSS nodes\n\n`GtkSpinner` has a single CSS node with the name spinner.\nWhen the animation is active, the :checked pseudoclass is\nadded to this node.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Spinner.html)"
    },
    "deprecated": false,
    "insertText": "Spinner {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Stack",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Stack : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkStack` is a container which only shows one of its children\nat a time.\n\nIn contrast to `GtkNotebook`, `GtkStack` does not provide a means\nfor users to change the visible child. Instead, a separate widget\nsuch as [class@Gtk.StackSwitcher] or [class@Gtk.StackSidebar] can\nbe used with `GtkStack` to provide this functionality.\n\nTransitions between pages can be animated as slides or fades. This\ncan be controlled with [method@Gtk.Stack.set_transition_type].\nThese animations respect the [property@Gtk.Settings:gtk-enable-animations]\nsetting.\n\n`GtkStack` maintains a [class@Gtk.StackPage] object for each added\nchild, which holds additional per-child properties. You\nobtain the `GtkStackPage` for a child with [method@Gtk.Stack.get_page]\nand you can obtain a `GtkSelectionModel` containing all the pages\nwith [method@Gtk.Stack.get_pages].\n\n# GtkStack as GtkBuildable\n\nTo set child-specific properties in a .ui file, create `GtkStackPage`\nobjects explicitly, and set the child widget as a property on it:\n\n```xml\n  <object class=\"GtkStack\" id=\"stack\">\n    <child>\n      <object class=\"GtkStackPage\">\n        <property name=\"name\">page1</property>\n        <property name=\"title\">In the beginning…</property>\n        <property name=\"child\">\n          <object class=\"GtkLabel\">\n            <property name=\"label\">It was dark</property>\n          </object>\n        </property>\n      </object>\n    </child>\n```\n\n# CSS nodes\n\n`GtkStack` has a single CSS node named stack.\n\n# Accessibility\n\n`GtkStack` uses the %GTK_ACCESSIBLE_ROLE_TAB_PANEL for the stack\npages, which are the accessible parent objects of the child widgets.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Stack.html)"
    },
    "deprecated": false,
    "insertText": "Stack {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StackPage",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StackPage : GObject.Object implements Gtk.Accessible\n```\n\n---\n\n`GtkStackPage` is an auxiliary class used by `GtkStack`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StackPage.html)"
    },
    "deprecated": false,
    "insertText": "StackPage {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StackSidebar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StackSidebar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkStackSidebar` uses a sidebar to switch between `GtkStack` pages.\n\nIn order to use a `GtkStackSidebar`, you simply use a `GtkStack` to\norganize your UI flow, and add the sidebar to your sidebar area. You\ncan use [method@Gtk.StackSidebar.set_stack] to connect the `GtkStackSidebar`\nto the `GtkStack`.\n\n# CSS nodes\n\n`GtkStackSidebar` has a single CSS node with name stacksidebar and\nstyle class .sidebar.\n\nWhen circumstances require it, `GtkStackSidebar` adds the\n.needs-attention style class to the widgets representing the stack\npages.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StackSidebar.html)"
    },
    "deprecated": false,
    "insertText": "StackSidebar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StackSwitcher",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StackSwitcher : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\nThe `GtkStackSwitcher` shows a row of buttons to switch between `GtkStack`\npages.\n\n![An example GtkStackSwitcher](stackswitcher.png)\n\nIt acts as a controller for the associated `GtkStack`.\n\nAll the content for the buttons comes from the properties of the stacks\n[class@Gtk.StackPage] objects; the button visibility in a `GtkStackSwitcher`\nwidget is controlled by the visibility of the child in the `GtkStack`.\n\nIt is possible to associate multiple `GtkStackSwitcher` widgets\nwith the same `GtkStack` widget.\n\n# CSS nodes\n\n`GtkStackSwitcher` has a single CSS node named stackswitcher and\nstyle class .stack-switcher.\n\nWhen circumstances require it, `GtkStackSwitcher` adds the\n.needs-attention style class to the widgets representing the\nstack pages.\n\n# Accessibility\n\n`GtkStackSwitcher` uses the %GTK_ACCESSIBLE_ROLE_TAB_LIST role\nand uses the %GTK_ACCESSIBLE_ROLE_TAB for its buttons.\n\n# Orientable\n\nSince GTK 4.4, `GtkStackSwitcher` implements `GtkOrientable` allowing\nthe stack switcher to be made vertical with\n`gtk_orientable_set_orientation()`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StackSwitcher.html)"
    },
    "deprecated": false,
    "insertText": "StackSwitcher {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Statusbar",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Statusbar : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkStatusbar` widget is usually placed along the bottom of an application's\nmain [class@Gtk.Window].\n\n![An example GtkStatusbar](statusbar.png)\n\nA `GtkStatusBar` may provide a regular commentary of the application's\nstatus (as is usually the case in a web browser, for example), or may be\nused to simply output a message when the status changes, (when an upload\nis complete in an FTP client, for example).\n\nStatus bars in GTK maintain a stack of messages. The message at\nthe top of the each bar’s stack is the one that will currently be displayed.\n\nAny messages added to a statusbar’s stack must specify a context id that\nis used to uniquely identify the source of a message. This context id can\nbe generated by [method@Gtk.Statusbar.get_context_id], given a message and\nthe statusbar that it will be added to. Note that messages are stored in a\nstack, and when choosing which message to display, the stack structure is\nadhered to, regardless of the context identifier of a message.\n\nOne could say that a statusbar maintains one stack of messages for\ndisplay purposes, but allows multiple message producers to maintain\nsub-stacks of the messages they produced (via context ids).\n\nStatus bars are created using [ctor@Gtk.Statusbar.new].\n\nMessages are added to the bar’s stack with [method@Gtk.Statusbar.push].\n\nThe message at the top of the stack can be removed using\n[method@Gtk.Statusbar.pop]. A message can be removed from anywhere in the\nstack if its message id was recorded at the time it was added. This is done\nusing [method@Gtk.Statusbar.remove].\n\n## CSS node\n\n`GtkStatusbar` has a single CSS node with name `statusbar`.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Statusbar.html)"
    },
    "deprecated": false,
    "insertText": "Statusbar {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StringFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StringFilter : Gtk.Filter\n```\n\n---\n\n`GtkStringFilter` determines whether to include items by comparing\nstrings to a fixed search term.\n\nThe strings are obtained from the items by evaluating a `GtkExpression`\nset with [method@Gtk.StringFilter.set_expression], and they are\ncompared against a search term set with [method@Gtk.StringFilter.set_search].\n\n`GtkStringFilter` has several different modes of comparison - it\ncan match the whole string, just a prefix, or any substring. Use\n[method@Gtk.StringFilter.set_match_mode] choose a mode.\n\nIt is also possible to make case-insensitive comparisons, with\n[method@Gtk.StringFilter.set_ignore_case].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StringFilter.html)"
    },
    "deprecated": false,
    "insertText": "StringFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StringList",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StringList : GObject.Object implements Gio.ListModel, Gtk.Buildable\n```\n\n---\n\n`GtkStringList` is a list model that wraps an array of strings.\n\nThe objects in the model are of type [class@Gtk.StringObject] and have\na \"string\" property that can be used inside expressions.\n\n`GtkStringList` is well-suited for any place where you would\ntypically use a `char*[]`, but need a list model.\n\n## GtkStringList as GtkBuildable\n\nThe `GtkStringList` implementation of the `GtkBuildable` interface\nsupports adding items directly using the `<items>` element and\nspecifying `<item>` elements for each item. Each `<item>` element\nsupports the regular translation attributes “translatable”,\n“context” and “comments”.\n\nHere is a UI definition fragment specifying a `GtkStringList`\n\n```xml\n<object class=\"GtkStringList\">\n  <items>\n    <item translatable=\"yes\">Factory</item>\n    <item translatable=\"yes\">Home</item>\n    <item translatable=\"yes\">Subway</item>\n  </items>\n</object>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StringList.html)"
    },
    "deprecated": false,
    "insertText": "StringList {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StringObject",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StringObject : GObject.Object\n```\n\n---\n\n`GtkStringObject` is the type of items in a `GtkStringList`.\n\nA `GtkStringObject` is a wrapper around a `const char*`; it has\na [property@Gtk.StringObject:string] property that can be used\nfor property bindings and expressions.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StringObject.html)"
    },
    "deprecated": false,
    "insertText": "StringObject {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StringSorter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StringSorter : Gtk.Sorter\n```\n\n---\n\n`GtkStringSorter` is a `GtkSorter` that compares strings.\n\nIt does the comparison in a linguistically correct way using the\ncurrent locale by normalizing Unicode strings and possibly case-folding\nthem before performing the comparison.\n\nTo obtain the strings to compare, this sorter evaluates a\n[class@Gtk.Expression].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StringSorter.html)"
    },
    "deprecated": false,
    "insertText": "StringSorter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "StyleContext",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.StyleContext : GObject.Object\n```\n\n---\n\n`GtkStyleContext` stores styling information affecting a widget.\n\nIn order to construct the final style information, `GtkStyleContext`\nqueries information from all attached `GtkStyleProviders`. Style\nproviders can be either attached explicitly to the context through\n[method@Gtk.StyleContext.add_provider], or to the display through\n[func@Gtk.StyleContext.add_provider_for_display]. The resulting\nstyle is a combination of all providers’ information in priority order.\n\nFor GTK widgets, any `GtkStyleContext` returned by\n[method@Gtk.Widget.get_style_context] will already have a `GdkDisplay`\nand RTL/LTR information set. The style context will also be updated\nautomatically if any of these settings change on the widget.\n\n## Style Classes\n\nWidgets can add style classes to their context, which can be used to associate\ndifferent styles by class. The documentation for individual widgets lists\nwhich style classes it uses itself, and which style classes may be added by\napplications to affect their appearance.\n\n# Custom styling in UI libraries and applications\n\nIf you are developing a library with custom widgets that render differently\nthan standard components, you may need to add a `GtkStyleProvider` yourself\nwith the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority, either a\n`GtkCssProvider` or a custom object implementing the `GtkStyleProvider`\ninterface. This way themes may still attempt to style your UI elements in\na different way if needed so.\n\nIf you are using custom styling on an applications, you probably want then\nto make your style information prevail to the theme’s, so you must use\na `GtkStyleProvider` with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION\npriority, keep in mind that the user settings in\n`XDG_CONFIG_HOME/gtk-4.0/gtk.css` will\nstill take precedence over your changes, as it uses the\n%GTK_STYLE_PROVIDER_PRIORITY_USER priority.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.StyleContext.html)"
    },
    "deprecated": false,
    "insertText": "StyleContext {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Switch",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Switch : Gtk.Widget implements Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkSwitch` is a \"light switch\" that has two states: on or off.\n\n![An example GtkSwitch](switch.png)\n\nThe user can control which state should be active by clicking the\nempty area, or by dragging the slider.\n\n`GtkSwitch` can also express situations where the underlying state changes\nwith a delay. In this case, the slider position indicates the user's recent\nchange (represented by the [property@Gtk.Switch:active] property), while the\ntrough color indicates the present underlying state (represented by the\n[property@Gtk.Switch:state] property).\n\n![GtkSwitch with delayed state change](switch-state.png)\n\nSee [signal@Gtk.Switch::state-set] for details.\n\n# CSS nodes\n\n```\nswitch\n├── image\n├── image\n╰── slider\n```\n\n`GtkSwitch` has four css nodes, the main node with the name switch and\nsubnodes for the slider and the on and off images. Neither of them is\nusing any style classes.\n\n# Accessibility\n\n`GtkSwitch` uses the %GTK_ACCESSIBLE_ROLE_SWITCH role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Switch.html)"
    },
    "deprecated": false,
    "insertText": "Switch {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Text",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Text : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleText, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable\n```\n\n---\n\nThe `GtkText` widget is a single-line text entry widget.\n\n`GtkText` is the common implementation of single-line text editing\nthat is shared between [class@Gtk.Entry], [class@Gtk.PasswordEntry],\n[class@Gtk.SpinButton], and other widgets. In all of these, `GtkText` is\nused as the delegate for the [iface@Gtk.Editable] implementation.\n\nA fairly large set of key bindings are supported by default. If the\nentered text is longer than the allocation of the widget, the widget\nwill scroll so that the cursor position is visible.\n\nWhen using an entry for passwords and other sensitive information,\nit can be put into “password mode” using [method@Gtk.Text.set_visibility].\nIn this mode, entered text is displayed using a “invisible” character.\nBy default, GTK picks the best invisible character that is available\nin the current font, but it can be changed with\n[method@Gtk.Text.set_invisible_char].\n\nIf you are looking to add icons or progress display in an entry, look\nat [class@Gtk.Entry]. There other alternatives for more specialized use\ncases, such as [class@Gtk.SearchEntry].\n\nIf you need multi-line editable text, look at [class@Gtk.TextView].\n\n# CSS nodes\n\n```\ntext[.read-only]\n├── placeholder\n├── undershoot.left\n├── undershoot.right\n├── [selection]\n├── [block-cursor]\n╰── [window.popup]\n```\n\n`GtkText` has a main node with the name `text`. Depending on the properties\nof the widget, the `.read-only` style class may appear.\n\nWhen the entry has a selection, it adds a subnode with the name `selection`.\n\nWhen the entry is in overwrite mode, it adds a subnode with the name\n`block-cursor` that determines how the block cursor is drawn.\n\nThe CSS node for a context menu is added as a subnode with the name `popup`.\n\nThe `undershoot` nodes are used to draw the underflow indication when content\nis scrolled out of view. These nodes get the `.left` or `.right` style class\nadded depending on where the indication is drawn.\n\nWhen touch is used and touch selection handles are shown, they are using\nCSS nodes with name `cursor-handle`. They get the `.top` or `.bottom` style\nclass depending on where they are shown in relation to the selection. If\nthere is just a single handle for the text cursor, it gets the style class\n`.insertion-cursor`.\n\n# Accessibility\n\n`GtkText` uses the %GTK_ACCESSIBLE_ROLE_NONE role, which causes it to be\nskipped for accessibility. This is because `GtkText` is expected to be used\nas a delegate for a `GtkEditable` implementation that will be represented\nto accessibility.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Text.html)"
    },
    "deprecated": false,
    "insertText": "Text {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TextBuffer",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TextBuffer : GObject.Object\n```\n\n---\n\nStores text and attributes for display in a `GtkTextView`.\n\nYou may wish to begin by reading the\n[text widget conceptual overview](section-text-widget.html),\nwhich gives an overview of all the objects and data types\nrelated to the text widget and how they work together.\n\nGtkTextBuffer can support undoing changes to the buffer\ncontent, see [method@Gtk.TextBuffer.set_enable_undo].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TextBuffer.html)"
    },
    "deprecated": false,
    "insertText": "TextBuffer {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TextChildAnchor",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TextChildAnchor : GObject.Object\n```\n\n---\n\nA `GtkTextChildAnchor` is a spot in a `GtkTextBuffer` where child widgets can\nbe “anchored”.\n\nThe anchor can have multiple widgets anchored, to allow for multiple views.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TextChildAnchor.html)"
    },
    "deprecated": false,
    "insertText": "TextChildAnchor {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TextMark",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TextMark : GObject.Object\n```\n\n---\n\nA `GtkTextMark` is a position in a `GtkTextbuffer` that is preserved\nacross modifications.\n\nYou may wish to begin by reading the\n[text widget conceptual overview](section-text-widget.html),\nwhich gives an overview of all the objects and data types\nrelated to the text widget and how they work together.\n\nA `GtkTextMark` is like a bookmark in a text buffer; it preserves\na position in the text. You can convert the mark to an iterator using\n[method@Gtk.TextBuffer.get_iter_at_mark]. Unlike iterators, marks remain\nvalid across buffer mutations, because their behavior is defined when\ntext is inserted or deleted. When text containing a mark is deleted,\nthe mark remains in the position originally occupied by the deleted\ntext. When text is inserted at a mark, a mark with “left gravity” will\nbe moved to the beginning of the newly-inserted text, and a mark with\n“right gravity” will be moved to the end.\n\nNote that “left” and “right” here refer to logical direction (left\nis the toward the start of the buffer); in some languages such as\nHebrew the logically-leftmost text is not actually on the left when\ndisplayed.\n\nMarks are reference counted, but the reference count only controls\nthe validity of the memory; marks can be deleted from the buffer at\nany time with [method@Gtk.TextBuffer.delete_mark]. Once deleted from\nthe buffer, a mark is essentially useless.\n\nMarks optionally have names; these can be convenient to avoid passing\nthe `GtkTextMark` object around.\n\nMarks are typically created using the [method@Gtk.TextBuffer.create_mark]\nfunction.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TextMark.html)"
    },
    "deprecated": false,
    "insertText": "TextMark {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TextTag",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TextTag : GObject.Object\n```\n\n---\n\nA tag that can be applied to text contained in a `GtkTextBuffer`.\n\nYou may wish to begin by reading the\n[text widget conceptual overview](section-text-widget.html),\nwhich gives an overview of all the objects and data types\nrelated to the text widget and how they work together.\n\nTags should be in the [class@Gtk.TextTagTable] for a given\n`GtkTextBuffer` before using them with that buffer.\n\n[method@Gtk.TextBuffer.create_tag] is the best way to create tags.\nSee “gtk4-demo” for numerous examples.\n\nFor each property of `GtkTextTag`, there is a “set” property, e.g.\n“font-set” corresponds to “font”. These “set” properties reflect\nwhether a property has been set or not.\n\nThey are maintained by GTK and you should not set them independently.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TextTag.html)"
    },
    "deprecated": false,
    "insertText": "TextTag {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TextTagTable",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TextTagTable : GObject.Object implements Gtk.Buildable\n```\n\n---\n\nThe collection of tags in a `GtkTextBuffer`\n\nYou may wish to begin by reading the\n[text widget conceptual overview](section-text-widget.html),\nwhich gives an overview of all the objects and data types\nrelated to the text widget and how they work together.\n\n# GtkTextTagTables as GtkBuildable\n\nThe `GtkTextTagTable` implementation of the `GtkBuildable` interface\nsupports adding tags by specifying “tag” as the “type” attribute\nof a `<child>` element.\n\nAn example of a UI definition fragment specifying tags:\n```xml\n<object class=\"GtkTextTagTable\">\n <child type=\"tag\">\n   <object class=\"GtkTextTag\"/>\n </child>\n</object>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TextTagTable.html)"
    },
    "deprecated": false,
    "insertText": "TextTagTable {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TextView",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TextView : Gtk.Widget implements Gtk.Accessible, Gtk.AccessibleText, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable\n```\n\n---\n\nA widget that displays the contents of a [class@Gtk.TextBuffer].\n\n![An example GtkTextview](multiline-text.png)\n\nYou may wish to begin by reading the [conceptual overview](section-text-widget.html),\nwhich gives an overview of all the objects and data types related to the\ntext widget and how they work together.\n\n## CSS nodes\n\n```\ntextview.view\n├── border.top\n├── border.left\n├── text\n│   ╰── [selection]\n├── border.right\n├── border.bottom\n╰── [window.popup]\n```\n\n`GtkTextView` has a main css node with name textview and style class .view,\nand subnodes for each of the border windows, and the main text area,\nwith names border and text, respectively. The border nodes each get\none of the style classes .left, .right, .top or .bottom.\n\nA node representing the selection will appear below the text node.\n\nIf a context menu is opened, the window node will appear as a subnode\nof the main node.\n\n## Accessibility\n\n`GtkTextView` uses the %GTK_ACCESSIBLE_ROLE_TEXT_BOX role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TextView.html)"
    },
    "deprecated": false,
    "insertText": "TextView {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "ToggleButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.ToggleButton : Gtk.Button implements Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nA `GtkToggleButton` is a button which remains “pressed-in” when\nclicked.\n\nClicking again will cause the toggle button to return to its normal state.\n\nA toggle button is created by calling either [ctor@Gtk.ToggleButton.new] or\n[ctor@Gtk.ToggleButton.new_with_label]. If using the former, it is advisable\nto pack a widget, (such as a `GtkLabel` and/or a `GtkImage`), into the toggle\nbutton’s container. (See [class@Gtk.Button] for more information).\n\nThe state of a `GtkToggleButton` can be set specifically using\n[method@Gtk.ToggleButton.set_active], and retrieved using\n[method@Gtk.ToggleButton.get_active].\n\nTo simply switch the state of a toggle button, use\n[method@Gtk.ToggleButton.toggled].\n\n## Grouping\n\nToggle buttons can be grouped together, to form mutually exclusive\ngroups - only one of the buttons can be toggled at a time, and toggling\nanother one will switch the currently toggled one off.\n\nTo add a `GtkToggleButton` to a group, use [method@Gtk.ToggleButton.set_group].\n\n## CSS nodes\n\n`GtkToggleButton` has a single CSS node with name button. To differentiate\nit from a plain `GtkButton`, it gets the `.toggle` style class.\n\n## Accessibility\n\n`GtkToggleButton` uses the %GTK_ACCESSIBLE_ROLE_TOGGLE_BUTTON role.\n\n## Creating two `GtkToggleButton` widgets.\n\n```c\nstatic void\noutput_state (GtkToggleButton *source,\n              gpointer         user_data)\n{\n  g_print (\"Toggle button \"%s\" is active: %s\",\n           gtk_button_get_label (GTK_BUTTON (source)),\n           gtk_toggle_button_get_active (source) ? \"Yes\" : \"No\");\n}\n\nstatic void\nmake_toggles (void)\n{\n  GtkWidget *window, *toggle1, *toggle2;\n  GtkWidget *box;\n  const char *text;\n\n  window = gtk_window_new ();\n  box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 12);\n\n  text = \"Hi, I’m toggle button one\";\n  toggle1 = gtk_toggle_button_new_with_label (text);\n\n  g_signal_connect (toggle1, \"toggled\",\n                    G_CALLBACK (output_state),\n                    NULL);\n  gtk_box_append (GTK_BOX (box), toggle1);\n\n  text = \"Hi, I’m toggle button two\";\n  toggle2 = gtk_toggle_button_new_with_label (text);\n  g_signal_connect (toggle2, \"toggled\",\n                    G_CALLBACK (output_state),\n                    NULL);\n  gtk_box_append (GTK_BOX (box), toggle2);\n\n  gtk_window_set_child (GTK_WINDOW (window), box);\n  gtk_window_present (GTK_WINDOW (window));\n}\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.ToggleButton.html)"
    },
    "deprecated": false,
    "insertText": "ToggleButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Tooltip",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Tooltip : GObject.Object\n```\n\n---\n\n`GtkTooltip` is an object representing a widget tooltip.\n\nBasic tooltips can be realized simply by using\n[method@Gtk.Widget.set_tooltip_text] or\n[method@Gtk.Widget.set_tooltip_markup] without\nany explicit tooltip object.\n\nWhen you need a tooltip with a little more fancy contents,\nlike adding an image, or you want the tooltip to have different\ncontents per `GtkTreeView` row or cell, you will have to do a\nlittle more work:\n\n- Set the [property@Gtk.Widget:has-tooltip] property to %TRUE.\n  This will make GTK monitor the widget for motion and related events\n  which are needed to determine when and where to show a tooltip.\n\n- Connect to the [signal@Gtk.Widget::query-tooltip] signal.\n  This signal will be emitted when a tooltip is supposed to be shown.\n  One of the arguments passed to the signal handler is a `GtkTooltip`\n  object. This is the object that we are about to display as a tooltip,\n  and can be manipulated in your callback using functions like\n  [method@Gtk.Tooltip.set_icon]. There are functions for setting\n  the tooltip’s markup, setting an image from a named icon, or even\n  putting in a custom widget.\n\n- Return %TRUE from your ::query-tooltip handler. This causes the tooltip\n  to be show. If you return %FALSE, it will not be shown.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Tooltip.html)"
    },
    "deprecated": false,
    "insertText": "Tooltip {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeExpander",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeExpander : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkTreeExpander` is a widget that provides an expander for a list.\n\nIt is typically placed as a bottommost child into a `GtkListView`\nto allow users to expand and collapse children in a list with a\n[class@Gtk.TreeListModel]. `GtkTreeExpander` provides the common UI\nelements, gestures and keybindings for this purpose.\n\nOn top of this, the \"listitem.expand\", \"listitem.collapse\" and\n\"listitem.toggle-expand\" actions are provided to allow adding custom\nUI for managing expanded state.\n\nIt is important to mention that you want to set the\n[property@Gtk.ListItem:focusable] property to FALSE when using this\nwidget, as you want the keyboard focus to be in the treexpander, and not\ninside the list to make use of the keybindings.\n\nThe `GtkTreeListModel` must be set to not be passthrough. Then it\nwill provide [class@Gtk.TreeListRow] items which can be set via\n[method@Gtk.TreeExpander.set_list_row] on the expander.\nThe expander will then watch that row item automatically.\n[method@Gtk.TreeExpander.set_child] sets the widget that displays\nthe actual row contents.\n\n`GtkTreeExpander` can be modified with properties such as\n[property@Gtk.TreeExpander:indent-for-icon],\n[property@Gtk.TreeExpander:indent-for-depth], and\n[property@Gtk.TreeExpander:hide-expander] to achieve a different appearance.\nThis can even be done to influence individual rows, for example by binding\nthe [property@Gtk.TreeExpander:hide-expander] property to the item count of\nthe model of the treelistrow, to hide the expander for rows without children,\neven if the row is expandable.\n\n## CSS nodes\n\n```\ntreeexpander\n├── [indent]*\n├── [expander]\n╰── <child>\n```\n\n`GtkTreeExpander` has zero or one CSS nodes with the name \"expander\" that\nshould display the expander icon. The node will be `:checked` when it\nis expanded. If the node is not expandable, an \"indent\" node will be\ndisplayed instead.\n\nFor every level of depth, another \"indent\" node is prepended.\n\n## Accessibility\n\nUntil GTK 4.10, `GtkTreeExpander` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nSince GTK 4.12, `GtkTreeExpander` uses the `GTK_ACCESSIBLE_ROLE_BUTTON` role.\nToggling it will change the `GTK_ACCESSIBLE_STATE_EXPANDED` state.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeExpander.html)"
    },
    "deprecated": false,
    "insertText": "TreeExpander {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeListModel",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeListModel : GObject.Object implements Gio.ListModel\n```\n\n---\n\n`GtkTreeListModel` is a list model that can create child models on demand.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeListModel.html)"
    },
    "deprecated": false,
    "insertText": "TreeListModel {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeListRow",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeListRow : GObject.Object\n```\n\n---\n\n`GtkTreeListRow` is used by `GtkTreeListModel` to represent items.\n\nIt allows navigating the model as a tree and modify the state of rows.\n\n`GtkTreeListRow` instances are created by a `GtkTreeListModel` only\nwhen the [property@Gtk.TreeListModel:passthrough] property is not set.\n\nThere are various support objects that can make use of `GtkTreeListRow`\nobjects, such as the [class@Gtk.TreeExpander] widget that allows displaying\nan icon to expand or collapse a row or [class@Gtk.TreeListRowSorter] that\nmakes it possible to sort trees properly.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeListRow.html)"
    },
    "deprecated": false,
    "insertText": "TreeListRow {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeListRowSorter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeListRowSorter : Gtk.Sorter\n```\n\n---\n\n`GtkTreeListRowSorter` is a special-purpose sorter that will apply a given\nsorter to the levels in a tree.\n\nHere is an example for setting up a column view with a tree model and\na `GtkTreeListSorter`:\n\n```c\ncolumn_sorter = gtk_column_view_get_sorter (view);\nsorter = gtk_tree_list_row_sorter_new (g_object_ref (column_sorter));\nsort_model = gtk_sort_list_model_new (tree_model, sorter);\nselection = gtk_single_selection_new (sort_model);\ngtk_column_view_set_model (view, G_LIST_MODEL (selection));\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeListRowSorter.html)"
    },
    "deprecated": false,
    "insertText": "TreeListRowSorter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeModelFilter",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeModelFilter : GObject.Object implements Gtk.TreeDragSource, Gtk.TreeModel\n```\n\n---\n\nA `GtkTreeModel` which hides parts of an underlying tree model\n\nA `GtkTreeModelFilter` is a tree model which wraps another tree model,\nand can do the following things:\n\n- Filter specific rows, based on data from a “visible column”, a column\n  storing booleans indicating whether the row should be filtered or not,\n  or based on the return value of a “visible function”, which gets a\n  model, iter and user_data and returns a boolean indicating whether the\n  row should be filtered or not.\n\n- Modify the “appearance” of the model, using a modify function.\n  This is extremely powerful and allows for just changing some\n  values and also for creating a completely different model based\n  on the given child model.\n\n- Set a different root node, also known as a “virtual root”. You can pass\n  in a `GtkTreePath` indicating the root node for the filter at construction\n  time.\n\nThe basic API is similar to `GtkTreeModelSort`. For an example on its usage,\nsee the section on `GtkTreeModelSort`.\n\nWhen using `GtkTreeModelFilter`, it is important to realize that\n`GtkTreeModelFilter` maintains an internal cache of all nodes which are\nvisible in its clients. The cache is likely to be a subtree of the tree\nexposed by the child model. `GtkTreeModelFilter` will not cache the entire\nchild model when unnecessary to not compromise the caching mechanism\nthat is exposed by the reference counting scheme. If the child model\nimplements reference counting, unnecessary signals may not be emitted\nbecause of reference counting rule 3, see the `GtkTreeModel`\ndocumentation. (Note that e.g. `GtkTreeStore` does not implement\nreference counting and will always emit all signals, even when\nthe receiving node is not visible).\n\nBecause of this, limitations for possible visible functions do apply.\nIn general, visible functions should only use data or properties from\nthe node for which the visibility state must be determined, its siblings\nor its parents. Usually, having a dependency on the state of any child\nnode is not possible, unless references are taken on these explicitly.\nWhen no such reference exists, no signals may be received for these child\nnodes (see reference counting rule number 3 in the `GtkTreeModel` section).\n\nDetermining the visibility state of a given node based on the state\nof its child nodes is a frequently occurring use case. Therefore,\n`GtkTreeModelFilter` explicitly supports this. For example, when a node\ndoes not have any children, you might not want the node to be visible.\nAs soon as the first row is added to the node’s child level (or the\nlast row removed), the node’s visibility should be updated.\n\nThis introduces a dependency from the node on its child nodes. In order\nto accommodate this, `GtkTreeModelFilter` must make sure the necessary\nsignals are received from the child model. This is achieved by building,\nfor all nodes which are exposed as visible nodes to `GtkTreeModelFilter`'s\nclients, the child level (if any) and take a reference on the first node\nin this level. Furthermore, for every row-inserted, row-changed or\nrow-deleted signal (also these which were not handled because the node\nwas not cached), `GtkTreeModelFilter` will check if the visibility state\nof any parent node has changed.\n\nBeware, however, that this explicit support is limited to these two\ncases. For example, if you want a node to be visible only if two nodes\nin a child’s child level (2 levels deeper) are visible, you are on your\nown. In this case, either rely on `GtkTreeStore` to emit all signals\nbecause it does not implement reference counting, or for models that\ndo implement reference counting, obtain references on these child levels\nyourself.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeModelFilter.html)"
    },
    "deprecated": false,
    "insertText": "TreeModelFilter {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeModelSort",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeModelSort : GObject.Object implements Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable\n```\n\n---\n\nA GtkTreeModel which makes an underlying tree model sortable\n\nThe `GtkTreeModelSort` is a model which implements the `GtkTreeSortable`\ninterface.  It does not hold any data itself, but rather is created with\na child model and proxies its data.  It has identical column types to\nthis child model, and the changes in the child are propagated.  The\nprimary purpose of this model is to provide a way to sort a different\nmodel without modifying it. Note that the sort function used by\n`GtkTreeModelSort` is not guaranteed to be stable.\n\nThe use of this is best demonstrated through an example.  In the\nfollowing sample code we create two `GtkTreeView` widgets each with a\nview of the same data.  As the model is wrapped here by a\n`GtkTreeModelSort`, the two `GtkTreeView`s can each sort their\nview of the data without affecting the other.  By contrast, if we\nsimply put the same model in each widget, then sorting the first would\nsort the second.\n\n## Using a `GtkTreeModelSort`\n\n|[<!-- language=\"C\" -->\n{\n  GtkTreeView *tree_view1;\n  GtkTreeView *tree_view2;\n  GtkTreeModel *sort_model1;\n  GtkTreeModel *sort_model2;\n  GtkTreeModel *child_model;\n\n  // get the child model\n  child_model = get_my_model ();\n\n  // Create the first tree\n  sort_model1 = gtk_tree_model_sort_new_with_model (child_model);\n  tree_view1 = gtk_tree_view_new_with_model (sort_model1);\n\n  // Create the second tree\n  sort_model2 = gtk_tree_model_sort_new_with_model (child_model);\n  tree_view2 = gtk_tree_view_new_with_model (sort_model2);\n\n  // Now we can sort the two models independently\n  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),\n                                        COLUMN_1, GTK_SORT_ASCENDING);\n  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),\n                                        COLUMN_1, GTK_SORT_DESCENDING);\n}\n]|\n\nTo demonstrate how to access the underlying child model from the sort\nmodel, the next example will be a callback for the `GtkTreeSelection`\n`GtkTreeSelection::changed` signal.  In this callback, we get a string\nfrom COLUMN_1 of the model.  We then modify the string, find the same\nselected row on the child model, and change the row there.\n\n## Accessing the child model of in a selection changed callback\n\n|[<!-- language=\"C\" -->\nvoid\nselection_changed (GtkTreeSelection *selection, gpointer data)\n{\n  GtkTreeModel *sort_model = NULL;\n  GtkTreeModel *child_model;\n  GtkTreeIter sort_iter;\n  GtkTreeIter child_iter;\n  char *some_data = NULL;\n  char *modified_data;\n\n  // Get the current selected row and the model.\n  if (! gtk_tree_selection_get_selected (selection,\n                                         &sort_model,\n                                         &sort_iter))\n    return;\n\n  // Look up the current value on the selected row and get\n  // a new value to change it to.\n  gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &sort_iter,\n                      COLUMN_1, &some_data,\n                      -1);\n\n  modified_data = change_the_data (some_data);\n  g_free (some_data);\n\n  // Get an iterator on the child model, instead of the sort model.\n  gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),\n                                                  &child_iter,\n                                                  &sort_iter);\n\n  // Get the child model and change the value of the row. In this\n  // example, the child model is a GtkListStore. It could be any other\n  // type of model, though.\n  child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));\n  gtk_list_store_set (GTK_LIST_STORE (child_model), &child_iter,\n                      COLUMN_1, &modified_data,\n                      -1);\n  g_free (modified_data);\n}\n]|\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeModelSort.html)"
    },
    "deprecated": false,
    "insertText": "TreeModelSort {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeSelection",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeSelection : GObject.Object\n```\n\n---\n\nThe selection object for GtkTreeView\n\nThe `GtkTreeSelection` object is a helper object to manage the selection\nfor a `GtkTreeView` widget.  The `GtkTreeSelection` object is\nautomatically created when a new `GtkTreeView` widget is created, and\ncannot exist independently of this widget.  The primary reason the\n`GtkTreeSelection` objects exists is for cleanliness of code and API.\nThat is, there is no conceptual reason all these functions could not be\nmethods on the `GtkTreeView` widget instead of a separate function.\n\nThe `GtkTreeSelection` object is gotten from a `GtkTreeView` by calling\ngtk_tree_view_get_selection().  It can be manipulated to check the\nselection status of the tree, as well as select and deselect individual\nrows.  Selection is done completely view side.  As a result, multiple\nviews of the same model can have completely different selections.\nAdditionally, you cannot change the selection of a row on the model that\nis not currently displayed by the view without expanding its parents\nfirst.\n\nOne of the important things to remember when monitoring the selection of\na view is that the `GtkTreeSelection`::changed signal is mostly a hint.\nThat is, it may only emit one signal when a range of rows is selected.\nAdditionally, it may on occasion emit a `GtkTreeSelection`::changed signal\nwhen nothing has happened (mostly as a result of programmers calling\nselect_row on an already selected row).\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeSelection.html)"
    },
    "deprecated": false,
    "insertText": "TreeSelection {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeStore",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeStore : GObject.Object implements Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable\n```\n\n---\n\nA tree-like data structure that can be used with the [class@Gtk.TreeView].\n\nThe `GtkTreeStore` object is a list model for use with a `GtkTreeView`\nwidget. It implements the [iface@Gtk.TreeModel] interface, and consequently,\ncan use all of the methods available there. It also implements the\n[iface@Gtk.TreeSortable] interface so it can be sorted by the view.\nFinally, it also implements the tree [drag][iface@Gtk.TreeDragSource]\nand [drop][iface@Gtk.TreeDragDest] interfaces.\n\n`GtkTreeStore` is deprecated since GTK 4.10, and should not be used in newly\nwritten code. You should use [class@Gtk.TreeListModel] for a tree-like model\nobject.\n\n## GtkTreeStore as GtkBuildable\n\nThe GtkTreeStore implementation of the `GtkBuildable` interface allows\nto specify the model columns with a `<columns>` element that may contain\nmultiple `<column>` elements, each specifying one model column. The “type”\nattribute specifies the data type for the column.\n\nAn example of a UI Definition fragment for a tree store:\n\n```xml\n<object class=\"GtkTreeStore\">\n  <columns>\n    <column type=\"gchararray\"/>\n    <column type=\"gchararray\"/>\n    <column type=\"gint\"/>\n  </columns>\n</object>\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeStore.html)"
    },
    "deprecated": false,
    "insertText": "TreeStore {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeView",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeView : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable\n```\n\n---\n\nA widget for displaying both trees and lists\n\nWidget that displays any object that implements the [iface@Gtk.TreeModel] interface.\n\nPlease refer to the [tree widget conceptual overview](section-tree-widget.html)\nfor an overview of all the objects and data types related to the tree\nwidget and how they work together.\n\n## Coordinate systems in GtkTreeView API\n\nSeveral different coordinate systems are exposed in the `GtkTreeView` API.\nThese are:\n\n![](tree-view-coordinates.png)\n\n- Widget coordinates: Coordinates relative to the widget (usually `widget->window`).\n\n- Bin window coordinates: Coordinates relative to the window that GtkTreeView renders to.\n\n- Tree coordinates: Coordinates relative to the entire scrollable area of GtkTreeView. These\n  coordinates start at (0, 0) for row 0 of the tree.\n\nSeveral functions are available for converting between the different\ncoordinate systems.  The most common translations are between widget and bin\nwindow coordinates and between bin window and tree coordinates. For the\nformer you can use [method@Gtk.TreeView.convert_widget_to_bin_window_coords]\n(and vice versa), for the latter [method@Gtk.TreeView.convert_bin_window_to_tree_coords]\n(and vice versa).\n\n## `GtkTreeView` as `GtkBuildable`\n\nThe `GtkTreeView` implementation of the `GtkBuildable` interface accepts\n[class@Gtk.TreeViewColumn] objects as `<child>` elements and exposes the\ninternal [class@Gtk.TreeSelection] in UI definitions.\n\nAn example of a UI definition fragment with `GtkTreeView`:\n\n```xml\n<object class=\"GtkTreeView\" id=\"treeview\">\n  <property name=\"model\">liststore1</property>\n  <child>\n    <object class=\"GtkTreeViewColumn\" id=\"test-column\">\n      <property name=\"title\">Test</property>\n      <child>\n        <object class=\"GtkCellRendererText\" id=\"test-renderer\"/>\n        <attributes>\n          <attribute name=\"text\">1</attribute>\n        </attributes>\n      </child>\n    </object>\n  </child>\n  <child internal-child=\"selection\">\n    <object class=\"GtkTreeSelection\" id=\"selection\">\n      <signal name=\"changed\" handler=\"on_treeview_selection_changed\"/>\n    </object>\n  </child>\n</object>\n```\n\n## CSS nodes\n\n```\ntreeview.view\n├── header\n│   ├── button\n│   │   ╰── [sort-indicator]\n┊   ┊\n│   ╰── button\n│       ╰── [sort-indicator]\n│\n├── [rubberband]\n╰── [dndtarget]\n```\n\n`GtkTreeView` has a main CSS node with name `treeview` and style class `.view`.\nIt has a subnode with name `header`, which is the parent for all the column\nheader widgets' CSS nodes.\n\nEach column header consists of a `button`, which among other content, has a\nchild with name `sort-indicator`, which carries the `.ascending` or `.descending`\nstyle classes when the column header should show a sort indicator. The CSS\nis expected to provide a suitable image using the `-gtk-icon-source` property.\n\nFor rubberband selection, a subnode with name `rubberband` is used.\n\nFor the drop target location during DND, a subnode with name `dndtarget` is used.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeView.html)"
    },
    "deprecated": false,
    "insertText": "TreeView {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "TreeViewColumn",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.TreeViewColumn : GObject.InitiallyUnowned implements Gtk.Buildable, Gtk.CellLayout\n```\n\n---\n\nA visible column in a [class@Gtk.TreeView] widget\n\nThe `GtkTreeViewColumn` object represents a visible column in a `GtkTreeView` widget.\nIt allows to set properties of the column header, and functions as a holding pen\nfor the cell renderers which determine how the data in the column is displayed.\n\nPlease refer to the [tree widget conceptual overview](section-tree-widget.html)\nfor an overview of all the objects and data types related to the tree widget and\nhow they work together, and to the [class@Gtk.TreeView] documentation for specifics\nabout the CSS node structure for treeviews and their headers.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.TreeViewColumn.html)"
    },
    "deprecated": false,
    "insertText": "TreeViewColumn {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "UriLauncher",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.UriLauncher : GObject.Object\n```\n\n---\n\nA `GtkUriLauncher` object collects the arguments that are needed to open a uri\nwith an application.\n\nDepending on system configuration, user preferences and available APIs, this\nmay or may not show an app chooser dialog or launch the default application\nright away.\n\nThe operation is started with the [method@Gtk.UriLauncher.launch] function.\n\nTo launch a file, use [class@Gtk.FileLauncher].\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.UriLauncher.html)"
    },
    "deprecated": false,
    "insertText": "UriLauncher {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Video",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Video : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkVideo` is a widget to show a `GtkMediaStream` with media controls.\n\n![An example GtkVideo](video.png)\n\nThe controls are available separately as [class@Gtk.MediaControls].\nIf you just want to display a video without controls, you can treat it\nlike any other paintable and for example put it into a [class@Gtk.Picture].\n\n`GtkVideo` aims to cover use cases such as previews, embedded animations,\netc. It supports autoplay, looping, and simple media controls. It does\nnot have support for video overlays, multichannel audio, device\nselection, or input. If you are writing a full-fledged video player,\nyou may want to use the [iface@Gdk.Paintable] API and a media framework\nsuch as Gstreamer directly.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Video.html)"
    },
    "deprecated": false,
    "insertText": "Video {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Viewport",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Viewport : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable\n```\n\n---\n\n`GtkViewport` implements scrollability for widgets that lack their\nown scrolling capabilities.\n\nUse `GtkViewport` to scroll child widgets such as `GtkGrid`,\n`GtkBox`, and so on.\n\nThe `GtkViewport` will start scrolling content only if allocated\nless than the child widget’s minimum size in a given orientation.\n\n# CSS nodes\n\n`GtkViewport` has a single CSS node with name `viewport`.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkViewport` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nStarting from GTK 4.12, `GtkViewport` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Viewport.html)"
    },
    "deprecated": false,
    "insertText": "Viewport {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "VolumeButton",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.VolumeButton : Gtk.ScaleButton implements Gtk.Accessible, Gtk.AccessibleRange, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable\n```\n\n---\n\n`GtkVolumeButton` is a `GtkScaleButton` subclass tailored for\nvolume control.\n\n![An example GtkVolumeButton](volumebutton.png)\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.VolumeButton.html)"
    },
    "deprecated": false,
    "insertText": "VolumeButton {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Widget",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Widget : GObject.InitiallyUnowned implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\nThe base class for all widgets.\n\n`GtkWidget` is the base class all widgets in GTK derive from. It manages the\nwidget lifecycle, layout, states and style.\n\n### Height-for-width Geometry Management\n\nGTK uses a height-for-width (and width-for-height) geometry management\nsystem. Height-for-width means that a widget can change how much\nvertical space it needs, depending on the amount of horizontal space\nthat it is given (and similar for width-for-height). The most common\nexample is a label that reflows to fill up the available width, wraps\nto fewer lines, and therefore needs less height.\n\nHeight-for-width geometry management is implemented in GTK by way\nof two virtual methods:\n\n- [vfunc@Gtk.Widget.get_request_mode]\n- [vfunc@Gtk.Widget.measure]\n\nThere are some important things to keep in mind when implementing\nheight-for-width and when using it in widget implementations.\n\nIf you implement a direct `GtkWidget` subclass that supports\nheight-for-width or width-for-height geometry management for itself\nor its child widgets, the [vfunc@Gtk.Widget.get_request_mode] virtual\nfunction must be implemented as well and return the widget's preferred\nrequest mode. The default implementation of this virtual function\nreturns %GTK_SIZE_REQUEST_CONSTANT_SIZE, which means that the widget will\nonly ever get -1 passed as the for_size value to its\n[vfunc@Gtk.Widget.measure] implementation.\n\nThe geometry management system will query a widget hierarchy in\nonly one orientation at a time. When widgets are initially queried\nfor their minimum sizes it is generally done in two initial passes\nin the [enum@Gtk.SizeRequestMode] chosen by the toplevel.\n\nFor example, when queried in the normal %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH mode:\n\nFirst, the default minimum and natural width for each widget\nin the interface will be computed using [method@Gtk.Widget.measure] with an\norientation of %GTK_ORIENTATION_HORIZONTAL and a for_size of -1.\nBecause the preferred widths for each widget depend on the preferred\nwidths of their children, this information propagates up the hierarchy,\nand finally a minimum and natural width is determined for the entire\ntoplevel. Next, the toplevel will use the minimum width to query for the\nminimum height contextual to that width using [method@Gtk.Widget.measure] with an\norientation of %GTK_ORIENTATION_VERTICAL and a for_size of the just computed\nwidth. This will also be a highly recursive operation. The minimum height\nfor the minimum width is normally used to set the minimum size constraint\non the toplevel.\n\nAfter the toplevel window has initially requested its size in both\ndimensions it can go on to allocate itself a reasonable size (or a size\npreviously specified with [method@Gtk.Window.set_default_size]). During the\nrecursive allocation process it’s important to note that request cycles\nwill be recursively executed while widgets allocate their children.\nEach widget, once allocated a size, will go on to first share the\nspace in one orientation among its children and then request each child's\nheight for its target allocated width or its width for allocated height,\ndepending. In this way a `GtkWidget` will typically be requested its size\na number of times before actually being allocated a size. The size a\nwidget is finally allocated can of course differ from the size it has\nrequested. For this reason, `GtkWidget` caches a  small number of results\nto avoid re-querying for the same sizes in one allocation cycle.\n\nIf a widget does move content around to intelligently use up the\nallocated size then it must support the request in both\n`GtkSizeRequestMode`s even if the widget in question only\ntrades sizes in a single orientation.\n\nFor instance, a [class@Gtk.Label] that does height-for-width word wrapping\nwill not expect to have [vfunc@Gtk.Widget.measure] with an orientation of\n%GTK_ORIENTATION_VERTICAL called because that call is specific to a\nwidth-for-height request. In this case the label must return the height\nrequired for its own minimum possible width. By following this rule any\nwidget that handles height-for-width or width-for-height requests will\nalways be allocated at least enough space to fit its own content.\n\nHere are some examples of how a %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget\ngenerally deals with width-for-height requests:\n\n```c\nstatic void\nfoo_widget_measure (GtkWidget      *widget,\n                    GtkOrientation  orientation,\n                    int             for_size,\n                    int            *minimum_size,\n                    int            *natural_size,\n                    int            *minimum_baseline,\n                    int            *natural_baseline)\n{\n  if (orientation == GTK_ORIENTATION_HORIZONTAL)\n    {\n      // Calculate minimum and natural width\n    }\n  else // VERTICAL\n    {\n      if (i_am_in_height_for_width_mode)\n        {\n          int min_width, dummy;\n\n          // First, get the minimum width of our widget\n          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_HORIZONTAL, -1,\n                                                  &min_width, &dummy, &dummy, &dummy);\n\n          // Now use the minimum width to retrieve the minimum and natural height to display\n          // that width.\n          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_VERTICAL, min_width,\n                                                  minimum_size, natural_size, &dummy, &dummy);\n        }\n      else\n        {\n          // ... some widgets do both.\n        }\n    }\n}\n```\n\nOften a widget needs to get its own request during size request or\nallocation. For example, when computing height it may need to also\ncompute width. Or when deciding how to use an allocation, the widget\nmay need to know its natural size. In these cases, the widget should\nbe careful to call its virtual methods directly, like in the code\nexample above.\n\nIt will not work to use the wrapper function [method@Gtk.Widget.measure]\ninside your own [vfunc@Gtk.Widget.size_allocate] implementation.\nThese return a request adjusted by [class@Gtk.SizeGroup], the widget's\nalign and expand flags, as well as its CSS style.\n\nIf a widget used the wrappers inside its virtual method implementations,\nthen the adjustments (such as widget margins) would be applied\ntwice. GTK therefore does not allow this and will warn if you try\nto do it.\n\nOf course if you are getting the size request for another widget, such\nas a child widget, you must use [method@Gtk.Widget.measure]; otherwise, you\nwould not properly consider widget margins, [class@Gtk.SizeGroup], and\nso forth.\n\nGTK also supports baseline vertical alignment of widgets. This\nmeans that widgets are positioned such that the typographical baseline of\nwidgets in the same row are aligned. This happens if a widget supports\nbaselines, has a vertical alignment using baselines, and is inside\na widget that supports baselines and has a natural “row” that it aligns to\nthe baseline, or a baseline assigned to it by the grandparent.\n\nBaseline alignment support for a widget is also done by the\n[vfunc@Gtk.Widget.measure] virtual function. It allows you to report\nboth a minimum and natural size.\n\nIf a widget ends up baseline aligned it will be allocated all the space in\nthe parent as if it was %GTK_ALIGN_FILL, but the selected baseline can be\nfound via [method@Gtk.Widget.get_baseline]. If the baseline has a\nvalue other than -1 you need to align the widget such that the baseline\nappears at the position.\n\n### GtkWidget as GtkBuildable\n\nThe `GtkWidget` implementation of the `GtkBuildable` interface\nsupports various custom elements to specify additional aspects of widgets\nthat are not directly expressed as properties.\n\nIf the widget uses a [class@Gtk.LayoutManager], `GtkWidget` supports\na custom `<layout>` element, used to define layout properties:\n\n```xml\n<object class=\"GtkGrid\" id=\"my_grid\">\n  <child>\n    <object class=\"GtkLabel\" id=\"label1\">\n      <property name=\"label\">Description</property>\n      <layout>\n        <property name=\"column\">0</property>\n        <property name=\"row\">0</property>\n        <property name=\"row-span\">1</property>\n        <property name=\"column-span\">1</property>\n      </layout>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkEntry\" id=\"description_entry\">\n      <layout>\n        <property name=\"column\">1</property>\n        <property name=\"row\">0</property>\n        <property name=\"row-span\">1</property>\n        <property name=\"column-span\">1</property>\n      </layout>\n    </object>\n  </child>\n</object>\n```\n\n`GtkWidget` allows style information such as style classes to\nbe associated with widgets, using the custom `<style>` element:\n\n```xml\n<object class=\"GtkButton\" id=\"button1\">\n  <style>\n    <class name=\"my-special-button-class\"/>\n    <class name=\"dark-button\"/>\n  </style>\n</object>\n```\n\n`GtkWidget` allows defining accessibility information, such as properties,\nrelations, and states, using the custom `<accessibility>` element:\n\n```xml\n<object class=\"GtkButton\" id=\"button1\">\n  <accessibility>\n    <property name=\"label\">Download</property>\n    <relation name=\"labelled-by\">label1</relation>\n  </accessibility>\n</object>\n```\n\n### Building composite widgets from template XML\n\n`GtkWidget `exposes some facilities to automate the procedure\nof creating composite widgets using \"templates\".\n\nTo create composite widgets with `GtkBuilder` XML, one must associate\nthe interface description with the widget class at class initialization\ntime using [method@Gtk.WidgetClass.set_template].\n\nThe interface description semantics expected in composite template descriptions\nis slightly different from regular [class@Gtk.Builder] XML.\n\nUnlike regular interface descriptions, [method@Gtk.WidgetClass.set_template]\nwill expect a `<template>` tag as a direct child of the toplevel\n`<interface>` tag. The `<template>` tag must specify the “class” attribute\nwhich must be the type name of the widget. Optionally, the “parent”\nattribute may be specified to specify the direct parent type of the widget\ntype; this is ignored by `GtkBuilder` but can be used by UI design tools to\nintrospect what kind of properties and internal children exist for a given\ntype when the actual type does not exist.\n\nThe XML which is contained inside the `<template>` tag behaves as if it were\nadded to the `<object>` tag defining the widget itself. You may set properties\non a widget by inserting `<property>` tags into the `<template>` tag, and also\nadd `<child>` tags to add children and extend a widget in the normal way you\nwould with `<object>` tags.\n\nAdditionally, `<object>` tags can also be added before and after the initial\n`<template>` tag in the normal way, allowing one to define auxiliary objects\nwhich might be referenced by other widgets declared as children of the\n`<template>` tag.\n\nSince, unlike the `<object>` tag, the `<template>` tag does not contain an\n“id” attribute, if you need to refer to the instance of the object itself that\nthe template will create, simply refer to the template class name in an\napplicable element content.\n\nHere is an example of a template definition, which includes an example of\nthis in the `<signal>` tag:\n\n```xml\n<interface>\n  <template class=\"FooWidget\" parent=\"GtkBox\">\n    <property name=\"orientation\">horizontal</property>\n    <property name=\"spacing\">4</property>\n    <child>\n      <object class=\"GtkButton\" id=\"hello_button\">\n        <property name=\"label\">Hello World</property>\n        <signal name=\"clicked\" handler=\"hello_button_clicked\" object=\"FooWidget\" swapped=\"yes\"/>\n      </object>\n    </child>\n    <child>\n      <object class=\"GtkButton\" id=\"goodbye_button\">\n        <property name=\"label\">Goodbye World</property>\n      </object>\n    </child>\n  </template>\n</interface>\n```\n\nTypically, you'll place the template fragment into a file that is\nbundled with your project, using `GResource`. In order to load the\ntemplate, you need to call [method@Gtk.WidgetClass.set_template_from_resource]\nfrom the class initialization of your `GtkWidget` type:\n\n```c\nstatic void\nfoo_widget_class_init (FooWidgetClass *klass)\n{\n  // ...\n\n  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),\n                                               \"/com/example/ui/foowidget.ui\");\n}\n```\n\nYou will also need to call [method@Gtk.Widget.init_template] from the\ninstance initialization function:\n\n```c\nstatic void\nfoo_widget_init (FooWidget *self)\n{\n  gtk_widget_init_template (GTK_WIDGET (self));\n\n  // Initialize the rest of the widget...\n}\n```\n\nas well as calling [method@Gtk.Widget.dispose_template] from the dispose\nfunction:\n\n```c\nstatic void\nfoo_widget_dispose (GObject *gobject)\n{\n  FooWidget *self = FOO_WIDGET (gobject);\n\n  // Dispose objects for which you have a reference...\n\n  // Clear the template children for this widget type\n  gtk_widget_dispose_template (GTK_WIDGET (self), FOO_TYPE_WIDGET);\n\n  G_OBJECT_CLASS (foo_widget_parent_class)->dispose (gobject);\n}\n```\n\nYou can access widgets defined in the template using the\n[method@Gtk.Widget.get_template_child] function, but you will typically declare\na pointer in the instance private data structure of your type using the same\nname as the widget in the template definition, and call\n[method@Gtk.WidgetClass.bind_template_child_full] (or one of its wrapper macros\n[func@Gtk.widget_class_bind_template_child] and [func@Gtk.widget_class_bind_template_child_private])\nwith that name, e.g.\n\n```c\ntypedef struct {\n  GtkWidget *hello_button;\n  GtkWidget *goodbye_button;\n} FooWidgetPrivate;\n\nG_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)\n\nstatic void\nfoo_widget_dispose (GObject *gobject)\n{\n  gtk_widget_dispose_template (GTK_WIDGET (gobject), FOO_TYPE_WIDGET);\n\n  G_OBJECT_CLASS (foo_widget_parent_class)->dispose (gobject);\n}\n\nstatic void\nfoo_widget_class_init (FooWidgetClass *klass)\n{\n  // ...\n  G_OBJECT_CLASS (klass)->dispose = foo_widget_dispose;\n\n  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),\n                                               \"/com/example/ui/foowidget.ui\");\n  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),\n                                                FooWidget, hello_button);\n  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),\n                                                FooWidget, goodbye_button);\n}\n\nstatic void\nfoo_widget_init (FooWidget *widget)\n{\n  gtk_widget_init_template (GTK_WIDGET (widget));\n}\n```\n\nYou can also use [method@Gtk.WidgetClass.bind_template_callback_full] (or\nis wrapper macro [func@Gtk.widget_class_bind_template_callback]) to connect\na signal callback defined in the template with a function visible in the\nscope of the class, e.g.\n\n```c\n// the signal handler has the instance and user data swapped\n// because of the swapped=\"yes\" attribute in the template XML\nstatic void\nhello_button_clicked (FooWidget *self,\n                      GtkButton *button)\n{\n  g_print (\"Hello, world!\\n\");\n}\n\nstatic void\nfoo_widget_class_init (FooWidgetClass *klass)\n{\n  // ...\n  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),\n                                               \"/com/example/ui/foowidget.ui\");\n  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);\n}\n```\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Widget.html)"
    },
    "deprecated": false,
    "insertText": "Widget {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "WidgetPaintable",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.WidgetPaintable : GObject.Object implements Gdk.Paintable\n```\n\n---\n\n`GtkWidgetPaintable` is a `GdkPaintable` that displays the contents\nof a widget.\n\n`GtkWidgetPaintable` will also take care of the widget not being in a\nstate where it can be drawn (like when it isn't shown) and just draw\nnothing or where it does not have a size (like when it is hidden) and\nreport no size in that case.\n\nOf course, `GtkWidgetPaintable` allows you to monitor widgets for size\nchanges by emitting the [signal@Gdk.Paintable::invalidate-size] signal\nwhenever the size of the widget changes as well as for visual changes by\nemitting the [signal@Gdk.Paintable::invalidate-contents] signal whenever\nthe widget changes.\n\nYou can use a `GtkWidgetPaintable` everywhere a `GdkPaintable` is allowed,\nincluding using it on a `GtkPicture` (or one of its parents) that it was\nset on itself via gtk_picture_set_paintable(). The paintable will take care\nof recursion when this happens. If you do this however, ensure that the\n[property@Gtk.Picture:can-shrink] property is set to %TRUE or you might\nend up with an infinitely growing widget.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.WidgetPaintable.html)"
    },
    "deprecated": false,
    "insertText": "WidgetPaintable {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "Window",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.Window : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager\n```\n\n---\n\nA `GtkWindow` is a toplevel window which can contain other widgets.\n\n![An example GtkWindow](window.png)\n\nWindows normally have decorations that are under the control\nof the windowing system and allow the user to manipulate the window\n(resize it, move it, close it,...).\n\n# GtkWindow as GtkBuildable\n\nThe `GtkWindow` implementation of the [iface@Gtk.Buildable] interface supports\nsetting a child as the titlebar by specifying “titlebar” as the “type”\nattribute of a `<child>` element.\n\n# CSS nodes\n\n```\nwindow.background [.csd / .solid-csd / .ssd] [.maximized / .fullscreen / .tiled]\n├── <child>\n╰── <titlebar child>.titlebar [.default-decoration]\n```\n\n`GtkWindow` has a main CSS node with name window and style class .background.\n\nStyle classes that are typically used with the main CSS node are .csd (when\nclient-side decorations are in use), .solid-csd (for client-side decorations\nwithout invisible borders), .ssd (used by mutter when rendering server-side\ndecorations). GtkWindow also represents window states with the following\nstyle classes on the main node: .maximized, .fullscreen, .tiled (when supported,\nalso .tiled-top, .tiled-left, .tiled-right, .tiled-bottom).\n\n`GtkWindow` subclasses often add their own discriminating style classes,\nsuch as .dialog, .popup or .tooltip.\n\nGenerally, some CSS properties don't make sense on the toplevel window node,\nsuch as margins or padding. When client-side decorations without invisible\nborders are in use (i.e. the .solid-csd style class is added to the\nmain window node), the CSS border of the toplevel window is used for\nresize drags. In the .csd case, the shadow area outside of the window\ncan be used to resize it.\n\n`GtkWindow` adds the .titlebar and .default-decoration style classes to the\nwidget that is added as a titlebar child.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkWindow` used the `GTK_ACCESSIBLE_ROLE_WINDOW` role.\n\nSince GTK 4.12, `GtkWindow` uses the `GTK_ACCESSIBLE_ROLE_APPLICATION` role.\n\n# Actions\n\n`GtkWindow` defines a set of built-in actions:\n- `default.activate`: Activate the default widget.\n- `window.minimize`: Minimize the window.\n- `window.toggle-maximized`: Maximize or restore the window.\n- `window.close`: Close the window.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.Window.html)"
    },
    "deprecated": false,
    "insertText": "Window {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "WindowControls",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.WindowControls : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkWindowControls` shows window frame controls.\n\nTypical window frame controls are minimize, maximize and close buttons,\nand the window icon.\n\n![An example GtkWindowControls](windowcontrols.png)\n\n`GtkWindowControls` only displays start or end side of the controls (see\n[property@Gtk.WindowControls:side]), so it's intended to be always used\nin pair with another `GtkWindowControls` for the opposite side, for example:\n\n```xml\n<object class=\"GtkBox\">\n  <child>\n    <object class=\"GtkWindowControls\">\n      <property name=\"side\">start</property>\n    </object>\n  </child>\n\n  ...\n\n  <child>\n    <object class=\"GtkWindowControls\">\n      <property name=\"side\">end</property>\n    </object>\n  </child>\n</object>\n```\n\n# CSS nodes\n\n```\nwindowcontrols\n├── [image.icon]\n├── [button.minimize]\n├── [button.maximize]\n╰── [button.close]\n```\n\nA `GtkWindowControls`' CSS node is called windowcontrols. It contains\nsubnodes corresponding to each title button. Which of the title buttons\nexist and where they are placed exactly depends on the desktop environment\nand [property@Gtk.WindowControls:decoration-layout] value.\n\nWhen [property@Gtk.WindowControls:empty] is %TRUE, it gets the .empty\nstyle class.\n\n# Accessibility\n\n`GtkWindowControls` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.WindowControls.html)"
    },
    "deprecated": false,
    "insertText": "WindowControls {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "WindowGroup",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.WindowGroup : GObject.Object\n```\n\n---\n\n`GtkWindowGroup` makes group of windows behave like separate applications.\n\nIt achieves this by limiting the effect of GTK grabs and modality\nto windows in the same group.\n\nA window can be a member in at most one window group at a time.\nWindows that have not been explicitly assigned to a group are\nimplicitly treated like windows of the default window group.\n\n`GtkWindowGroup` objects are referenced by each window in the group,\nso once you have added all windows to a `GtkWindowGroup`, you can drop\nthe initial reference to the window group with g_object_unref(). If the\nwindows in the window group are subsequently destroyed, then they will\nbe removed from the window group and drop their references on the window\ngroup; when all window have been removed, the window group will be\nfreed.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.WindowGroup.html)"
    },
    "deprecated": false,
    "insertText": "WindowGroup {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "WindowHandle",
    "kind": 7,
    "documentation": {
      "kind": "markdown",
      "value": "```\nclass Gtk.WindowHandle : Gtk.Widget implements Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget\n```\n\n---\n\n`GtkWindowHandle` is a titlebar area widget.\n\nWhen added into a window, it can be dragged to move the window, and handles\nright click, double click and middle click as expected of a titlebar.\n\n# CSS nodes\n\n`GtkWindowHandle` has a single CSS node with the name `windowhandle`.\n\n# Accessibility\n\nUntil GTK 4.10, `GtkWindowHandle` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.\n\nStarting from GTK 4.12, `GtkWindowHandle` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.\n\n---\n\n[Online documentation](https://docs.gtk.org/gtk4/class.WindowHandle.html)"
    },
    "deprecated": false,
    "insertText": "WindowHandle {\n  $0\n\\}",
    "insertTextFormat": 2
  },
  {
    "label": "file",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 file",
    "insertText": "file: \"$0\";",
    "insertTextFormat": 2
  },
  {
    "label": "gicon",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 gicon",
    "insertText": "gicon: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "icon-name",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 icon-name",
    "insertText": "icon-name: \"$0\";",
    "insertTextFormat": 2
  },
  {
    "label": "icon-size",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 icon-size",
    "insertText": "icon-size: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "paintable",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 paintable",
    "insertText": "paintable: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "pixel-size",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 pixel-size",
    "insertText": "pixel-size: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "resource",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 resource",
    "insertText": "resource: \"$0\";",
    "insertTextFormat": 2
  },
  {
    "label": "storage-type",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 storage-type",
    "insertText": "storage-type: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "use-fallback",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 use-fallback",
    "insertText": "use-fallback: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "can-focus",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 can-focus",
    "insertText": "can-focus: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "can-target",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 can-target",
    "insertText": "can-target: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "css-classes",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 css-classes",
    "insertText": "css-classes: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "css-name",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 css-name",
    "insertText": "css-name: \"$0\";",
    "insertTextFormat": 2
  },
  {
    "label": "cursor",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 cursor",
    "insertText": "cursor: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "focus-on-click",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 focus-on-click",
    "insertText": "focus-on-click: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "focusable",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 focusable",
    "insertText": "focusable: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "halign",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 halign",
    "insertText": "halign: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "has-default",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 has-default",
    "insertText": "has-default: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "has-focus",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 has-focus",
    "insertText": "has-focus: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "has-tooltip",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 has-tooltip",
    "insertText": "has-tooltip: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "height-request",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 height-request",
    "insertText": "height-request: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "hexpand",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 hexpand",
    "insertText": "hexpand: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "hexpand-set",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 hexpand-set",
    "insertText": "hexpand-set: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "layout-manager",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 layout-manager",
    "insertText": "layout-manager: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "margin-bottom",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 margin-bottom",
    "insertText": "margin-bottom: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "margin-end",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 margin-end",
    "insertText": "margin-end: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "margin-start",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 margin-start",
    "insertText": "margin-start: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "margin-top",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 margin-top",
    "insertText": "margin-top: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "name",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 name",
    "insertText": "name: \"$0\";",
    "insertTextFormat": 2
  },
  {
    "label": "opacity",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 opacity",
    "insertText": "opacity: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "overflow",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 overflow",
    "insertText": "overflow: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "parent",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 parent",
    "insertText": "parent: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "receives-default",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 receives-default",
    "insertText": "receives-default: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "root",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 root",
    "insertText": "root: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "scale-factor",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 scale-factor",
    "insertText": "scale-factor: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "sensitive",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 sensitive",
    "insertText": "sensitive: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "tooltip-markup",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 tooltip-markup",
    "insertText": "tooltip-markup: \"$0\";",
    "insertTextFormat": 2
  },
  {
    "label": "tooltip-text",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 tooltip-text",
    "insertText": "tooltip-text: \"$0\";",
    "insertTextFormat": 2
  },
  {
    "label": "valign",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 valign",
    "insertText": "valign: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "vexpand",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 vexpand",
    "insertText": "vexpand: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "vexpand-set",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 vexpand-set",
    "insertText": "vexpand-set: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "visible",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 visible",
    "insertText": "visible: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "width-request",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 width-request",
    "insertText": "width-request: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "accessible-role",
    "kind": 10,
    "deprecated": false,
    "sortText": "0 accessible-role",
    "insertText": "accessible-role: $0;",
    "insertTextFormat": 2
  },
  {
    "label": "destroy",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 destroy",
    "insertText": "destroy => \\$${1:on_image_destroy}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "direction-changed",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 direction-changed",
    "insertText": "direction-changed => \\$${1:on_image_direction_changed}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "hide",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 hide",
    "insertText": "hide => \\$${1:on_image_hide}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "keynav-failed",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 keynav-failed",
    "insertText": "keynav-failed => \\$${1:on_image_keynav_failed}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "map",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 map",
    "insertText": "map => \\$${1:on_image_map}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "mnemonic-activate",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 mnemonic-activate",
    "insertText": "mnemonic-activate => \\$${1:on_image_mnemonic_activate}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "move-focus",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 move-focus",
    "insertText": "move-focus => \\$${1:on_image_move_focus}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "query-tooltip",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 query-tooltip",
    "insertText": "query-tooltip => \\$${1:on_image_query_tooltip}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "realize",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 realize",
    "insertText": "realize => \\$${1:on_image_realize}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "show",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 show",
    "insertText": "show => \\$${1:on_image_show}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "state-flags-changed",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 state-flags-changed",
    "insertText": "state-flags-changed => \\$${1:on_image_state_flags_changed}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "unmap",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 unmap",
    "insertText": "unmap => \\$${1:on_image_unmap}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "unrealize",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 unrealize",
    "insertText": "unrealize => \\$${1:on_image_unrealize}()$0;",
    "insertTextFormat": 2
  },
  {
    "label": "notify",
    "kind": 23,
    "deprecated": false,
    "sortText": "1 notify",
    "insertText": "notify => \\$${1:on_image_notify}()$0;",
    "insertTextFormat": 2
  }
]
